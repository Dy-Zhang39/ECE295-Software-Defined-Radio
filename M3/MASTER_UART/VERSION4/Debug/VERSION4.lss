
VERSION4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00001954  000019e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001954  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  0080021c  0080021c  00001b04  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d45  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7e  00000000  00000000  000039e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3d  00000000  00000000  00004563  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  000052a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000664  00000000  00000000  0000563c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012e7  00000000  00000000  00005ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00006f87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_5>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	12 e0       	ldi	r17, 0x02	; 2
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 e5       	ldi	r30, 0x54	; 84
      90:	f9 e1       	ldi	r31, 0x19	; 25
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ac 31       	cpi	r26, 0x1C	; 28
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	22 e0       	ldi	r18, 0x02	; 2
      a0:	ac e1       	ldi	r26, 0x1C	; 28
      a2:	b2 e0       	ldi	r27, 0x02	; 2
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a4 3f       	cpi	r26, 0xF4	; 244
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 c4 01 	call	0x388	; 0x388 <main>
      b2:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <i2cStart>:
	*data = i2cByteRead();

	i2cStop();

	return 0;
}
      ba:	84 ea       	ldi	r24, 0xA4	; 164
      bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      c4:	88 23       	and	r24, r24
      c6:	e4 f7       	brge	.-8      	; 0xc0 <i2cStart+0x6>
      c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
      cc:	88 7f       	andi	r24, 0xF8	; 248
      ce:	08 95       	ret

000000d0 <i2cStop>:
      d0:	84 e9       	ldi	r24, 0x94	; 148
      d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      da:	84 fd       	sbrc	r24, 4
      dc:	fc cf       	rjmp	.-8      	; 0xd6 <i2cStop+0x6>
      de:	08 95       	ret

000000e0 <i2cByteSend>:
      e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      e4:	84 e8       	ldi	r24, 0x84	; 132
      e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      ee:	88 23       	and	r24, r24
      f0:	e4 f7       	brge	.-8      	; 0xea <i2cByteSend+0xa>
      f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
      f6:	88 7f       	andi	r24, 0xF8	; 248
      f8:	08 95       	ret

000000fa <i2cSendRegister>:
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	c8 2f       	mov	r28, r24
     100:	d6 2f       	mov	r29, r22
     102:	0e 94 5d 00 	call	0xba	; 0xba <i2cStart>
     106:	88 30       	cpi	r24, 0x08	; 8
     108:	99 f4       	brne	.+38     	; 0x130 <i2cSendRegister+0x36>
     10a:	80 ec       	ldi	r24, 0xC0	; 192
     10c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2cByteSend>
     110:	88 31       	cpi	r24, 0x18	; 24
     112:	81 f4       	brne	.+32     	; 0x134 <i2cSendRegister+0x3a>
     114:	8c 2f       	mov	r24, r28
     116:	0e 94 70 00 	call	0xe0	; 0xe0 <i2cByteSend>
     11a:	88 32       	cpi	r24, 0x28	; 40
     11c:	69 f4       	brne	.+26     	; 0x138 <i2cSendRegister+0x3e>
     11e:	8d 2f       	mov	r24, r29
     120:	0e 94 70 00 	call	0xe0	; 0xe0 <i2cByteSend>
     124:	88 32       	cpi	r24, 0x28	; 40
     126:	51 f4       	brne	.+20     	; 0x13c <i2cSendRegister+0x42>
     128:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cStop>
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	07 c0       	rjmp	.+14     	; 0x13e <i2cSendRegister+0x44>
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	05 c0       	rjmp	.+10     	; 0x13e <i2cSendRegister+0x44>
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	03 c0       	rjmp	.+6      	; 0x13e <i2cSendRegister+0x44>
     138:	83 e0       	ldi	r24, 0x03	; 3
     13a:	01 c0       	rjmp	.+2      	; 0x13e <i2cSendRegister+0x44>
     13c:	84 e0       	ldi	r24, 0x04	; 4
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <i2cInit>:

// Init TWI (I2C)
//
void i2cInit()
{
	TWBR = 92;						
     144:	8c e5       	ldi	r24, 0x5C	; 92
     146:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0;
     14a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWDR = 0xFF;
     14e:	8f ef       	ldi	r24, 0xFF	; 255
     150:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     154:	08 95       	ret

00000156 <I2Csendcmd>:
	//PRR = 0;
}

void I2Csendcmd(uint8_t addr, uint8_t cmd)
{
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	d8 2f       	mov	r29, r24
     15c:	c6 2f       	mov	r28, r22
	i2cStart();
     15e:	0e 94 5d 00 	call	0xba	; 0xba <i2cStart>
	i2cByteSend(addr);
     162:	8d 2f       	mov	r24, r29
     164:	0e 94 70 00 	call	0xe0	; 0xe0 <i2cByteSend>
	i2cByteSend(0x00);
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 70 00 	call	0xe0	; 0xe0 <i2cByteSend>
	i2cByteSend(cmd);
     16e:	8c 2f       	mov	r24, r28
     170:	0e 94 70 00 	call	0xe0	; 0xe0 <i2cByteSend>
	i2cStop();
     174:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cStop>
}
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <I2Csenddatum>:


void I2Csenddatum(uint8_t addr, uint8_t data) 
{
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	d8 2f       	mov	r29, r24
     184:	c6 2f       	mov	r28, r22
	i2cStart();
     186:	0e 94 5d 00 	call	0xba	; 0xba <i2cStart>
	i2cByteSend(addr);
     18a:	8d 2f       	mov	r24, r29
     18c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2cByteSend>
	i2cByteSend(0x40);
     190:	80 e4       	ldi	r24, 0x40	; 64
     192:	0e 94 70 00 	call	0xe0	; 0xe0 <i2cByteSend>
	i2cByteSend(data);
     196:	8c 2f       	mov	r24, r28
     198:	0e 94 70 00 	call	0xe0	; 0xe0 <i2cByteSend>
	i2cStop();
     19c:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cStop>
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <screen_write_string>:
char RX_Char(){
	while(!(UCSR0A & (1<<RXC0))); //Check receive completed flag RXC0

	// Receive data
	return UDR0;
}
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	6c 01       	movw	r12, r24
     1bc:	a6 2e       	mov	r10, r22
     1be:	b7 2e       	mov	r11, r23
     1c0:	88 e7       	ldi	r24, 0x78	; 120
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
     1c8:	ea 2c       	mov	r14, r10
     1ca:	fb 2c       	mov	r15, r11
     1cc:	c0 e0       	ldi	r28, 0x00	; 0
     1ce:	d0 e0       	ldi	r29, 0x00	; 0
     1d0:	26 c0       	rjmp	.+76     	; 0x21e <screen_write_string+0x78>
     1d2:	20 97       	sbiw	r28, 0x00	; 0
     1d4:	e1 f0       	breq	.+56     	; 0x20e <screen_write_string+0x68>
     1d6:	ce 01       	movw	r24, r28
     1d8:	6a e0       	ldi	r22, 0x0A	; 10
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__divmodhi4>
     1e0:	89 2b       	or	r24, r25
     1e2:	a9 f4       	brne	.+42     	; 0x20e <screen_write_string+0x68>
     1e4:	80 ee       	ldi	r24, 0xE0	; 224
     1e6:	e8 16       	cp	r14, r24
     1e8:	f1 04       	cpc	r15, r1
     1ea:	49 f4       	brne	.+18     	; 0x1fe <screen_write_string+0x58>
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	88 e7       	ldi	r24, 0x78	; 120
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
     1f8:	ea 2c       	mov	r14, r10
     1fa:	fb 2c       	mov	r15, r11
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <screen_write_string+0x5e>
     1fe:	e0 e2       	ldi	r30, 0x20	; 32
     200:	ee 0e       	add	r14, r30
     202:	f1 1c       	adc	r15, r1
     204:	b7 01       	movw	r22, r14
     206:	88 e7       	ldi	r24, 0x78	; 120
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
     20e:	f8 01       	movw	r30, r16
     210:	60 81       	ld	r22, Z
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	88 e7       	ldi	r24, 0x78	; 120
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 bf 00 	call	0x17e	; 0x17e <I2Csenddatum>
     21c:	21 96       	adiw	r28, 0x01	; 1
     21e:	86 01       	movw	r16, r12
     220:	0c 0f       	add	r16, r28
     222:	1d 1f       	adc	r17, r29
     224:	f8 01       	movw	r30, r16
     226:	80 81       	ld	r24, Z
     228:	81 11       	cpse	r24, r1
     22a:	d3 cf       	rjmp	.-90     	; 0x1d2 <screen_write_string+0x2c>
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	1f 91       	pop	r17
     232:	0f 91       	pop	r16
     234:	ff 90       	pop	r15
     236:	ef 90       	pop	r14
     238:	df 90       	pop	r13
     23a:	cf 90       	pop	r12
     23c:	bf 90       	pop	r11
     23e:	af 90       	pop	r10
     240:	08 95       	ret

00000242 <getInputChar>:
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	91 05       	cpc	r25, r1
     246:	99 f4       	brne	.+38     	; 0x26e <getInputChar+0x2c>
     248:	61 30       	cpi	r22, 0x01	; 1
     24a:	71 05       	cpc	r23, r1
     24c:	09 f4       	brne	.+2      	; 0x250 <getInputChar+0xe>
     24e:	44 c0       	rjmp	.+136    	; 0x2d8 <getInputChar+0x96>
     250:	62 30       	cpi	r22, 0x02	; 2
     252:	71 05       	cpc	r23, r1
     254:	09 f4       	brne	.+2      	; 0x258 <getInputChar+0x16>
     256:	43 c0       	rjmp	.+134    	; 0x2de <getInputChar+0x9c>
     258:	64 30       	cpi	r22, 0x04	; 4
     25a:	71 05       	cpc	r23, r1
     25c:	09 f4       	brne	.+2      	; 0x260 <getInputChar+0x1e>
     25e:	42 c0       	rjmp	.+132    	; 0x2e4 <getInputChar+0xa2>
     260:	68 30       	cpi	r22, 0x08	; 8
     262:	71 05       	cpc	r23, r1
     264:	09 f0       	breq	.+2      	; 0x268 <getInputChar+0x26>
     266:	41 c0       	rjmp	.+130    	; 0x2ea <getInputChar+0xa8>
     268:	8a e0       	ldi	r24, 0x0A	; 10
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	08 95       	ret
     26e:	82 30       	cpi	r24, 0x02	; 2
     270:	91 05       	cpc	r25, r1
     272:	79 f4       	brne	.+30     	; 0x292 <getInputChar+0x50>
     274:	61 30       	cpi	r22, 0x01	; 1
     276:	71 05       	cpc	r23, r1
     278:	d9 f1       	breq	.+118    	; 0x2f0 <getInputChar+0xae>
     27a:	62 30       	cpi	r22, 0x02	; 2
     27c:	71 05       	cpc	r23, r1
     27e:	d9 f1       	breq	.+118    	; 0x2f6 <getInputChar+0xb4>
     280:	64 30       	cpi	r22, 0x04	; 4
     282:	71 05       	cpc	r23, r1
     284:	d9 f1       	breq	.+118    	; 0x2fc <getInputChar+0xba>
     286:	68 30       	cpi	r22, 0x08	; 8
     288:	71 05       	cpc	r23, r1
     28a:	d9 f5       	brne	.+118    	; 0x302 <getInputChar+0xc0>
     28c:	8b e0       	ldi	r24, 0x0B	; 11
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	08 95       	ret
     292:	84 30       	cpi	r24, 0x04	; 4
     294:	91 05       	cpc	r25, r1
     296:	79 f4       	brne	.+30     	; 0x2b6 <getInputChar+0x74>
     298:	61 30       	cpi	r22, 0x01	; 1
     29a:	71 05       	cpc	r23, r1
     29c:	a9 f1       	breq	.+106    	; 0x308 <getInputChar+0xc6>
     29e:	62 30       	cpi	r22, 0x02	; 2
     2a0:	71 05       	cpc	r23, r1
     2a2:	a9 f1       	breq	.+106    	; 0x30e <getInputChar+0xcc>
     2a4:	64 30       	cpi	r22, 0x04	; 4
     2a6:	71 05       	cpc	r23, r1
     2a8:	a9 f1       	breq	.+106    	; 0x314 <getInputChar+0xd2>
     2aa:	68 30       	cpi	r22, 0x08	; 8
     2ac:	71 05       	cpc	r23, r1
     2ae:	a9 f5       	brne	.+106    	; 0x31a <getInputChar+0xd8>
     2b0:	8c e0       	ldi	r24, 0x0C	; 12
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	08 95       	ret
     2b6:	08 97       	sbiw	r24, 0x08	; 8
     2b8:	99 f5       	brne	.+102    	; 0x320 <getInputChar+0xde>
     2ba:	61 30       	cpi	r22, 0x01	; 1
     2bc:	71 05       	cpc	r23, r1
     2be:	99 f1       	breq	.+102    	; 0x326 <getInputChar+0xe4>
     2c0:	62 30       	cpi	r22, 0x02	; 2
     2c2:	71 05       	cpc	r23, r1
     2c4:	99 f1       	breq	.+102    	; 0x32c <getInputChar+0xea>
     2c6:	64 30       	cpi	r22, 0x04	; 4
     2c8:	71 05       	cpc	r23, r1
     2ca:	99 f1       	breq	.+102    	; 0x332 <getInputChar+0xf0>
     2cc:	68 30       	cpi	r22, 0x08	; 8
     2ce:	71 05       	cpc	r23, r1
     2d0:	99 f5       	brne	.+102    	; 0x338 <getInputChar+0xf6>
     2d2:	8d e0       	ldi	r24, 0x0D	; 13
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	08 95       	ret
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	08 95       	ret
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	08 95       	ret
     2e4:	83 e0       	ldi	r24, 0x03	; 3
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	08 95       	ret
     2ea:	80 e1       	ldi	r24, 0x10	; 16
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	08 95       	ret
     2f0:	84 e0       	ldi	r24, 0x04	; 4
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	08 95       	ret
     2f6:	85 e0       	ldi	r24, 0x05	; 5
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	08 95       	ret
     2fc:	86 e0       	ldi	r24, 0x06	; 6
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	08 95       	ret
     302:	80 e1       	ldi	r24, 0x10	; 16
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	08 95       	ret
     308:	87 e0       	ldi	r24, 0x07	; 7
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	08 95       	ret
     30e:	88 e0       	ldi	r24, 0x08	; 8
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	08 95       	ret
     314:	89 e0       	ldi	r24, 0x09	; 9
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	08 95       	ret
     31a:	80 e1       	ldi	r24, 0x10	; 16
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	08 95       	ret
     320:	80 e1       	ldi	r24, 0x10	; 16
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	08 95       	ret
     326:	8f e0       	ldi	r24, 0x0F	; 15
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	08 95       	ret
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	08 95       	ret
     332:	8e e0       	ldi	r24, 0x0E	; 14
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	08 95       	ret
     338:	80 e1       	ldi	r24, 0x10	; 16
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	08 95       	ret

0000033e <UART_Init>:
     33e:	88 e9       	ldi	r24, 0x98	; 152
     340:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     34a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     34e:	83 e3       	ldi	r24, 0x33	; 51
     350:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     354:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     358:	08 95       	ret

0000035a <TX_Char>:
     35a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     35e:	95 ff       	sbrs	r25, 5
     360:	fc cf       	rjmp	.-8      	; 0x35a <TX_Char>
     362:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     366:	08 95       	ret

00000368 <TX_String>:
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ec 01       	movw	r28, r24
     36e:	03 c0       	rjmp	.+6      	; 0x376 <TX_String+0xe>
     370:	0e 94 ad 01 	call	0x35a	; 0x35a <TX_Char>
     374:	21 96       	adiw	r28, 0x01	; 1
     376:	88 81       	ld	r24, Y
     378:	81 11       	cpse	r24, r1
     37a:	fa cf       	rjmp	.-12     	; 0x370 <TX_String+0x8>
     37c:	8b e3       	ldi	r24, 0x3B	; 59
     37e:	0e 94 ad 01 	call	0x35a	; 0x35a <TX_Char>
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <main>:
// Computer

int main(void)
{
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	c6 5c       	subi	r28, 0xC6	; 198
     392:	d1 09       	sbc	r29, r1
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
	CLKPR = 1 << CLKPCE;
     39e:	e1 e6       	ldi	r30, 0x61	; 97
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 e8       	ldi	r24, 0x80	; 128
     3a4:	80 83       	st	Z, r24
	CLKPR = 0;
     3a6:	10 82       	st	Z, r1

	//LCD Part
	DDRA = 0xff; //PortA as output (only need PA0 for display)
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ac:	8f e0       	ldi	r24, 0x0F	; 15
     3ae:	97 e2       	ldi	r25, 0x27	; 39
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <main+0x28>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x2e>
     3b6:	00 00       	nop
	
	_delay_ms(5);
	PORTA = PORTA | (0<<PA0); // turn off
     3b8:	82 b1       	in	r24, 0x02	; 2
     3ba:	82 b9       	out	0x02, r24	; 2
     3bc:	9f ef       	ldi	r25, 0xFF	; 255
     3be:	a1 ee       	ldi	r26, 0xE1	; 225
     3c0:	b4 e0       	ldi	r27, 0x04	; 4
     3c2:	91 50       	subi	r25, 0x01	; 1
     3c4:	a0 40       	sbci	r26, 0x00	; 0
     3c6:	b0 40       	sbci	r27, 0x00	; 0
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x3a>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x44>
     3cc:	00 00       	nop
	_delay_ms(200);
	PORTA = PORTA | (1<<PA0); // turn on display
     3ce:	82 b1       	in	r24, 0x02	; 2
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	82 b9       	out	0x02, r24	; 2
     3d4:	8f e0       	ldi	r24, 0x0F	; 15
     3d6:	97 e2       	ldi	r25, 0x27	; 39
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <main+0x50>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x56>
     3de:	00 00       	nop
	_delay_ms(5);
	
	//Set up I2C
	i2cInit();
     3e0:	0e 94 a2 00 	call	0x144	; 0x144 <i2cInit>
	//I2Cstart();
	
	
	//TESTING 
	i2cSendRegister(SI_CLK0_CONTROL, 0x0);
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	80 e1       	ldi	r24, 0x10	; 16
     3e8:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
	
	
	//Initialize display
	I2Csendcmd(SCREEN_ADDR, 0x01); // clear display
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	88 e7       	ldi	r24, 0x78	; 120
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x3A);
     3f8:	6a e3       	ldi	r22, 0x3A	; 58
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	88 e7       	ldi	r24, 0x78	; 120
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x09);
     404:	69 e0       	ldi	r22, 0x09	; 9
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	88 e7       	ldi	r24, 0x78	; 120
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x06);
     410:	66 e0       	ldi	r22, 0x06	; 6
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	88 e7       	ldi	r24, 0x78	; 120
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x1E);
     41c:	6e e1       	ldi	r22, 0x1E	; 30
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	88 e7       	ldi	r24, 0x78	; 120
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x39);
     428:	69 e3       	ldi	r22, 0x39	; 57
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	88 e7       	ldi	r24, 0x78	; 120
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x1B);
     434:	6b e1       	ldi	r22, 0x1B	; 27
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	88 e7       	ldi	r24, 0x78	; 120
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x6E);
     440:	6e e6       	ldi	r22, 0x6E	; 110
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	88 e7       	ldi	r24, 0x78	; 120
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x57);
     44c:	67 e5       	ldi	r22, 0x57	; 87
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	88 e7       	ldi	r24, 0x78	; 120
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x7A);
     458:	6a e7       	ldi	r22, 0x7A	; 122
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	88 e7       	ldi	r24, 0x78	; 120
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x38);
     464:	68 e3       	ldi	r22, 0x38	; 56
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	88 e7       	ldi	r24, 0x78	; 120
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x0F);
     470:	6f e0       	ldi	r22, 0x0F	; 15
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	88 e7       	ldi	r24, 0x78	; 120
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x01); // clear display
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	88 e7       	ldi	r24, 0x78	; 120
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
	
	//TXRX_Switch Part
		DDRD = 0x40;
     488:	80 e4       	ldi	r24, 0x40	; 64
     48a:	8a b9       	out	0x0a, r24	; 10
	
	//Keypad Part
		DDRB = 0xf0; //Set ports B 4-7 as output, 0-3 as input
     48c:	80 ef       	ldi	r24, 0xF0	; 240
     48e:	84 b9       	out	0x04, r24	; 4
		
		PCICR = 0x2; //Setting PCICR (ATMEGA's GIC) to enable interrupts from PCINT1
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
		PCMSK1 = 0xf; //Setting interrupt masks of pins PCINT8-11 to 1
     496:	8f e0       	ldi	r24, 0x0F	; 15
     498:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
		sei(); //Enable interrupts by setting I bit of the Status Register to 1
     49c:	78 94       	sei
		
	// Computer Interface Part
		UART_Init();
     49e:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Init>
	
	printf("enter the while loop");
     4a2:	8a ec       	ldi	r24, 0xCA	; 202
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	9f 93       	push	r25
     4a8:	8f 93       	push	r24
     4aa:	0e 94 ba 09 	call	0x1374	; 0x1374 <printf>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
    //Write some data
	    while (1)
	    {
		    PORTB = 0xf0; //ToDo will this matter if PORTB[3:0] are set to input?
     4b2:	80 ef       	ldi	r24, 0xF0	; 240
     4b4:	85 b9       	out	0x05, r24	; 5
		    // ToDo Store and restore SREG
			if(UPDATE_LCD){
     4b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <UPDATE_LCD>
     4ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <UPDATE_LCD+0x1>
     4be:	89 2b       	or	r24, r25
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4c2:	7e c0       	rjmp	.+252    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
				
				//TESTING
				i2cSendRegister(SI_CLK0_CONTROL, 0x0);
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	80 e1       	ldi	r24, 0x10	; 16
     4c8:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
				
				
				I2Csendcmd(SCREEN_ADDR, 0x01); // clear display
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	88 e7       	ldi	r24, 0x78	; 120
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 ab 00 	call	0x156	; 0x156 <I2Csendcmd>
				if(is_entering){
     4d8:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <is_entering>
     4dc:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <is_entering+0x1>
     4e0:	89 2b       	or	r24, r25
     4e2:	39 f0       	breq	.+14     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					//strcat(freq_input, "Hhello");
					screen_write_string(freq_input, COMMAND_SET_CURSOR_LINE_4);
     4e4:	60 ee       	ldi	r22, 0xE0	; 224
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	87 e2       	ldi	r24, 0x27	; 39
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <screen_write_string>
     4f0:	31 c0       	rjmp	.+98     	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
				}
				else {
					char freq_disp[99] = "FREQ: ";	
     4f2:	8e 01       	movw	r16, r28
     4f4:	0c 59       	subi	r16, 0x9C	; 156
     4f6:	1f 4f       	sbci	r17, 0xFF	; 255
     4f8:	87 e0       	ldi	r24, 0x07	; 7
     4fa:	e4 e0       	ldi	r30, 0x04	; 4
     4fc:	f1 e0       	ldi	r31, 0x01	; 1
     4fe:	d8 01       	movw	r26, r16
     500:	01 90       	ld	r0, Z+
     502:	0d 92       	st	X+, r0
     504:	8a 95       	dec	r24
     506:	e1 f7       	brne	.-8      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     508:	f8 01       	movw	r30, r16
     50a:	37 96       	adiw	r30, 0x07	; 7
     50c:	8c e5       	ldi	r24, 0x5C	; 92
     50e:	df 01       	movw	r26, r30
     510:	1d 92       	st	X+, r1
     512:	8a 95       	dec	r24
     514:	e9 f7       	brne	.-6      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
					char freq_val[99];
					itoa(freq, freq_val, 10);
     516:	4a e0       	ldi	r20, 0x0A	; 10
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	be 01       	movw	r22, r28
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <freq>
     524:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <freq+0x1>
     528:	0e 94 82 09 	call	0x1304	; 0x1304 <itoa>
					strcat(freq_disp, freq_val);
     52c:	be 01       	movw	r22, r28
     52e:	6f 5f       	subi	r22, 0xFF	; 255
     530:	7f 4f       	sbci	r23, 0xFF	; 255
     532:	c8 01       	movw	r24, r16
     534:	0e 94 5f 09 	call	0x12be	; 0x12be <strcat>
					strcat(freq_disp, "K");
     538:	f8 01       	movw	r30, r16
     53a:	01 90       	ld	r0, Z+
     53c:	00 20       	and	r0, r0
     53e:	e9 f7       	brne	.-6      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	8b e4       	ldi	r24, 0x4B	; 75
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	80 83       	st	Z, r24
					//set PLL frequency
					screen_write_string(freq_disp, COMMAND_SET_CURSOR_LINE_1);
     54a:	60 e8       	ldi	r22, 0x80	; 128
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	c8 01       	movw	r24, r16
     550:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <screen_write_string>
				}
			
				//ToDo output TXEN
				char mode_disp[99] = "MODE: ";
     554:	87 e0       	ldi	r24, 0x07	; 7
     556:	e7 e6       	ldi	r30, 0x67	; 103
     558:	f1 e0       	ldi	r31, 0x01	; 1
     55a:	de 01       	movw	r26, r28
     55c:	11 96       	adiw	r26, 0x01	; 1
     55e:	01 90       	ld	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	8a 95       	dec	r24
     564:	e1 f7       	brne	.-8      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
     566:	fe 01       	movw	r30, r28
     568:	38 96       	adiw	r30, 0x08	; 8
     56a:	8c e5       	ldi	r24, 0x5C	; 92
     56c:	df 01       	movw	r26, r30
     56e:	1d 92       	st	X+, r1
     570:	8a 95       	dec	r24
     572:	e9 f7       	brne	.-6      	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
				if(TXEN){
     574:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <TXEN>
     578:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <TXEN+0x1>
     57c:	89 2b       	or	r24, r25
     57e:	59 f0       	breq	.+22     	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
					strcat(mode_disp, "TX");
     580:	37 97       	sbiw	r30, 0x07	; 7
     582:	01 90       	ld	r0, Z+
     584:	00 20       	and	r0, r0
     586:	e9 f7       	brne	.-6      	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
     588:	31 97       	sbiw	r30, 0x01	; 1
     58a:	84 e5       	ldi	r24, 0x54	; 84
     58c:	98 e5       	ldi	r25, 0x58	; 88
     58e:	91 83       	std	Z+1, r25	; 0x01
     590:	80 83       	st	Z, r24
     592:	12 82       	std	Z+2, r1	; 0x02
     594:	0b c0       	rjmp	.+22     	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
				}
				else{
					strcat(mode_disp, "RX");
     596:	fe 01       	movw	r30, r28
     598:	31 96       	adiw	r30, 0x01	; 1
     59a:	01 90       	ld	r0, Z+
     59c:	00 20       	and	r0, r0
     59e:	e9 f7       	brne	.-6      	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
     5a0:	31 97       	sbiw	r30, 0x01	; 1
     5a2:	82 e5       	ldi	r24, 0x52	; 82
     5a4:	98 e5       	ldi	r25, 0x58	; 88
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	12 82       	std	Z+2, r1	; 0x02
				}
				screen_write_string(mode_disp, COMMAND_SET_CURSOR_LINE_3);
     5ac:	60 ec       	ldi	r22, 0xC0	; 192
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	ce 01       	movw	r24, r28
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <screen_write_string>

				UPDATE_LCD = FALSE;
     5b8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <UPDATE_LCD+0x1>
     5bc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UPDATE_LCD>
			}
	
			if(UPDATE_PLL){
     5c0:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <UPDATE_PLL>
     5c4:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <UPDATE_PLL+0x1>
     5c8:	89 2b       	or	r24, r25
     5ca:	b9 f0       	breq	.+46     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>

                // si5351aSetFrequency(14000000); 
                // si5351aSetFrequency(freq*1000000); 
				
				//i2cInit();
				si5351aSetFrequency(freq*1000);
     5cc:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <freq>
     5d0:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <freq+0x1>
     5d4:	88 ee       	ldi	r24, 0xE8	; 232
     5d6:	93 e0       	ldi	r25, 0x03	; 3
     5d8:	28 9f       	mul	r18, r24
     5da:	b0 01       	movw	r22, r0
     5dc:	29 9f       	mul	r18, r25
     5de:	70 0d       	add	r23, r0
     5e0:	38 9f       	mul	r19, r24
     5e2:	70 0d       	add	r23, r0
     5e4:	11 24       	eor	r1, r1
     5e6:	07 2e       	mov	r0, r23
     5e8:	00 0c       	add	r0, r0
     5ea:	88 0b       	sbc	r24, r24
     5ec:	99 0b       	sbc	r25, r25
     5ee:	0e 94 bd 06 	call	0xd7a	; 0xd7a <si5351aSetFrequency>
				UPDATE_PLL = FALSE; 
     5f2:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <UPDATE_PLL+0x1>
     5f6:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <UPDATE_PLL>
			
			}
			
			if(UPDATE_TXRX_SWITCH){
     5fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     602:	89 2b       	or	r24, r25
     604:	09 f4       	brne	.+2      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     606:	55 cf       	rjmp	.-342    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
				PORTD = (PORTD & 0xbf) | (TXEN ? 0x0 : 0x40);
     608:	8b b1       	in	r24, 0x0b	; 11
     60a:	8f 7b       	andi	r24, 0xBF	; 191
     60c:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <TXEN>
     610:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <TXEN+0x1>
     614:	23 2b       	or	r18, r19
     616:	11 f0       	breq	.+4      	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	01 c0       	rjmp	.+2      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
     61c:	90 e4       	ldi	r25, 0x40	; 64
     61e:	89 2b       	or	r24, r25
     620:	8b b9       	out	0x0b, r24	; 11
				UPDATE_TXRX_SWITCH = FALSE;
     622:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     626:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     62a:	43 cf       	rjmp	.-378    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>

0000062c <__vector_5>:
			}
		}
}

ISR(PCINT1_vect){
     62c:	1f 92       	push	r1
     62e:	0f 92       	push	r0
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	0f 92       	push	r0
     634:	11 24       	eor	r1, r1
     636:	2f 93       	push	r18
     638:	3f 93       	push	r19
     63a:	4f 93       	push	r20
     63c:	5f 93       	push	r21
     63e:	6f 93       	push	r22
     640:	7f 93       	push	r23
     642:	8f 93       	push	r24
     644:	9f 93       	push	r25
     646:	af 93       	push	r26
     648:	bf 93       	push	r27
     64a:	ef 93       	push	r30
     64c:	ff 93       	push	r31
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	2a 97       	sbiw	r28, 0x0a	; 10
     658:	de bf       	out	0x3e, r29	; 62
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	2f ef       	ldi	r18, 0xFF	; 255
     65e:	31 ee       	ldi	r19, 0xE1	; 225
     660:	44 e0       	ldi	r20, 0x04	; 4
     662:	21 50       	subi	r18, 0x01	; 1
     664:	30 40       	sbci	r19, 0x00	; 0
     666:	40 40       	sbci	r20, 0x00	; 0
     668:	e1 f7       	brne	.-8      	; 0x662 <__vector_5+0x36>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <__vector_5+0x40>
     66c:	00 00       	nop
	
	
	_delay_ms(KEY_DEBOUNCE_TIME);
	
	//Return if no key is pressed
	if((PINB & 0xf) == 0){ //No key is pressed
     66e:	83 b1       	in	r24, 0x03	; 3
     670:	8f 70       	andi	r24, 0x0F	; 15
     672:	21 f4       	brne	.+8      	; 0x67c <__vector_5+0x50>
		PORTD = (PORTD & 0xc3) | 0;
     674:	8b b1       	in	r24, 0x0b	; 11
     676:	83 7c       	andi	r24, 0xC3	; 195
     678:	8b b9       	out	0x0b, r24	; 11
		return;
     67a:	9f c0       	rjmp	.+318    	; 0x7ba <__vector_5+0x18e>
	}
	
	//Obtain row of key press
	key_row = (PINB & 0xf);
     67c:	83 b1       	in	r24, 0x03	; 3
     67e:	8f 70       	andi	r24, 0x0F	; 15
     680:	90 e0       	ldi	r25, 0x00	; 0

	//Swap input and output
	DDRB = 0xf;
     682:	2f e0       	ldi	r18, 0x0F	; 15
     684:	24 b9       	out	0x04, r18	; 4
	PORTB = 0xf;
     686:	25 b9       	out	0x05, r18	; 5
     688:	2f ef       	ldi	r18, 0xFF	; 255
     68a:	31 ee       	ldi	r19, 0xE1	; 225
     68c:	44 e0       	ldi	r20, 0x04	; 4
     68e:	21 50       	subi	r18, 0x01	; 1
     690:	30 40       	sbci	r19, 0x00	; 0
     692:	40 40       	sbci	r20, 0x00	; 0
     694:	e1 f7       	brne	.-8      	; 0x68e <__vector_5+0x62>
     696:	00 c0       	rjmp	.+0      	; 0x698 <__vector_5+0x6c>
     698:	00 00       	nop
	_delay_ms(KEY_DEBOUNCE_TIME);

	//Return if key is released in the middle of detection
	if((PINB & 0xf0) == 0){
     69a:	23 b1       	in	r18, 0x03	; 3
     69c:	20 7f       	andi	r18, 0xF0	; 240
     69e:	49 f4       	brne	.+18     	; 0x6b2 <__vector_5+0x86>
		DDRB = 0xf0;
     6a0:	80 ef       	ldi	r24, 0xF0	; 240
     6a2:	84 b9       	out	0x04, r24	; 4
		PORTB |= 0xf0;
     6a4:	85 b1       	in	r24, 0x05	; 5
     6a6:	80 6f       	ori	r24, 0xF0	; 240
     6a8:	85 b9       	out	0x05, r24	; 5
		PORTD = (PORTD & 0xc3) | 0;
     6aa:	8b b1       	in	r24, 0x0b	; 11
     6ac:	83 7c       	andi	r24, 0xC3	; 195
     6ae:	8b b9       	out	0x0b, r24	; 11
		return;
     6b0:	84 c0       	rjmp	.+264    	; 0x7ba <__vector_5+0x18e>
	}
	
	//Obtain column of key press
	key_col = (PINB & 0xf0) >> 0x4;
     6b2:	63 b1       	in	r22, 0x03	; 3
     6b4:	62 95       	swap	r22
     6b6:	6f 70       	andi	r22, 0x0F	; 15
     6b8:	70 e0       	ldi	r23, 0x00	; 0
	
	
	
	//Parse input
	input_char = getInputChar(key_row, key_col);
     6ba:	0e 94 21 01 	call	0x242	; 0x242 <getInputChar>

	//Numeric keys
	if(input_char <= 0x9){
     6be:	8a 30       	cpi	r24, 0x0A	; 10
     6c0:	91 05       	cpc	r25, r1
     6c2:	84 f5       	brge	.+96     	; 0x724 <__vector_5+0xf8>
		if (!is_entering){ //User just started entering frequency setting
     6c4:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <is_entering>
     6c8:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <is_entering+0x1>
     6cc:	23 2b       	or	r18, r19
     6ce:	a9 f4       	brne	.+42     	; 0x6fa <__vector_5+0xce>
			char s[10];
			itoa(input_char, s, 10);
     6d0:	4a e0       	ldi	r20, 0x0A	; 10
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	be 01       	movw	r22, r28
     6d6:	6f 5f       	subi	r22, 0xFF	; 255
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	0e 94 82 09 	call	0x1304	; 0x1304 <itoa>
			strcat(freq_input, s);
     6de:	be 01       	movw	r22, r28
     6e0:	6f 5f       	subi	r22, 0xFF	; 255
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	87 e2       	ldi	r24, 0x27	; 39
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	0e 94 5f 09 	call	0x12be	; 0x12be <strcat>
			is_entering = TRUE;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <is_entering+0x1>
     6f4:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <is_entering>
     6f8:	0e c0       	rjmp	.+28     	; 0x716 <__vector_5+0xea>
		}
		else { //User is entering second or third digit go frequency setting
			char s[10];
			itoa(input_char, s, 10);
     6fa:	4a e0       	ldi	r20, 0x0A	; 10
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	be 01       	movw	r22, r28
     700:	6f 5f       	subi	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	0e 94 82 09 	call	0x1304	; 0x1304 <itoa>
			strcat(freq_input, s);
     708:	be 01       	movw	r22, r28
     70a:	6f 5f       	subi	r22, 0xFF	; 255
     70c:	7f 4f       	sbci	r23, 0xFF	; 255
     70e:	87 e2       	ldi	r24, 0x27	; 39
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	0e 94 5f 09 	call	0x12be	; 0x12be <strcat>
		}
		UPDATE_LCD = TRUE;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <UPDATE_LCD+0x1>
     71e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UPDATE_LCD>
     722:	46 c0       	rjmp	.+140    	; 0x7b0 <__vector_5+0x184>
	}
	else if(input_char == KEY_CANCEL){
     724:	8d 30       	cpi	r24, 0x0D	; 13
     726:	91 05       	cpc	r25, r1
     728:	69 f4       	brne	.+26     	; 0x744 <__vector_5+0x118>
		is_entering = FALSE;
     72a:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <is_entering+0x1>
     72e:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <is_entering>
		freq_input[0] = '\0';
     732:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <freq_input>
		UPDATE_LCD = TRUE;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <UPDATE_LCD+0x1>
     73e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UPDATE_LCD>
     742:	36 c0       	rjmp	.+108    	; 0x7b0 <__vector_5+0x184>
	}
	else if(input_char == KEY_ENTER){
     744:	8c 30       	cpi	r24, 0x0C	; 12
     746:	91 05       	cpc	r25, r1
     748:	c9 f4       	brne	.+50     	; 0x77c <__vector_5+0x150>
		is_entering = FALSE;
     74a:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <is_entering+0x1>
     74e:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <is_entering>
		freq = atoi(freq_input); //ToDo: display error when input > 4 digits
     752:	87 e2       	ldi	r24, 0x27	; 39
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	0e 94 41 09 	call	0x1282	; 0x1282 <atoi>
     75a:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <freq+0x1>
     75e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <freq>
		freq_input[0] = '\0';
     762:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <freq_input>
		UPDATE_LCD = TRUE; //Redundant
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <UPDATE_LCD+0x1>
     76e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UPDATE_LCD>
		UPDATE_PLL = TRUE; //the only place PLL will be updated
     772:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <UPDATE_PLL+0x1>
     776:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <UPDATE_PLL>
     77a:	1a c0       	rjmp	.+52     	; 0x7b0 <__vector_5+0x184>
	}
	else if(input_char == KEY_TOGGLE){
     77c:	0b 97       	sbiw	r24, 0x0b	; 11
     77e:	c1 f4       	brne	.+48     	; 0x7b0 <__vector_5+0x184>
		TXEN = !TXEN;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <TXEN>
     788:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <TXEN+0x1>
     78c:	23 2b       	or	r18, r19
     78e:	11 f0       	breq	.+4      	; 0x794 <__vector_5+0x168>
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <TXEN+0x1>
     798:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <TXEN>
		UPDATE_LCD = TRUE;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <UPDATE_LCD+0x1>
     7a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UPDATE_LCD>
		UPDATE_TXRX_SWITCH = TRUE;
     7a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	//Swap input and output back
	DDRB = 0xf0;
     7b0:	80 ef       	ldi	r24, 0xF0	; 240
     7b2:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0xf0;
     7b4:	85 b1       	in	r24, 0x05	; 5
     7b6:	80 6f       	ori	r24, 0xF0	; 240
     7b8:	85 b9       	out	0x05, r24	; 5
}
     7ba:	2a 96       	adiw	r28, 0x0a	; 10
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	bf 91       	pop	r27
     7d0:	af 91       	pop	r26
     7d2:	9f 91       	pop	r25
     7d4:	8f 91       	pop	r24
     7d6:	7f 91       	pop	r23
     7d8:	6f 91       	pop	r22
     7da:	5f 91       	pop	r21
     7dc:	4f 91       	pop	r20
     7de:	3f 91       	pop	r19
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0
     7e8:	1f 90       	pop	r1
     7ea:	18 95       	reti

000007ec <__vector_20>:



ISR(USART0_RX_vect){
     7ec:	1f 92       	push	r1
     7ee:	0f 92       	push	r0
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	2f 93       	push	r18
     7fc:	3f 93       	push	r19
     7fe:	4f 93       	push	r20
     800:	5f 93       	push	r21
     802:	6f 93       	push	r22
     804:	7f 93       	push	r23
     806:	8f 93       	push	r24
     808:	9f 93       	push	r25
     80a:	af 93       	push	r26
     80c:	bf 93       	push	r27
     80e:	ef 93       	push	r30
     810:	ff 93       	push	r31
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	c1 57       	subi	r28, 0x71	; 113
     81c:	d1 09       	sbc	r29, r1
     81e:	de bf       	out	0x3e, r29	; 62
     820:	cd bf       	out	0x3d, r28	; 61
	received_char_int = UDR0;
     822:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     826:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <received_char_int>
	if(received_char_int != ';'){
     82a:	2b 33       	cpi	r18, 0x3B	; 59
     82c:	71 f0       	breq	.+28     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		received_str[rx_counter] = received_char_int;
     82e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__data_end>
     832:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <__data_end+0x1>
     836:	fc 01       	movw	r30, r24
     838:	e6 57       	subi	r30, 0x76	; 118
     83a:	fd 4f       	sbci	r31, 0xFD	; 253
     83c:	20 83       	st	Z, r18
		rx_counter++;
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <__data_end+0x1>
     844:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__data_end>
     848:	3f c1       	rjmp	.+638    	; 0xac8 <__stack+0x1c9>
	}
	else{
		received_str[rx_counter] = ';';
     84a:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__data_end>
     84e:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <__data_end+0x1>
     852:	fc 01       	movw	r30, r24
     854:	e6 57       	subi	r30, 0x76	; 118
     856:	fd 4f       	sbci	r31, 0xFD	; 253
     858:	2b e3       	ldi	r18, 0x3B	; 59
     85a:	20 83       	st	Z, r18
		received_str[rx_counter + 1] = '\0';
     85c:	fc 01       	movw	r30, r24
     85e:	e5 57       	subi	r30, 0x75	; 117
     860:	fd 4f       	sbci	r31, 0xFD	; 253
     862:	10 82       	st	Z, r1
		rx_counter = 0;
     864:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__data_end+0x1>
     868:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
		
		// Parse instruction
		char inst[3];
		strncpy(inst, received_str, 2);
     86c:	42 e0       	ldi	r20, 0x02	; 2
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	6a e8       	ldi	r22, 0x8A	; 138
     872:	72 e0       	ldi	r23, 0x02	; 2
     874:	ce 01       	movw	r24, r28
     876:	81 59       	subi	r24, 0x91	; 145
     878:	9f 4f       	sbci	r25, 0xFF	; 255
     87a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <strncpy>
		int respond = (received_str[2] == ';') ? TRUE : FALSE;
     87e:	10 91 8c 02 	lds	r17, 0x028C	; 0x80028c <received_str+0x2>
		
		char str_to_send[100];
		str_to_send[0] = '\0';
     882:	19 82       	std	Y+1, r1	; 0x01
		
		if(strcmp(inst, "TX") == 0){ //TX Command
     884:	6f ed       	ldi	r22, 0xDF	; 223
     886:	71 e0       	ldi	r23, 0x01	; 1
     888:	ce 01       	movw	r24, r28
     88a:	81 59       	subi	r24, 0x91	; 145
     88c:	9f 4f       	sbci	r25, 0xFF	; 255
     88e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <strcmp>
     892:	89 2b       	or	r24, r25
     894:	c9 f5       	brne	.+114    	; 0x908 <__stack+0x9>
			if(respond){
     896:	1b 33       	cpi	r17, 0x3B	; 59
     898:	31 f5       	brne	.+76     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
				strcat(str_to_send, "TX");
     89a:	fe 01       	movw	r30, r28
     89c:	31 96       	adiw	r30, 0x01	; 1
     89e:	01 90       	ld	r0, Z+
     8a0:	00 20       	and	r0, r0
     8a2:	e9 f7       	brne	.-6      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	84 e5       	ldi	r24, 0x54	; 84
     8a8:	98 e5       	ldi	r25, 0x58	; 88
     8aa:	91 83       	std	Z+1, r25	; 0x01
     8ac:	80 83       	st	Z, r24
     8ae:	12 82       	std	Z+2, r1	; 0x02
				char c[2];
				c[0] = TXEN ? '1' : '0';
     8b0:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <TXEN>
     8b4:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <TXEN+0x1>
     8b8:	89 2b       	or	r24, r25
     8ba:	11 f0       	breq	.+4      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
     8bc:	81 e3       	ldi	r24, 0x31	; 49
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
     8c0:	80 e3       	ldi	r24, 0x30	; 48
     8c2:	a6 96       	adiw	r28, 0x26	; 38
     8c4:	8f af       	std	Y+63, r24	; 0x3f
     8c6:	a6 97       	sbiw	r28, 0x26	; 38
				c[1] = '\0';
     8c8:	a7 96       	adiw	r28, 0x27	; 39
     8ca:	1f ae       	std	Y+63, r1	; 0x3f
     8cc:	a7 97       	sbiw	r28, 0x27	; 39
				strcat(str_to_send, c);
     8ce:	be 01       	movw	r22, r28
     8d0:	6b 59       	subi	r22, 0x9B	; 155
     8d2:	7f 4f       	sbci	r23, 0xFF	; 255
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 5f 09 	call	0x12be	; 0x12be <strcat>
				TX_String(str_to_send);
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 b4 01 	call	0x368	; 0x368 <TX_String>
     8e4:	f1 c0       	rjmp	.+482    	; 0xac8 <__stack+0x1c9>
			}
			else{
				char TXEN_to_set = received_str[2];
				TXEN = (TXEN_to_set == '1') ? TRUE : FALSE;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	11 33       	cpi	r17, 0x31	; 49
     8ec:	11 f0       	breq	.+4      	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <TXEN+0x1>
     8f6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <TXEN>
				UPDATE_LCD = TRUE;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <UPDATE_LCD+0x1>
     902:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UPDATE_LCD>
     906:	e0 c0       	rjmp	.+448    	; 0xac8 <__stack+0x1c9>
				//TX_String("Set TXEN!");
			}
		}
		else if(strcmp(inst, "FA") == 0){
     908:	62 ee       	ldi	r22, 0xE2	; 226
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	ce 01       	movw	r24, r28
     90e:	81 59       	subi	r24, 0x91	; 145
     910:	9f 4f       	sbci	r25, 0xFF	; 255
     912:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <strcmp>
     916:	89 2b       	or	r24, r25
     918:	09 f0       	breq	.+2      	; 0x91c <__stack+0x1d>
     91a:	6d c0       	rjmp	.+218    	; 0x9f6 <__stack+0xf7>
			if(respond){
     91c:	1b 33       	cpi	r17, 0x3B	; 59
     91e:	09 f0       	breq	.+2      	; 0x922 <__stack+0x23>
     920:	51 c0       	rjmp	.+162    	; 0x9c4 <__stack+0xc5>
				strcat(str_to_send, "FA");
     922:	fe 01       	movw	r30, r28
     924:	31 96       	adiw	r30, 0x01	; 1
     926:	01 90       	ld	r0, Z+
     928:	00 20       	and	r0, r0
     92a:	e9 f7       	brne	.-6      	; 0x926 <__stack+0x27>
     92c:	31 97       	sbiw	r30, 0x01	; 1
     92e:	86 e4       	ldi	r24, 0x46	; 70
     930:	91 e4       	ldi	r25, 0x41	; 65
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
     936:	12 82       	std	Z+2, r1	; 0x02
				char c[10];
				c[0] = '\0';
     938:	a6 96       	adiw	r28, 0x26	; 38
     93a:	1f ae       	std	Y+63, r1	; 0x3f
     93c:	a6 97       	sbiw	r28, 0x26	; 38
				itoa(freq, c, 10);
     93e:	4a e0       	ldi	r20, 0x0A	; 10
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	be 01       	movw	r22, r28
     944:	6b 59       	subi	r22, 0x9B	; 155
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <freq>
     94c:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <freq+0x1>
     950:	0e 94 82 09 	call	0x1304	; 0x1304 <itoa>
				for (int i = 0; i < 6 - strlen(c); i++){
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	0c c0       	rjmp	.+24     	; 0x972 <__stack+0x73>
					strcat(str_to_send, "0");
     95a:	fe 01       	movw	r30, r28
     95c:	31 96       	adiw	r30, 0x01	; 1
     95e:	01 90       	ld	r0, Z+
     960:	00 20       	and	r0, r0
     962:	e9 f7       	brne	.-6      	; 0x95e <__stack+0x5f>
     964:	31 97       	sbiw	r30, 0x01	; 1
     966:	80 e3       	ldi	r24, 0x30	; 48
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	91 83       	std	Z+1, r25	; 0x01
     96c:	80 83       	st	Z, r24
			if(respond){
				strcat(str_to_send, "FA");
				char c[10];
				c[0] = '\0';
				itoa(freq, c, 10);
				for (int i = 0; i < 6 - strlen(c); i++){
     96e:	2f 5f       	subi	r18, 0xFF	; 255
     970:	3f 4f       	sbci	r19, 0xFF	; 255
     972:	de 01       	movw	r26, r28
     974:	ab 59       	subi	r26, 0x9B	; 155
     976:	bf 4f       	sbci	r27, 0xFF	; 255
     978:	fd 01       	movw	r30, r26
     97a:	01 90       	ld	r0, Z+
     97c:	00 20       	and	r0, r0
     97e:	e9 f7       	brne	.-6      	; 0x97a <__stack+0x7b>
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	ea 1b       	sub	r30, r26
     984:	fb 0b       	sbc	r31, r27
     986:	86 e0       	ldi	r24, 0x06	; 6
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	8e 1b       	sub	r24, r30
     98c:	9f 0b       	sbc	r25, r31
     98e:	28 17       	cp	r18, r24
     990:	39 07       	cpc	r19, r25
     992:	18 f3       	brcs	.-58     	; 0x95a <__stack+0x5b>
					strcat(str_to_send, "0");
				}
				strcat(str_to_send, c);
     994:	bd 01       	movw	r22, r26
     996:	8e 01       	movw	r16, r28
     998:	0f 5f       	subi	r16, 0xFF	; 255
     99a:	1f 4f       	sbci	r17, 0xFF	; 255
     99c:	c8 01       	movw	r24, r16
     99e:	0e 94 5f 09 	call	0x12be	; 0x12be <strcat>
				strcat(str_to_send, "000");
     9a2:	f8 01       	movw	r30, r16
     9a4:	01 90       	ld	r0, Z+
     9a6:	00 20       	and	r0, r0
     9a8:	e9 f7       	brne	.-6      	; 0x9a4 <__stack+0xa5>
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	80 e3       	ldi	r24, 0x30	; 48
     9ae:	90 e3       	ldi	r25, 0x30	; 48
     9b0:	91 83       	std	Z+1, r25	; 0x01
     9b2:	80 83       	st	Z, r24
     9b4:	80 e3       	ldi	r24, 0x30	; 48
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	93 83       	std	Z+3, r25	; 0x03
     9ba:	82 83       	std	Z+2, r24	; 0x02
				TX_String(str_to_send);
     9bc:	c8 01       	movw	r24, r16
     9be:	0e 94 b4 01 	call	0x368	; 0x368 <TX_String>
     9c2:	82 c0       	rjmp	.+260    	; 0xac8 <__stack+0x1c9>
			}
			else{
				char freq_to_set[10];
				strncpy(freq_to_set, received_str + 2, 6);
     9c4:	46 e0       	ldi	r20, 0x06	; 6
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	6c e8       	ldi	r22, 0x8C	; 140
     9ca:	72 e0       	ldi	r23, 0x02	; 2
     9cc:	ce 01       	movw	r24, r28
     9ce:	8b 59       	subi	r24, 0x9B	; 155
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <strncpy>
				freq = atoi(freq_to_set);
     9d6:	ce 01       	movw	r24, r28
     9d8:	8b 59       	subi	r24, 0x9B	; 155
     9da:	9f 4f       	sbci	r25, 0xFF	; 255
     9dc:	0e 94 41 09 	call	0x1282	; 0x1282 <atoi>
     9e0:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <freq+0x1>
     9e4:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <freq>
				UPDATE_LCD = TRUE;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <UPDATE_LCD+0x1>
     9f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UPDATE_LCD>
     9f4:	69 c0       	rjmp	.+210    	; 0xac8 <__stack+0x1c9>
			}
		}
		else if(strcmp(inst, "IF") == 0){
     9f6:	65 ee       	ldi	r22, 0xE5	; 229
     9f8:	71 e0       	ldi	r23, 0x01	; 1
     9fa:	ce 01       	movw	r24, r28
     9fc:	81 59       	subi	r24, 0x91	; 145
     9fe:	9f 4f       	sbci	r25, 0xFF	; 255
     a00:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <strcmp>
     a04:	89 2b       	or	r24, r25
     a06:	09 f0       	breq	.+2      	; 0xa0a <__stack+0x10b>
     a08:	52 c0       	rjmp	.+164    	; 0xaae <__stack+0x1af>
			strcat(str_to_send, "IF000");
     a0a:	de 01       	movw	r26, r28
     a0c:	11 96       	adiw	r26, 0x01	; 1
     a0e:	0d 90       	ld	r0, X+
     a10:	00 20       	and	r0, r0
     a12:	e9 f7       	brne	.-6      	; 0xa0e <__stack+0x10f>
     a14:	11 97       	sbiw	r26, 0x01	; 1
     a16:	86 e0       	ldi	r24, 0x06	; 6
     a18:	e8 ee       	ldi	r30, 0xE8	; 232
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	01 90       	ld	r0, Z+
     a1e:	0d 92       	st	X+, r0
     a20:	8a 95       	dec	r24
     a22:	e1 f7       	brne	.-8      	; 0xa1c <__stack+0x11d>
			char c[10];
			c[0] = '\0';
     a24:	a6 96       	adiw	r28, 0x26	; 38
     a26:	1f ae       	std	Y+63, r1	; 0x3f
     a28:	a6 97       	sbiw	r28, 0x26	; 38
			itoa(freq, c, 10);
     a2a:	4a e0       	ldi	r20, 0x0A	; 10
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	be 01       	movw	r22, r28
     a30:	6b 59       	subi	r22, 0x9B	; 155
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <freq>
     a38:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <freq+0x1>
     a3c:	0e 94 82 09 	call	0x1304	; 0x1304 <itoa>
			for (int i = 0; i < 6 - strlen(c); i++){
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	0c c0       	rjmp	.+24     	; 0xa5e <__stack+0x15f>
				strcat(str_to_send, "0");
     a46:	fe 01       	movw	r30, r28
     a48:	31 96       	adiw	r30, 0x01	; 1
     a4a:	01 90       	ld	r0, Z+
     a4c:	00 20       	and	r0, r0
     a4e:	e9 f7       	brne	.-6      	; 0xa4a <__stack+0x14b>
     a50:	31 97       	sbiw	r30, 0x01	; 1
     a52:	80 e3       	ldi	r24, 0x30	; 48
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	80 83       	st	Z, r24
		else if(strcmp(inst, "IF") == 0){
			strcat(str_to_send, "IF000");
			char c[10];
			c[0] = '\0';
			itoa(freq, c, 10);
			for (int i = 0; i < 6 - strlen(c); i++){
     a5a:	2f 5f       	subi	r18, 0xFF	; 255
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	de 01       	movw	r26, r28
     a60:	ab 59       	subi	r26, 0x9B	; 155
     a62:	bf 4f       	sbci	r27, 0xFF	; 255
     a64:	fd 01       	movw	r30, r26
     a66:	01 90       	ld	r0, Z+
     a68:	00 20       	and	r0, r0
     a6a:	e9 f7       	brne	.-6      	; 0xa66 <__stack+0x167>
     a6c:	31 97       	sbiw	r30, 0x01	; 1
     a6e:	ea 1b       	sub	r30, r26
     a70:	fb 0b       	sbc	r31, r27
     a72:	86 e0       	ldi	r24, 0x06	; 6
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	8e 1b       	sub	r24, r30
     a78:	9f 0b       	sbc	r25, r31
     a7a:	28 17       	cp	r18, r24
     a7c:	39 07       	cpc	r19, r25
     a7e:	18 f3       	brcs	.-58     	; 0xa46 <__stack+0x147>
				strcat(str_to_send, "0");
			}
			strcat(str_to_send, c);
     a80:	bd 01       	movw	r22, r26
     a82:	8e 01       	movw	r16, r28
     a84:	0f 5f       	subi	r16, 0xFF	; 255
     a86:	1f 4f       	sbci	r17, 0xFF	; 255
     a88:	c8 01       	movw	r24, r16
     a8a:	0e 94 5f 09 	call	0x12be	; 0x12be <strcat>
			strcat(str_to_send, "0000000000000000");
     a8e:	d8 01       	movw	r26, r16
     a90:	0d 90       	ld	r0, X+
     a92:	00 20       	and	r0, r0
     a94:	e9 f7       	brne	.-6      	; 0xa90 <__stack+0x191>
     a96:	11 97       	sbiw	r26, 0x01	; 1
     a98:	81 e1       	ldi	r24, 0x11	; 17
     a9a:	ee ee       	ldi	r30, 0xEE	; 238
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	01 90       	ld	r0, Z+
     aa0:	0d 92       	st	X+, r0
     aa2:	8a 95       	dec	r24
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <__stack+0x19f>
			TX_String(str_to_send);
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 b4 01 	call	0x368	; 0x368 <TX_String>
     aac:	0d c0       	rjmp	.+26     	; 0xac8 <__stack+0x1c9>
		}
		else if(strcmp(inst, "SP") == 0){
     aae:	6f ef       	ldi	r22, 0xFF	; 255
     ab0:	71 e0       	ldi	r23, 0x01	; 1
     ab2:	ce 01       	movw	r24, r28
     ab4:	81 59       	subi	r24, 0x91	; 145
     ab6:	9f 4f       	sbci	r25, 0xFF	; 255
     ab8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <strcmp>
     abc:	89 2b       	or	r24, r25
     abe:	21 f4       	brne	.+8      	; 0xac8 <__stack+0x1c9>
			TX_String("Never Gonna Give You Up!");
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	0e 94 b4 01 	call	0x368	; 0x368 <TX_String>
		}
	}
     ac8:	cf 58       	subi	r28, 0x8F	; 143
     aca:	df 4f       	sbci	r29, 0xFF	; 255
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	ff 91       	pop	r31
     adc:	ef 91       	pop	r30
     ade:	bf 91       	pop	r27
     ae0:	af 91       	pop	r26
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	7f 91       	pop	r23
     ae8:	6f 91       	pop	r22
     aea:	5f 91       	pop	r21
     aec:	4f 91       	pop	r20
     aee:	3f 91       	pop	r19
     af0:	2f 91       	pop	r18
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <setupPLL>:
// Example: si5351aOutputOff(SI_CLK0_CONTROL);
// will switch off output CLK0
//
void si5351aOutputOff(uint8_t clk)
{
	i2cSendRegister(clk, 0x80);		// Refer to SiLabs AN619 to see bit values - 0x80 turns off the output stage
     b00:	4f 92       	push	r4
     b02:	5f 92       	push	r5
     b04:	6f 92       	push	r6
     b06:	7f 92       	push	r7
     b08:	8f 92       	push	r8
     b0a:	9f 92       	push	r9
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	00 d0       	rcall	.+0      	; 0xb22 <setupPLL+0x22>
     b22:	00 d0       	rcall	.+0      	; 0xb24 <setupPLL+0x24>
     b24:	1f 92       	push	r1
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	8d 83       	std	Y+5, r24	; 0x05
     b2c:	c6 2e       	mov	r12, r22
     b2e:	49 01       	movw	r8, r18
     b30:	5a 01       	movw	r10, r20
     b32:	27 01       	movw	r4, r14
     b34:	38 01       	movw	r6, r16
     b36:	ca 01       	movw	r24, r20
     b38:	b9 01       	movw	r22, r18
     b3a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     b3e:	69 83       	std	Y+1, r22	; 0x01
     b40:	7a 83       	std	Y+2, r23	; 0x02
     b42:	8b 83       	std	Y+3, r24	; 0x03
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	c8 01       	movw	r24, r16
     b48:	b7 01       	movw	r22, r14
     b4a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     b4e:	9b 01       	movw	r18, r22
     b50:	ac 01       	movw	r20, r24
     b52:	69 81       	ldd	r22, Y+1	; 0x01
     b54:	7a 81       	ldd	r23, Y+2	; 0x02
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	0e 94 31 07 	call	0xe62	; 0xe62 <__divsf3>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	53 e4       	ldi	r21, 0x43	; 67
     b66:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__mulsf3>
     b6a:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fixunssfsi>
     b6e:	d1 2c       	mov	r13, r1
     b70:	e1 2c       	mov	r14, r1
     b72:	f1 2c       	mov	r15, r1
     b74:	cc 0c       	add	r12, r12
     b76:	dd 1c       	adc	r13, r13
     b78:	ee 1c       	adc	r14, r14
     b7a:	ff 1c       	adc	r15, r15
     b7c:	cc 0c       	add	r12, r12
     b7e:	dd 1c       	adc	r13, r13
     b80:	ee 1c       	adc	r14, r14
     b82:	ff 1c       	adc	r15, r15
     b84:	cc 0c       	add	r12, r12
     b86:	dd 1c       	adc	r13, r13
     b88:	ee 1c       	adc	r14, r14
     b8a:	ff 1c       	adc	r15, r15
     b8c:	cc 0c       	add	r12, r12
     b8e:	dd 1c       	adc	r13, r13
     b90:	ee 1c       	adc	r14, r14
     b92:	ff 1c       	adc	r15, r15
     b94:	cc 0c       	add	r12, r12
     b96:	dd 1c       	adc	r13, r13
     b98:	ee 1c       	adc	r14, r14
     b9a:	ff 1c       	adc	r15, r15
     b9c:	cc 0c       	add	r12, r12
     b9e:	dd 1c       	adc	r13, r13
     ba0:	ee 1c       	adc	r14, r14
     ba2:	ff 1c       	adc	r15, r15
     ba4:	cc 0c       	add	r12, r12
     ba6:	dd 1c       	adc	r13, r13
     ba8:	ee 1c       	adc	r14, r14
     baa:	ff 1c       	adc	r15, r15
     bac:	c6 0e       	add	r12, r22
     bae:	d7 1e       	adc	r13, r23
     bb0:	e8 1e       	adc	r14, r24
     bb2:	f9 1e       	adc	r15, r25
     bb4:	22 e0       	ldi	r18, 0x02	; 2
     bb6:	d2 1a       	sub	r13, r18
     bb8:	e1 08       	sbc	r14, r1
     bba:	f1 08       	sbc	r15, r1
     bbc:	88 0c       	add	r8, r8
     bbe:	99 1c       	adc	r9, r9
     bc0:	aa 1c       	adc	r10, r10
     bc2:	bb 1c       	adc	r11, r11
     bc4:	88 0c       	add	r8, r8
     bc6:	99 1c       	adc	r9, r9
     bc8:	aa 1c       	adc	r10, r10
     bca:	bb 1c       	adc	r11, r11
     bcc:	88 0c       	add	r8, r8
     bce:	99 1c       	adc	r9, r9
     bd0:	aa 1c       	adc	r10, r10
     bd2:	bb 1c       	adc	r11, r11
     bd4:	88 0c       	add	r8, r8
     bd6:	99 1c       	adc	r9, r9
     bd8:	aa 1c       	adc	r10, r10
     bda:	bb 1c       	adc	r11, r11
     bdc:	88 0c       	add	r8, r8
     bde:	99 1c       	adc	r9, r9
     be0:	aa 1c       	adc	r10, r10
     be2:	bb 1c       	adc	r11, r11
     be4:	88 0c       	add	r8, r8
     be6:	99 1c       	adc	r9, r9
     be8:	aa 1c       	adc	r10, r10
     bea:	bb 1c       	adc	r11, r11
     bec:	88 0c       	add	r8, r8
     bee:	99 1c       	adc	r9, r9
     bf0:	aa 1c       	adc	r10, r10
     bf2:	bb 1c       	adc	r11, r11
     bf4:	a3 01       	movw	r20, r6
     bf6:	92 01       	movw	r18, r4
     bf8:	0e 94 cd 08 	call	0x119a	; 0x119a <__mulsi3>
     bfc:	86 1a       	sub	r8, r22
     bfe:	97 0a       	sbc	r9, r23
     c00:	a8 0a       	sbc	r10, r24
     c02:	b9 0a       	sbc	r11, r25
     c04:	65 2d       	mov	r22, r5
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     c0c:	64 2d       	mov	r22, r4
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     c16:	d7 01       	movw	r26, r14
     c18:	c6 01       	movw	r24, r12
     c1a:	88 27       	eor	r24, r24
     c1c:	99 27       	eor	r25, r25
     c1e:	a3 70       	andi	r26, 0x03	; 3
     c20:	bb 27       	eor	r27, r27
     c22:	bd 01       	movw	r22, r26
     c24:	88 27       	eor	r24, r24
     c26:	99 27       	eor	r25, r25
     c28:	8d 81       	ldd	r24, Y+5	; 0x05
     c2a:	8e 5f       	subi	r24, 0xFE	; 254
     c2c:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     c30:	6d 2d       	mov	r22, r13
     c32:	8d 81       	ldd	r24, Y+5	; 0x05
     c34:	8d 5f       	subi	r24, 0xFD	; 253
     c36:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     c3a:	6c 2d       	mov	r22, r12
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	8c 5f       	subi	r24, 0xFC	; 252
     c40:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     c44:	44 24       	eor	r4, r4
     c46:	55 24       	eor	r5, r5
     c48:	8f e0       	ldi	r24, 0x0F	; 15
     c4a:	68 22       	and	r6, r24
     c4c:	77 24       	eor	r7, r7
     c4e:	03 2e       	mov	r0, r19
     c50:	3c e0       	ldi	r19, 0x0C	; 12
     c52:	76 94       	lsr	r7
     c54:	67 94       	ror	r6
     c56:	57 94       	ror	r5
     c58:	47 94       	ror	r4
     c5a:	3a 95       	dec	r19
     c5c:	d1 f7       	brne	.-12     	; 0xc52 <setupPLL+0x152>
     c5e:	30 2d       	mov	r19, r0
     c60:	d5 01       	movw	r26, r10
     c62:	c4 01       	movw	r24, r8
     c64:	88 27       	eor	r24, r24
     c66:	99 27       	eor	r25, r25
     c68:	af 70       	andi	r26, 0x0F	; 15
     c6a:	bb 27       	eor	r27, r27
     c6c:	64 2d       	mov	r22, r4
     c6e:	6a 2b       	or	r22, r26
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	8b 5f       	subi	r24, 0xFB	; 251
     c74:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     c78:	69 2d       	mov	r22, r9
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	8a 5f       	subi	r24, 0xFA	; 250
     c7e:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     c82:	68 2d       	mov	r22, r8
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	89 5f       	subi	r24, 0xF9	; 249
     c88:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	af 90       	pop	r10
     caa:	9f 90       	pop	r9
     cac:	8f 90       	pop	r8
     cae:	7f 90       	pop	r7
     cb0:	6f 90       	pop	r6
     cb2:	5f 90       	pop	r5
     cb4:	4f 90       	pop	r4
     cb6:	08 95       	ret

00000cb8 <setupMultisynth>:
     cb8:	cf 92       	push	r12
     cba:	df 92       	push	r13
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	c8 2f       	mov	r28, r24
     cc6:	d2 2f       	mov	r29, r18
     cc8:	6a 01       	movw	r12, r20
     cca:	7b 01       	movw	r14, r22
     ccc:	84 e0       	ldi	r24, 0x04	; 4
     cce:	c8 1a       	sub	r12, r24
     cd0:	d1 08       	sbc	r13, r1
     cd2:	e1 08       	sbc	r14, r1
     cd4:	8e ef       	ldi	r24, 0xFE	; 254
     cd6:	f8 0a       	sbc	r15, r24
     cd8:	cc 0c       	add	r12, r12
     cda:	dd 1c       	adc	r13, r13
     cdc:	ee 1c       	adc	r14, r14
     cde:	ff 1c       	adc	r15, r15
     ce0:	cc 0c       	add	r12, r12
     ce2:	dd 1c       	adc	r13, r13
     ce4:	ee 1c       	adc	r14, r14
     ce6:	ff 1c       	adc	r15, r15
     ce8:	cc 0c       	add	r12, r12
     cea:	dd 1c       	adc	r13, r13
     cec:	ee 1c       	adc	r14, r14
     cee:	ff 1c       	adc	r15, r15
     cf0:	cc 0c       	add	r12, r12
     cf2:	dd 1c       	adc	r13, r13
     cf4:	ee 1c       	adc	r14, r14
     cf6:	ff 1c       	adc	r15, r15
     cf8:	cc 0c       	add	r12, r12
     cfa:	dd 1c       	adc	r13, r13
     cfc:	ee 1c       	adc	r14, r14
     cfe:	ff 1c       	adc	r15, r15
     d00:	cc 0c       	add	r12, r12
     d02:	dd 1c       	adc	r13, r13
     d04:	ee 1c       	adc	r14, r14
     d06:	ff 1c       	adc	r15, r15
     d08:	cc 0c       	add	r12, r12
     d0a:	dd 1c       	adc	r13, r13
     d0c:	ee 1c       	adc	r14, r14
     d0e:	ff 1c       	adc	r15, r15
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	8c 2f       	mov	r24, r28
     d14:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	8c 0f       	add	r24, r28
     d1e:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     d22:	d7 01       	movw	r26, r14
     d24:	c6 01       	movw	r24, r12
     d26:	88 27       	eor	r24, r24
     d28:	99 27       	eor	r25, r25
     d2a:	a3 70       	andi	r26, 0x03	; 3
     d2c:	bb 27       	eor	r27, r27
     d2e:	6d 2f       	mov	r22, r29
     d30:	6a 2b       	or	r22, r26
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	8c 0f       	add	r24, r28
     d36:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     d3a:	6d 2d       	mov	r22, r13
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	8c 0f       	add	r24, r28
     d40:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     d44:	6c 2d       	mov	r22, r12
     d46:	84 e0       	ldi	r24, 0x04	; 4
     d48:	8c 0f       	add	r24, r28
     d4a:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	85 e0       	ldi	r24, 0x05	; 5
     d52:	8c 0f       	add	r24, r28
     d54:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	86 e0       	ldi	r24, 0x06	; 6
     d5c:	8c 0f       	add	r24, r28
     d5e:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	87 e0       	ldi	r24, 0x07	; 7
     d66:	8c 0f       	add	r24, r28
     d68:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	08 95       	ret

00000d7a <si5351aSetFrequency>:
*/



void si5351aSetFrequency(uint32_t frequency)
{
     d7a:	8f 92       	push	r8
     d7c:	9f 92       	push	r9
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	6b 01       	movw	r12, r22
     d90:	7c 01       	movw	r14, r24
	uint8_t mult;
	uint32_t num;
	uint32_t denom;
	uint32_t divider;

	divider = 900000000 / frequency;// Calculate the division ratio. 900,000,000 is the maximum internal 
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	79 ee       	ldi	r23, 0xE9	; 233
     d96:	84 ea       	ldi	r24, 0xA4	; 164
     d98:	95 e3       	ldi	r25, 0x35	; 53
     d9a:	a7 01       	movw	r20, r14
     d9c:	96 01       	movw	r18, r12
     d9e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__udivmodsi4>
     da2:	49 01       	movw	r8, r18
     da4:	5a 01       	movw	r10, r20
									// PLL frequency: 900MHz
	if (divider % 2) divider--;		// Ensure an even integer division ratio
     da6:	20 ff       	sbrs	r18, 0
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <si5351aSetFrequency+0x3a>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	88 1a       	sub	r8, r24
     dae:	91 08       	sbc	r9, r1
     db0:	a1 08       	sbc	r10, r1
     db2:	b1 08       	sbc	r11, r1

	pllFreq = divider * frequency;	// Calculate the pllFrequency: the divider * desired output frequency
     db4:	a5 01       	movw	r20, r10
     db6:	94 01       	movw	r18, r8
     db8:	c7 01       	movw	r24, r14
     dba:	b6 01       	movw	r22, r12
     dbc:	0e 94 cd 08 	call	0x119a	; 0x119a <__mulsi3>

	mult = pllFreq / xtalFreq;		// Determine the multiplier to get to the required pllFrequency
     dc0:	20 e4       	ldi	r18, 0x40	; 64
     dc2:	38 e7       	ldi	r19, 0x78	; 120
     dc4:	4d e7       	ldi	r20, 0x7D	; 125
     dc6:	51 e0       	ldi	r21, 0x01	; 1
     dc8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__udivmodsi4>
     dcc:	d2 2e       	mov	r13, r18
	l = pllFreq % xtalFreq;			// It has three parts:
	f = l;							// mult is an integer that must be in the range 15..90
     dce:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
	f *= 1048575;					// num and denom are the fractional parts, the numerator and denominator
     dd2:	20 ef       	ldi	r18, 0xF0	; 240
     dd4:	3f ef       	ldi	r19, 0xFF	; 255
     dd6:	4f e7       	ldi	r20, 0x7F	; 127
     dd8:	59 e4       	ldi	r21, 0x49	; 73
     dda:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__mulsf3>
	f /= xtalFreq;					// each is 20 bits (range 0..1048575)
     dde:	20 e2       	ldi	r18, 0x20	; 32
     de0:	3c eb       	ldi	r19, 0xBC	; 188
     de2:	4e eb       	ldi	r20, 0xBE	; 190
     de4:	5b e4       	ldi	r21, 0x4B	; 75
     de6:	0e 94 31 07 	call	0xe62	; 0xe62 <__divsf3>
	num = f;						// the actual multiplier is  mult + num / denom
     dea:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fixunssfsi>
     dee:	9b 01       	movw	r18, r22
     df0:	ac 01       	movw	r20, r24
	denom = 1048575;				// For simplicity we set the denominator to the maximum 1048575

									// Set up PLL A with the calculated multiplication ratio
	setupPLL(SI_SYNTH_PLL_A, mult, num, denom);
     df2:	ee 24       	eor	r14, r14
     df4:	ea 94       	dec	r14
     df6:	fe 2c       	mov	r15, r14
     df8:	0f e0       	ldi	r16, 0x0F	; 15
     dfa:	10 e0       	ldi	r17, 0x00	; 0
     dfc:	6d 2d       	mov	r22, r13
     dfe:	8a e1       	ldi	r24, 0x1A	; 26
     e00:	0e 94 80 05 	call	0xb00	; 0xb00 <setupPLL>
									// Set up MultiSynth divider 0, with the calculated divider. 
									// The final R division stage can divide by a power of two, from 1..128. 
									// reprented by constants SI_R_DIV1 to SI_R_DIV128 (see si5351a.h header file)
									// If you want to output frequencies below 1MHz, you have to use the 
									// final R division stage
	setupMultisynth(SI_SYNTH_MS_0, divider, SI_R_DIV_1);
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	b5 01       	movw	r22, r10
     e08:	a4 01       	movw	r20, r8
     e0a:	8a e2       	ldi	r24, 0x2A	; 42
     e0c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <setupMultisynth>
									// Reset the PLL. This causes a glitch in the output. For small changes to 
									// the parameters, you don't need to reset the PLL, and there is no glitch
	setupMultisynth(SI_SYNTH_MS_1, divider, SI_R_DIV_1);
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	b5 01       	movw	r22, r10
     e14:	a4 01       	movw	r20, r8
     e16:	82 e3       	ldi	r24, 0x32	; 50
     e18:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <setupMultisynth>
									
	i2cSendRegister(SI_PLL_RESET, 0xAC);	
     e1c:	6c ea       	ldi	r22, 0xAC	; 172
     e1e:	81 eb       	ldi	r24, 0xB1	; 177
     e20:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
									// Finally switch on the CLK0 output (0x4F)
									// and set the MultiSynth0 input to be PLL A
	i2cSendRegister(SI_CLK0_CONTROL, 0x4F | SI_CLK_SRC_PLL_A);
     e24:	6f e4       	ldi	r22, 0x4F	; 79
     e26:	80 e1       	ldi	r24, 0x10	; 16
     e28:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
	i2cSendRegister(SI_CLK1_CONTROL, 0x4F | SI_CLK_SRC_PLL_A);
     e2c:	6f e4       	ldi	r22, 0x4F	; 79
     e2e:	81 e1       	ldi	r24, 0x11	; 17
     e30:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>

	// new
	i2cSendRegister(SI5351_CLK0_PHOFF, 0);
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	85 ea       	ldi	r24, 0xA5	; 165
     e38:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>
	i2cSendRegister(SI5351_CLK1_PHOFF, divider);
     e3c:	68 2d       	mov	r22, r8
     e3e:	86 ea       	ldi	r24, 0xA6	; 166
     e40:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>

	i2cSendRegister(SI_PLL_RESET, 0xAC);
     e44:	6c ea       	ldi	r22, 0xAC	; 172
     e46:	81 eb       	ldi	r24, 0xB1	; 177
     e48:	0e 94 7d 00 	call	0xfa	; 0xfa <i2cSendRegister>

}
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	bf 90       	pop	r11
     e5a:	af 90       	pop	r10
     e5c:	9f 90       	pop	r9
     e5e:	8f 90       	pop	r8
     e60:	08 95       	ret

00000e62 <__divsf3>:
     e62:	0e 94 45 07 	call	0xe8a	; 0xe8a <__divsf3x>
     e66:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_round>
     e6a:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_pscB>
     e6e:	58 f0       	brcs	.+22     	; 0xe86 <__divsf3+0x24>
     e70:	0e 94 18 08 	call	0x1030	; 0x1030 <__fp_pscA>
     e74:	40 f0       	brcs	.+16     	; 0xe86 <__divsf3+0x24>
     e76:	29 f4       	brne	.+10     	; 0xe82 <__divsf3+0x20>
     e78:	5f 3f       	cpi	r21, 0xFF	; 255
     e7a:	29 f0       	breq	.+10     	; 0xe86 <__divsf3+0x24>
     e7c:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_inf>
     e80:	51 11       	cpse	r21, r1
     e82:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_szero>
     e86:	0c 94 15 08 	jmp	0x102a	; 0x102a <__fp_nan>

00000e8a <__divsf3x>:
     e8a:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_split3>
     e8e:	68 f3       	brcs	.-38     	; 0xe6a <__divsf3+0x8>

00000e90 <__divsf3_pse>:
     e90:	99 23       	and	r25, r25
     e92:	b1 f3       	breq	.-20     	; 0xe80 <__divsf3+0x1e>
     e94:	55 23       	and	r21, r21
     e96:	91 f3       	breq	.-28     	; 0xe7c <__divsf3+0x1a>
     e98:	95 1b       	sub	r25, r21
     e9a:	55 0b       	sbc	r21, r21
     e9c:	bb 27       	eor	r27, r27
     e9e:	aa 27       	eor	r26, r26
     ea0:	62 17       	cp	r22, r18
     ea2:	73 07       	cpc	r23, r19
     ea4:	84 07       	cpc	r24, r20
     ea6:	38 f0       	brcs	.+14     	; 0xeb6 <__divsf3_pse+0x26>
     ea8:	9f 5f       	subi	r25, 0xFF	; 255
     eaa:	5f 4f       	sbci	r21, 0xFF	; 255
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	44 1f       	adc	r20, r20
     eb2:	aa 1f       	adc	r26, r26
     eb4:	a9 f3       	breq	.-22     	; 0xea0 <__divsf3_pse+0x10>
     eb6:	35 d0       	rcall	.+106    	; 0xf22 <__divsf3_pse+0x92>
     eb8:	0e 2e       	mov	r0, r30
     eba:	3a f0       	brmi	.+14     	; 0xeca <__divsf3_pse+0x3a>
     ebc:	e0 e8       	ldi	r30, 0x80	; 128
     ebe:	32 d0       	rcall	.+100    	; 0xf24 <__divsf3_pse+0x94>
     ec0:	91 50       	subi	r25, 0x01	; 1
     ec2:	50 40       	sbci	r21, 0x00	; 0
     ec4:	e6 95       	lsr	r30
     ec6:	00 1c       	adc	r0, r0
     ec8:	ca f7       	brpl	.-14     	; 0xebc <__divsf3_pse+0x2c>
     eca:	2b d0       	rcall	.+86     	; 0xf22 <__divsf3_pse+0x92>
     ecc:	fe 2f       	mov	r31, r30
     ece:	29 d0       	rcall	.+82     	; 0xf22 <__divsf3_pse+0x92>
     ed0:	66 0f       	add	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	88 1f       	adc	r24, r24
     ed6:	bb 1f       	adc	r27, r27
     ed8:	26 17       	cp	r18, r22
     eda:	37 07       	cpc	r19, r23
     edc:	48 07       	cpc	r20, r24
     ede:	ab 07       	cpc	r26, r27
     ee0:	b0 e8       	ldi	r27, 0x80	; 128
     ee2:	09 f0       	breq	.+2      	; 0xee6 <__divsf3_pse+0x56>
     ee4:	bb 0b       	sbc	r27, r27
     ee6:	80 2d       	mov	r24, r0
     ee8:	bf 01       	movw	r22, r30
     eea:	ff 27       	eor	r31, r31
     eec:	93 58       	subi	r25, 0x83	; 131
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	3a f0       	brmi	.+14     	; 0xf00 <__divsf3_pse+0x70>
     ef2:	9e 3f       	cpi	r25, 0xFE	; 254
     ef4:	51 05       	cpc	r21, r1
     ef6:	78 f0       	brcs	.+30     	; 0xf16 <__divsf3_pse+0x86>
     ef8:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_inf>
     efc:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_szero>
     f00:	5f 3f       	cpi	r21, 0xFF	; 255
     f02:	e4 f3       	brlt	.-8      	; 0xefc <__divsf3_pse+0x6c>
     f04:	98 3e       	cpi	r25, 0xE8	; 232
     f06:	d4 f3       	brlt	.-12     	; 0xefc <__divsf3_pse+0x6c>
     f08:	86 95       	lsr	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b7 95       	ror	r27
     f10:	f7 95       	ror	r31
     f12:	9f 5f       	subi	r25, 0xFF	; 255
     f14:	c9 f7       	brne	.-14     	; 0xf08 <__divsf3_pse+0x78>
     f16:	88 0f       	add	r24, r24
     f18:	91 1d       	adc	r25, r1
     f1a:	96 95       	lsr	r25
     f1c:	87 95       	ror	r24
     f1e:	97 f9       	bld	r25, 7
     f20:	08 95       	ret
     f22:	e1 e0       	ldi	r30, 0x01	; 1
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	bb 1f       	adc	r27, r27
     f2c:	62 17       	cp	r22, r18
     f2e:	73 07       	cpc	r23, r19
     f30:	84 07       	cpc	r24, r20
     f32:	ba 07       	cpc	r27, r26
     f34:	20 f0       	brcs	.+8      	; 0xf3e <__divsf3_pse+0xae>
     f36:	62 1b       	sub	r22, r18
     f38:	73 0b       	sbc	r23, r19
     f3a:	84 0b       	sbc	r24, r20
     f3c:	ba 0b       	sbc	r27, r26
     f3e:	ee 1f       	adc	r30, r30
     f40:	88 f7       	brcc	.-30     	; 0xf24 <__divsf3_pse+0x94>
     f42:	e0 95       	com	r30
     f44:	08 95       	ret

00000f46 <__fixunssfsi>:
     f46:	0e 94 3f 08 	call	0x107e	; 0x107e <__fp_splitA>
     f4a:	88 f0       	brcs	.+34     	; 0xf6e <__fixunssfsi+0x28>
     f4c:	9f 57       	subi	r25, 0x7F	; 127
     f4e:	98 f0       	brcs	.+38     	; 0xf76 <__fixunssfsi+0x30>
     f50:	b9 2f       	mov	r27, r25
     f52:	99 27       	eor	r25, r25
     f54:	b7 51       	subi	r27, 0x17	; 23
     f56:	b0 f0       	brcs	.+44     	; 0xf84 <__fixunssfsi+0x3e>
     f58:	e1 f0       	breq	.+56     	; 0xf92 <__fixunssfsi+0x4c>
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	1a f0       	brmi	.+6      	; 0xf6a <__fixunssfsi+0x24>
     f64:	ba 95       	dec	r27
     f66:	c9 f7       	brne	.-14     	; 0xf5a <__fixunssfsi+0x14>
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <__fixunssfsi+0x4c>
     f6a:	b1 30       	cpi	r27, 0x01	; 1
     f6c:	91 f0       	breq	.+36     	; 0xf92 <__fixunssfsi+0x4c>
     f6e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_zero>
     f72:	b1 e0       	ldi	r27, 0x01	; 1
     f74:	08 95       	ret
     f76:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_zero>
     f7a:	67 2f       	mov	r22, r23
     f7c:	78 2f       	mov	r23, r24
     f7e:	88 27       	eor	r24, r24
     f80:	b8 5f       	subi	r27, 0xF8	; 248
     f82:	39 f0       	breq	.+14     	; 0xf92 <__fixunssfsi+0x4c>
     f84:	b9 3f       	cpi	r27, 0xF9	; 249
     f86:	cc f3       	brlt	.-14     	; 0xf7a <__fixunssfsi+0x34>
     f88:	86 95       	lsr	r24
     f8a:	77 95       	ror	r23
     f8c:	67 95       	ror	r22
     f8e:	b3 95       	inc	r27
     f90:	d9 f7       	brne	.-10     	; 0xf88 <__fixunssfsi+0x42>
     f92:	3e f4       	brtc	.+14     	; 0xfa2 <__fixunssfsi+0x5c>
     f94:	90 95       	com	r25
     f96:	80 95       	com	r24
     f98:	70 95       	com	r23
     f9a:	61 95       	neg	r22
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	8f 4f       	sbci	r24, 0xFF	; 255
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	08 95       	ret

00000fa4 <__floatunsisf>:
     fa4:	e8 94       	clt
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <__floatsisf+0x12>

00000fa8 <__floatsisf>:
     fa8:	97 fb       	bst	r25, 7
     faa:	3e f4       	brtc	.+14     	; 0xfba <__floatsisf+0x12>
     fac:	90 95       	com	r25
     fae:	80 95       	com	r24
     fb0:	70 95       	com	r23
     fb2:	61 95       	neg	r22
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	99 23       	and	r25, r25
     fbc:	a9 f0       	breq	.+42     	; 0xfe8 <__floatsisf+0x40>
     fbe:	f9 2f       	mov	r31, r25
     fc0:	96 e9       	ldi	r25, 0x96	; 150
     fc2:	bb 27       	eor	r27, r27
     fc4:	93 95       	inc	r25
     fc6:	f6 95       	lsr	r31
     fc8:	87 95       	ror	r24
     fca:	77 95       	ror	r23
     fcc:	67 95       	ror	r22
     fce:	b7 95       	ror	r27
     fd0:	f1 11       	cpse	r31, r1
     fd2:	f8 cf       	rjmp	.-16     	; 0xfc4 <__floatsisf+0x1c>
     fd4:	fa f4       	brpl	.+62     	; 0x1014 <__floatsisf+0x6c>
     fd6:	bb 0f       	add	r27, r27
     fd8:	11 f4       	brne	.+4      	; 0xfde <__floatsisf+0x36>
     fda:	60 ff       	sbrs	r22, 0
     fdc:	1b c0       	rjmp	.+54     	; 0x1014 <__floatsisf+0x6c>
     fde:	6f 5f       	subi	r22, 0xFF	; 255
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	16 c0       	rjmp	.+44     	; 0x1014 <__floatsisf+0x6c>
     fe8:	88 23       	and	r24, r24
     fea:	11 f0       	breq	.+4      	; 0xff0 <__floatsisf+0x48>
     fec:	96 e9       	ldi	r25, 0x96	; 150
     fee:	11 c0       	rjmp	.+34     	; 0x1012 <__floatsisf+0x6a>
     ff0:	77 23       	and	r23, r23
     ff2:	21 f0       	breq	.+8      	; 0xffc <__floatsisf+0x54>
     ff4:	9e e8       	ldi	r25, 0x8E	; 142
     ff6:	87 2f       	mov	r24, r23
     ff8:	76 2f       	mov	r23, r22
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <__floatsisf+0x5e>
     ffc:	66 23       	and	r22, r22
     ffe:	71 f0       	breq	.+28     	; 0x101c <__floatsisf+0x74>
    1000:	96 e8       	ldi	r25, 0x86	; 134
    1002:	86 2f       	mov	r24, r22
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	2a f0       	brmi	.+10     	; 0x1014 <__floatsisf+0x6c>
    100a:	9a 95       	dec	r25
    100c:	66 0f       	add	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	da f7       	brpl	.-10     	; 0x100a <__floatsisf+0x62>
    1014:	88 0f       	add	r24, r24
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
    101a:	97 f9       	bld	r25, 7
    101c:	08 95       	ret

0000101e <__fp_inf>:
    101e:	97 f9       	bld	r25, 7
    1020:	9f 67       	ori	r25, 0x7F	; 127
    1022:	80 e8       	ldi	r24, 0x80	; 128
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	08 95       	ret

0000102a <__fp_nan>:
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    102c:	80 ec       	ldi	r24, 0xC0	; 192
    102e:	08 95       	ret

00001030 <__fp_pscA>:
    1030:	00 24       	eor	r0, r0
    1032:	0a 94       	dec	r0
    1034:	16 16       	cp	r1, r22
    1036:	17 06       	cpc	r1, r23
    1038:	18 06       	cpc	r1, r24
    103a:	09 06       	cpc	r0, r25
    103c:	08 95       	ret

0000103e <__fp_pscB>:
    103e:	00 24       	eor	r0, r0
    1040:	0a 94       	dec	r0
    1042:	12 16       	cp	r1, r18
    1044:	13 06       	cpc	r1, r19
    1046:	14 06       	cpc	r1, r20
    1048:	05 06       	cpc	r0, r21
    104a:	08 95       	ret

0000104c <__fp_round>:
    104c:	09 2e       	mov	r0, r25
    104e:	03 94       	inc	r0
    1050:	00 0c       	add	r0, r0
    1052:	11 f4       	brne	.+4      	; 0x1058 <__fp_round+0xc>
    1054:	88 23       	and	r24, r24
    1056:	52 f0       	brmi	.+20     	; 0x106c <__fp_round+0x20>
    1058:	bb 0f       	add	r27, r27
    105a:	40 f4       	brcc	.+16     	; 0x106c <__fp_round+0x20>
    105c:	bf 2b       	or	r27, r31
    105e:	11 f4       	brne	.+4      	; 0x1064 <__fp_round+0x18>
    1060:	60 ff       	sbrs	r22, 0
    1062:	04 c0       	rjmp	.+8      	; 0x106c <__fp_round+0x20>
    1064:	6f 5f       	subi	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	08 95       	ret

0000106e <__fp_split3>:
    106e:	57 fd       	sbrc	r21, 7
    1070:	90 58       	subi	r25, 0x80	; 128
    1072:	44 0f       	add	r20, r20
    1074:	55 1f       	adc	r21, r21
    1076:	59 f0       	breq	.+22     	; 0x108e <__fp_splitA+0x10>
    1078:	5f 3f       	cpi	r21, 0xFF	; 255
    107a:	71 f0       	breq	.+28     	; 0x1098 <__fp_splitA+0x1a>
    107c:	47 95       	ror	r20

0000107e <__fp_splitA>:
    107e:	88 0f       	add	r24, r24
    1080:	97 fb       	bst	r25, 7
    1082:	99 1f       	adc	r25, r25
    1084:	61 f0       	breq	.+24     	; 0x109e <__fp_splitA+0x20>
    1086:	9f 3f       	cpi	r25, 0xFF	; 255
    1088:	79 f0       	breq	.+30     	; 0x10a8 <__fp_splitA+0x2a>
    108a:	87 95       	ror	r24
    108c:	08 95       	ret
    108e:	12 16       	cp	r1, r18
    1090:	13 06       	cpc	r1, r19
    1092:	14 06       	cpc	r1, r20
    1094:	55 1f       	adc	r21, r21
    1096:	f2 cf       	rjmp	.-28     	; 0x107c <__fp_split3+0xe>
    1098:	46 95       	lsr	r20
    109a:	f1 df       	rcall	.-30     	; 0x107e <__fp_splitA>
    109c:	08 c0       	rjmp	.+16     	; 0x10ae <__fp_splitA+0x30>
    109e:	16 16       	cp	r1, r22
    10a0:	17 06       	cpc	r1, r23
    10a2:	18 06       	cpc	r1, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	f1 cf       	rjmp	.-30     	; 0x108a <__fp_splitA+0xc>
    10a8:	86 95       	lsr	r24
    10aa:	71 05       	cpc	r23, r1
    10ac:	61 05       	cpc	r22, r1
    10ae:	08 94       	sec
    10b0:	08 95       	ret

000010b2 <__fp_zero>:
    10b2:	e8 94       	clt

000010b4 <__fp_szero>:
    10b4:	bb 27       	eor	r27, r27
    10b6:	66 27       	eor	r22, r22
    10b8:	77 27       	eor	r23, r23
    10ba:	cb 01       	movw	r24, r22
    10bc:	97 f9       	bld	r25, 7
    10be:	08 95       	ret

000010c0 <__mulsf3>:
    10c0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__mulsf3x>
    10c4:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_round>
    10c8:	0e 94 18 08 	call	0x1030	; 0x1030 <__fp_pscA>
    10cc:	38 f0       	brcs	.+14     	; 0x10dc <__mulsf3+0x1c>
    10ce:	0e 94 1f 08 	call	0x103e	; 0x103e <__fp_pscB>
    10d2:	20 f0       	brcs	.+8      	; 0x10dc <__mulsf3+0x1c>
    10d4:	95 23       	and	r25, r21
    10d6:	11 f0       	breq	.+4      	; 0x10dc <__mulsf3+0x1c>
    10d8:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_inf>
    10dc:	0c 94 15 08 	jmp	0x102a	; 0x102a <__fp_nan>
    10e0:	11 24       	eor	r1, r1
    10e2:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_szero>

000010e6 <__mulsf3x>:
    10e6:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_split3>
    10ea:	70 f3       	brcs	.-36     	; 0x10c8 <__mulsf3+0x8>

000010ec <__mulsf3_pse>:
    10ec:	95 9f       	mul	r25, r21
    10ee:	c1 f3       	breq	.-16     	; 0x10e0 <__mulsf3+0x20>
    10f0:	95 0f       	add	r25, r21
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	55 1f       	adc	r21, r21
    10f6:	62 9f       	mul	r22, r18
    10f8:	f0 01       	movw	r30, r0
    10fa:	72 9f       	mul	r23, r18
    10fc:	bb 27       	eor	r27, r27
    10fe:	f0 0d       	add	r31, r0
    1100:	b1 1d       	adc	r27, r1
    1102:	63 9f       	mul	r22, r19
    1104:	aa 27       	eor	r26, r26
    1106:	f0 0d       	add	r31, r0
    1108:	b1 1d       	adc	r27, r1
    110a:	aa 1f       	adc	r26, r26
    110c:	64 9f       	mul	r22, r20
    110e:	66 27       	eor	r22, r22
    1110:	b0 0d       	add	r27, r0
    1112:	a1 1d       	adc	r26, r1
    1114:	66 1f       	adc	r22, r22
    1116:	82 9f       	mul	r24, r18
    1118:	22 27       	eor	r18, r18
    111a:	b0 0d       	add	r27, r0
    111c:	a1 1d       	adc	r26, r1
    111e:	62 1f       	adc	r22, r18
    1120:	73 9f       	mul	r23, r19
    1122:	b0 0d       	add	r27, r0
    1124:	a1 1d       	adc	r26, r1
    1126:	62 1f       	adc	r22, r18
    1128:	83 9f       	mul	r24, r19
    112a:	a0 0d       	add	r26, r0
    112c:	61 1d       	adc	r22, r1
    112e:	22 1f       	adc	r18, r18
    1130:	74 9f       	mul	r23, r20
    1132:	33 27       	eor	r19, r19
    1134:	a0 0d       	add	r26, r0
    1136:	61 1d       	adc	r22, r1
    1138:	23 1f       	adc	r18, r19
    113a:	84 9f       	mul	r24, r20
    113c:	60 0d       	add	r22, r0
    113e:	21 1d       	adc	r18, r1
    1140:	82 2f       	mov	r24, r18
    1142:	76 2f       	mov	r23, r22
    1144:	6a 2f       	mov	r22, r26
    1146:	11 24       	eor	r1, r1
    1148:	9f 57       	subi	r25, 0x7F	; 127
    114a:	50 40       	sbci	r21, 0x00	; 0
    114c:	9a f0       	brmi	.+38     	; 0x1174 <__mulsf3_pse+0x88>
    114e:	f1 f0       	breq	.+60     	; 0x118c <__mulsf3_pse+0xa0>
    1150:	88 23       	and	r24, r24
    1152:	4a f0       	brmi	.+18     	; 0x1166 <__mulsf3_pse+0x7a>
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	bb 1f       	adc	r27, r27
    115a:	66 1f       	adc	r22, r22
    115c:	77 1f       	adc	r23, r23
    115e:	88 1f       	adc	r24, r24
    1160:	91 50       	subi	r25, 0x01	; 1
    1162:	50 40       	sbci	r21, 0x00	; 0
    1164:	a9 f7       	brne	.-22     	; 0x1150 <__mulsf3_pse+0x64>
    1166:	9e 3f       	cpi	r25, 0xFE	; 254
    1168:	51 05       	cpc	r21, r1
    116a:	80 f0       	brcs	.+32     	; 0x118c <__mulsf3_pse+0xa0>
    116c:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_inf>
    1170:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_szero>
    1174:	5f 3f       	cpi	r21, 0xFF	; 255
    1176:	e4 f3       	brlt	.-8      	; 0x1170 <__mulsf3_pse+0x84>
    1178:	98 3e       	cpi	r25, 0xE8	; 232
    117a:	d4 f3       	brlt	.-12     	; 0x1170 <__mulsf3_pse+0x84>
    117c:	86 95       	lsr	r24
    117e:	77 95       	ror	r23
    1180:	67 95       	ror	r22
    1182:	b7 95       	ror	r27
    1184:	f7 95       	ror	r31
    1186:	e7 95       	ror	r30
    1188:	9f 5f       	subi	r25, 0xFF	; 255
    118a:	c1 f7       	brne	.-16     	; 0x117c <__mulsf3_pse+0x90>
    118c:	fe 2b       	or	r31, r30
    118e:	88 0f       	add	r24, r24
    1190:	91 1d       	adc	r25, r1
    1192:	96 95       	lsr	r25
    1194:	87 95       	ror	r24
    1196:	97 f9       	bld	r25, 7
    1198:	08 95       	ret

0000119a <__mulsi3>:
    119a:	db 01       	movw	r26, r22
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	0e 94 13 09 	call	0x1226	; 0x1226 <__muluhisi3>
    11a4:	bf 91       	pop	r27
    11a6:	af 91       	pop	r26
    11a8:	a2 9f       	mul	r26, r18
    11aa:	80 0d       	add	r24, r0
    11ac:	91 1d       	adc	r25, r1
    11ae:	a3 9f       	mul	r26, r19
    11b0:	90 0d       	add	r25, r0
    11b2:	b2 9f       	mul	r27, r18
    11b4:	90 0d       	add	r25, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	08 95       	ret

000011ba <__divmodhi4>:
    11ba:	97 fb       	bst	r25, 7
    11bc:	07 2e       	mov	r0, r23
    11be:	16 f4       	brtc	.+4      	; 0x11c4 <__divmodhi4+0xa>
    11c0:	00 94       	com	r0
    11c2:	07 d0       	rcall	.+14     	; 0x11d2 <__divmodhi4_neg1>
    11c4:	77 fd       	sbrc	r23, 7
    11c6:	09 d0       	rcall	.+18     	; 0x11da <__divmodhi4_neg2>
    11c8:	0e 94 1e 09 	call	0x123c	; 0x123c <__udivmodhi4>
    11cc:	07 fc       	sbrc	r0, 7
    11ce:	05 d0       	rcall	.+10     	; 0x11da <__divmodhi4_neg2>
    11d0:	3e f4       	brtc	.+14     	; 0x11e0 <__divmodhi4_exit>

000011d2 <__divmodhi4_neg1>:
    11d2:	90 95       	com	r25
    11d4:	81 95       	neg	r24
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	08 95       	ret

000011da <__divmodhi4_neg2>:
    11da:	70 95       	com	r23
    11dc:	61 95       	neg	r22
    11de:	7f 4f       	sbci	r23, 0xFF	; 255

000011e0 <__divmodhi4_exit>:
    11e0:	08 95       	ret

000011e2 <__udivmodsi4>:
    11e2:	a1 e2       	ldi	r26, 0x21	; 33
    11e4:	1a 2e       	mov	r1, r26
    11e6:	aa 1b       	sub	r26, r26
    11e8:	bb 1b       	sub	r27, r27
    11ea:	fd 01       	movw	r30, r26
    11ec:	0d c0       	rjmp	.+26     	; 0x1208 <__udivmodsi4_ep>

000011ee <__udivmodsi4_loop>:
    11ee:	aa 1f       	adc	r26, r26
    11f0:	bb 1f       	adc	r27, r27
    11f2:	ee 1f       	adc	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	a2 17       	cp	r26, r18
    11f8:	b3 07       	cpc	r27, r19
    11fa:	e4 07       	cpc	r30, r20
    11fc:	f5 07       	cpc	r31, r21
    11fe:	20 f0       	brcs	.+8      	; 0x1208 <__udivmodsi4_ep>
    1200:	a2 1b       	sub	r26, r18
    1202:	b3 0b       	sbc	r27, r19
    1204:	e4 0b       	sbc	r30, r20
    1206:	f5 0b       	sbc	r31, r21

00001208 <__udivmodsi4_ep>:
    1208:	66 1f       	adc	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	88 1f       	adc	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	1a 94       	dec	r1
    1212:	69 f7       	brne	.-38     	; 0x11ee <__udivmodsi4_loop>
    1214:	60 95       	com	r22
    1216:	70 95       	com	r23
    1218:	80 95       	com	r24
    121a:	90 95       	com	r25
    121c:	9b 01       	movw	r18, r22
    121e:	ac 01       	movw	r20, r24
    1220:	bd 01       	movw	r22, r26
    1222:	cf 01       	movw	r24, r30
    1224:	08 95       	ret

00001226 <__muluhisi3>:
    1226:	0e 94 32 09 	call	0x1264	; 0x1264 <__umulhisi3>
    122a:	a5 9f       	mul	r26, r21
    122c:	90 0d       	add	r25, r0
    122e:	b4 9f       	mul	r27, r20
    1230:	90 0d       	add	r25, r0
    1232:	a4 9f       	mul	r26, r20
    1234:	80 0d       	add	r24, r0
    1236:	91 1d       	adc	r25, r1
    1238:	11 24       	eor	r1, r1
    123a:	08 95       	ret

0000123c <__udivmodhi4>:
    123c:	aa 1b       	sub	r26, r26
    123e:	bb 1b       	sub	r27, r27
    1240:	51 e1       	ldi	r21, 0x11	; 17
    1242:	07 c0       	rjmp	.+14     	; 0x1252 <__udivmodhi4_ep>

00001244 <__udivmodhi4_loop>:
    1244:	aa 1f       	adc	r26, r26
    1246:	bb 1f       	adc	r27, r27
    1248:	a6 17       	cp	r26, r22
    124a:	b7 07       	cpc	r27, r23
    124c:	10 f0       	brcs	.+4      	; 0x1252 <__udivmodhi4_ep>
    124e:	a6 1b       	sub	r26, r22
    1250:	b7 0b       	sbc	r27, r23

00001252 <__udivmodhi4_ep>:
    1252:	88 1f       	adc	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	5a 95       	dec	r21
    1258:	a9 f7       	brne	.-22     	; 0x1244 <__udivmodhi4_loop>
    125a:	80 95       	com	r24
    125c:	90 95       	com	r25
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	08 95       	ret

00001264 <__umulhisi3>:
    1264:	a2 9f       	mul	r26, r18
    1266:	b0 01       	movw	r22, r0
    1268:	b3 9f       	mul	r27, r19
    126a:	c0 01       	movw	r24, r0
    126c:	a3 9f       	mul	r26, r19
    126e:	70 0d       	add	r23, r0
    1270:	81 1d       	adc	r24, r1
    1272:	11 24       	eor	r1, r1
    1274:	91 1d       	adc	r25, r1
    1276:	b2 9f       	mul	r27, r18
    1278:	70 0d       	add	r23, r0
    127a:	81 1d       	adc	r24, r1
    127c:	11 24       	eor	r1, r1
    127e:	91 1d       	adc	r25, r1
    1280:	08 95       	ret

00001282 <atoi>:
    1282:	fc 01       	movw	r30, r24
    1284:	88 27       	eor	r24, r24
    1286:	99 27       	eor	r25, r25
    1288:	e8 94       	clt
    128a:	21 91       	ld	r18, Z+
    128c:	20 32       	cpi	r18, 0x20	; 32
    128e:	e9 f3       	breq	.-6      	; 0x128a <atoi+0x8>
    1290:	29 30       	cpi	r18, 0x09	; 9
    1292:	10 f0       	brcs	.+4      	; 0x1298 <atoi+0x16>
    1294:	2e 30       	cpi	r18, 0x0E	; 14
    1296:	c8 f3       	brcs	.-14     	; 0x128a <atoi+0x8>
    1298:	2b 32       	cpi	r18, 0x2B	; 43
    129a:	41 f0       	breq	.+16     	; 0x12ac <atoi+0x2a>
    129c:	2d 32       	cpi	r18, 0x2D	; 45
    129e:	39 f4       	brne	.+14     	; 0x12ae <atoi+0x2c>
    12a0:	68 94       	set
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <atoi+0x2a>
    12a4:	0e 94 98 09 	call	0x1330	; 0x1330 <__mulhi_const_10>
    12a8:	82 0f       	add	r24, r18
    12aa:	91 1d       	adc	r25, r1
    12ac:	21 91       	ld	r18, Z+
    12ae:	20 53       	subi	r18, 0x30	; 48
    12b0:	2a 30       	cpi	r18, 0x0A	; 10
    12b2:	c0 f3       	brcs	.-16     	; 0x12a4 <atoi+0x22>
    12b4:	1e f4       	brtc	.+6      	; 0x12bc <atoi+0x3a>
    12b6:	90 95       	com	r25
    12b8:	81 95       	neg	r24
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	08 95       	ret

000012be <strcat>:
    12be:	fb 01       	movw	r30, r22
    12c0:	dc 01       	movw	r26, r24
    12c2:	0d 90       	ld	r0, X+
    12c4:	00 20       	and	r0, r0
    12c6:	e9 f7       	brne	.-6      	; 0x12c2 <strcat+0x4>
    12c8:	11 97       	sbiw	r26, 0x01	; 1
    12ca:	01 90       	ld	r0, Z+
    12cc:	0d 92       	st	X+, r0
    12ce:	00 20       	and	r0, r0
    12d0:	e1 f7       	brne	.-8      	; 0x12ca <strcat+0xc>
    12d2:	08 95       	ret

000012d4 <strcmp>:
    12d4:	fb 01       	movw	r30, r22
    12d6:	dc 01       	movw	r26, r24
    12d8:	8d 91       	ld	r24, X+
    12da:	01 90       	ld	r0, Z+
    12dc:	80 19       	sub	r24, r0
    12de:	01 10       	cpse	r0, r1
    12e0:	d9 f3       	breq	.-10     	; 0x12d8 <strcmp+0x4>
    12e2:	99 0b       	sbc	r25, r25
    12e4:	08 95       	ret

000012e6 <strncpy>:
    12e6:	fb 01       	movw	r30, r22
    12e8:	dc 01       	movw	r26, r24
    12ea:	41 50       	subi	r20, 0x01	; 1
    12ec:	50 40       	sbci	r21, 0x00	; 0
    12ee:	48 f0       	brcs	.+18     	; 0x1302 <strncpy+0x1c>
    12f0:	01 90       	ld	r0, Z+
    12f2:	0d 92       	st	X+, r0
    12f4:	00 20       	and	r0, r0
    12f6:	c9 f7       	brne	.-14     	; 0x12ea <strncpy+0x4>
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <strncpy+0x16>
    12fa:	1d 92       	st	X+, r1
    12fc:	41 50       	subi	r20, 0x01	; 1
    12fe:	50 40       	sbci	r21, 0x00	; 0
    1300:	e0 f7       	brcc	.-8      	; 0x12fa <strncpy+0x14>
    1302:	08 95       	ret

00001304 <itoa>:
    1304:	45 32       	cpi	r20, 0x25	; 37
    1306:	51 05       	cpc	r21, r1
    1308:	20 f4       	brcc	.+8      	; 0x1312 <itoa+0xe>
    130a:	42 30       	cpi	r20, 0x02	; 2
    130c:	10 f0       	brcs	.+4      	; 0x1312 <itoa+0xe>
    130e:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__itoa_ncheck>
    1312:	fb 01       	movw	r30, r22
    1314:	10 82       	st	Z, r1
    1316:	cb 01       	movw	r24, r22
    1318:	08 95       	ret

0000131a <__itoa_ncheck>:
    131a:	bb 27       	eor	r27, r27
    131c:	4a 30       	cpi	r20, 0x0A	; 10
    131e:	31 f4       	brne	.+12     	; 0x132c <__itoa_ncheck+0x12>
    1320:	99 23       	and	r25, r25
    1322:	22 f4       	brpl	.+8      	; 0x132c <__itoa_ncheck+0x12>
    1324:	bd e2       	ldi	r27, 0x2D	; 45
    1326:	90 95       	com	r25
    1328:	81 95       	neg	r24
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__utoa_common>

00001330 <__mulhi_const_10>:
    1330:	7a e0       	ldi	r23, 0x0A	; 10
    1332:	97 9f       	mul	r25, r23
    1334:	90 2d       	mov	r25, r0
    1336:	87 9f       	mul	r24, r23
    1338:	80 2d       	mov	r24, r0
    133a:	91 0d       	add	r25, r1
    133c:	11 24       	eor	r1, r1
    133e:	08 95       	ret

00001340 <__utoa_ncheck>:
    1340:	bb 27       	eor	r27, r27

00001342 <__utoa_common>:
    1342:	fb 01       	movw	r30, r22
    1344:	55 27       	eor	r21, r21
    1346:	aa 27       	eor	r26, r26
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	aa 1f       	adc	r26, r26
    134e:	a4 17       	cp	r26, r20
    1350:	10 f0       	brcs	.+4      	; 0x1356 <__utoa_common+0x14>
    1352:	a4 1b       	sub	r26, r20
    1354:	83 95       	inc	r24
    1356:	50 51       	subi	r21, 0x10	; 16
    1358:	b9 f7       	brne	.-18     	; 0x1348 <__utoa_common+0x6>
    135a:	a0 5d       	subi	r26, 0xD0	; 208
    135c:	aa 33       	cpi	r26, 0x3A	; 58
    135e:	08 f0       	brcs	.+2      	; 0x1362 <__utoa_common+0x20>
    1360:	a9 5d       	subi	r26, 0xD9	; 217
    1362:	a1 93       	st	Z+, r26
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	79 f7       	brne	.-34     	; 0x1346 <__utoa_common+0x4>
    1368:	b1 11       	cpse	r27, r1
    136a:	b1 93       	st	Z+, r27
    136c:	11 92       	st	Z+, r1
    136e:	cb 01       	movw	r24, r22
    1370:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <strrev>

00001374 <printf>:
    1374:	a0 e0       	ldi	r26, 0x00	; 0
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e0 ec       	ldi	r30, 0xC0	; 192
    137a:	f9 e0       	ldi	r31, 0x09	; 9
    137c:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__prologue_saves__+0x20>
    1380:	ae 01       	movw	r20, r28
    1382:	4b 5f       	subi	r20, 0xFB	; 251
    1384:	5f 4f       	sbci	r21, 0xFF	; 255
    1386:	fa 01       	movw	r30, r20
    1388:	61 91       	ld	r22, Z+
    138a:	71 91       	ld	r23, Z+
    138c:	af 01       	movw	r20, r30
    138e:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <__iob+0x2>
    1392:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <__iob+0x3>
    1396:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <vfprintf>
    139a:	e2 e0       	ldi	r30, 0x02	; 2
    139c:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__epilogue_restores__+0x20>

000013a0 <vfprintf>:
    13a0:	ab e0       	ldi	r26, 0x0B	; 11
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e6 ed       	ldi	r30, 0xD6	; 214
    13a6:	f9 e0       	ldi	r31, 0x09	; 9
    13a8:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__prologue_saves__>
    13ac:	6c 01       	movw	r12, r24
    13ae:	7b 01       	movw	r14, r22
    13b0:	8a 01       	movw	r16, r20
    13b2:	fc 01       	movw	r30, r24
    13b4:	17 82       	std	Z+7, r1	; 0x07
    13b6:	16 82       	std	Z+6, r1	; 0x06
    13b8:	83 81       	ldd	r24, Z+3	; 0x03
    13ba:	81 ff       	sbrs	r24, 1
    13bc:	cc c1       	rjmp	.+920    	; 0x1756 <vfprintf+0x3b6>
    13be:	ce 01       	movw	r24, r28
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	3c 01       	movw	r6, r24
    13c4:	f6 01       	movw	r30, r12
    13c6:	93 81       	ldd	r25, Z+3	; 0x03
    13c8:	f7 01       	movw	r30, r14
    13ca:	93 fd       	sbrc	r25, 3
    13cc:	85 91       	lpm	r24, Z+
    13ce:	93 ff       	sbrs	r25, 3
    13d0:	81 91       	ld	r24, Z+
    13d2:	7f 01       	movw	r14, r30
    13d4:	88 23       	and	r24, r24
    13d6:	09 f4       	brne	.+2      	; 0x13da <vfprintf+0x3a>
    13d8:	ba c1       	rjmp	.+884    	; 0x174e <vfprintf+0x3ae>
    13da:	85 32       	cpi	r24, 0x25	; 37
    13dc:	39 f4       	brne	.+14     	; 0x13ec <vfprintf+0x4c>
    13de:	93 fd       	sbrc	r25, 3
    13e0:	85 91       	lpm	r24, Z+
    13e2:	93 ff       	sbrs	r25, 3
    13e4:	81 91       	ld	r24, Z+
    13e6:	7f 01       	movw	r14, r30
    13e8:	85 32       	cpi	r24, 0x25	; 37
    13ea:	29 f4       	brne	.+10     	; 0x13f6 <vfprintf+0x56>
    13ec:	b6 01       	movw	r22, r12
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fputc>
    13f4:	e7 cf       	rjmp	.-50     	; 0x13c4 <vfprintf+0x24>
    13f6:	91 2c       	mov	r9, r1
    13f8:	21 2c       	mov	r2, r1
    13fa:	31 2c       	mov	r3, r1
    13fc:	ff e1       	ldi	r31, 0x1F	; 31
    13fe:	f3 15       	cp	r31, r3
    1400:	d8 f0       	brcs	.+54     	; 0x1438 <vfprintf+0x98>
    1402:	8b 32       	cpi	r24, 0x2B	; 43
    1404:	79 f0       	breq	.+30     	; 0x1424 <vfprintf+0x84>
    1406:	38 f4       	brcc	.+14     	; 0x1416 <vfprintf+0x76>
    1408:	80 32       	cpi	r24, 0x20	; 32
    140a:	79 f0       	breq	.+30     	; 0x142a <vfprintf+0x8a>
    140c:	83 32       	cpi	r24, 0x23	; 35
    140e:	a1 f4       	brne	.+40     	; 0x1438 <vfprintf+0x98>
    1410:	23 2d       	mov	r18, r3
    1412:	20 61       	ori	r18, 0x10	; 16
    1414:	1d c0       	rjmp	.+58     	; 0x1450 <vfprintf+0xb0>
    1416:	8d 32       	cpi	r24, 0x2D	; 45
    1418:	61 f0       	breq	.+24     	; 0x1432 <vfprintf+0x92>
    141a:	80 33       	cpi	r24, 0x30	; 48
    141c:	69 f4       	brne	.+26     	; 0x1438 <vfprintf+0x98>
    141e:	23 2d       	mov	r18, r3
    1420:	21 60       	ori	r18, 0x01	; 1
    1422:	16 c0       	rjmp	.+44     	; 0x1450 <vfprintf+0xb0>
    1424:	83 2d       	mov	r24, r3
    1426:	82 60       	ori	r24, 0x02	; 2
    1428:	38 2e       	mov	r3, r24
    142a:	e3 2d       	mov	r30, r3
    142c:	e4 60       	ori	r30, 0x04	; 4
    142e:	3e 2e       	mov	r3, r30
    1430:	2a c0       	rjmp	.+84     	; 0x1486 <vfprintf+0xe6>
    1432:	f3 2d       	mov	r31, r3
    1434:	f8 60       	ori	r31, 0x08	; 8
    1436:	1d c0       	rjmp	.+58     	; 0x1472 <vfprintf+0xd2>
    1438:	37 fc       	sbrc	r3, 7
    143a:	2d c0       	rjmp	.+90     	; 0x1496 <vfprintf+0xf6>
    143c:	20 ed       	ldi	r18, 0xD0	; 208
    143e:	28 0f       	add	r18, r24
    1440:	2a 30       	cpi	r18, 0x0A	; 10
    1442:	40 f0       	brcs	.+16     	; 0x1454 <vfprintf+0xb4>
    1444:	8e 32       	cpi	r24, 0x2E	; 46
    1446:	b9 f4       	brne	.+46     	; 0x1476 <vfprintf+0xd6>
    1448:	36 fc       	sbrc	r3, 6
    144a:	81 c1       	rjmp	.+770    	; 0x174e <vfprintf+0x3ae>
    144c:	23 2d       	mov	r18, r3
    144e:	20 64       	ori	r18, 0x40	; 64
    1450:	32 2e       	mov	r3, r18
    1452:	19 c0       	rjmp	.+50     	; 0x1486 <vfprintf+0xe6>
    1454:	36 fe       	sbrs	r3, 6
    1456:	06 c0       	rjmp	.+12     	; 0x1464 <vfprintf+0xc4>
    1458:	8a e0       	ldi	r24, 0x0A	; 10
    145a:	98 9e       	mul	r9, r24
    145c:	20 0d       	add	r18, r0
    145e:	11 24       	eor	r1, r1
    1460:	92 2e       	mov	r9, r18
    1462:	11 c0       	rjmp	.+34     	; 0x1486 <vfprintf+0xe6>
    1464:	ea e0       	ldi	r30, 0x0A	; 10
    1466:	2e 9e       	mul	r2, r30
    1468:	20 0d       	add	r18, r0
    146a:	11 24       	eor	r1, r1
    146c:	22 2e       	mov	r2, r18
    146e:	f3 2d       	mov	r31, r3
    1470:	f0 62       	ori	r31, 0x20	; 32
    1472:	3f 2e       	mov	r3, r31
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <vfprintf+0xe6>
    1476:	8c 36       	cpi	r24, 0x6C	; 108
    1478:	21 f4       	brne	.+8      	; 0x1482 <vfprintf+0xe2>
    147a:	83 2d       	mov	r24, r3
    147c:	80 68       	ori	r24, 0x80	; 128
    147e:	38 2e       	mov	r3, r24
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <vfprintf+0xe6>
    1482:	88 36       	cpi	r24, 0x68	; 104
    1484:	41 f4       	brne	.+16     	; 0x1496 <vfprintf+0xf6>
    1486:	f7 01       	movw	r30, r14
    1488:	93 fd       	sbrc	r25, 3
    148a:	85 91       	lpm	r24, Z+
    148c:	93 ff       	sbrs	r25, 3
    148e:	81 91       	ld	r24, Z+
    1490:	7f 01       	movw	r14, r30
    1492:	81 11       	cpse	r24, r1
    1494:	b3 cf       	rjmp	.-154    	; 0x13fc <vfprintf+0x5c>
    1496:	98 2f       	mov	r25, r24
    1498:	9f 7d       	andi	r25, 0xDF	; 223
    149a:	95 54       	subi	r25, 0x45	; 69
    149c:	93 30       	cpi	r25, 0x03	; 3
    149e:	28 f4       	brcc	.+10     	; 0x14aa <vfprintf+0x10a>
    14a0:	0c 5f       	subi	r16, 0xFC	; 252
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	9f e3       	ldi	r25, 0x3F	; 63
    14a6:	99 83       	std	Y+1, r25	; 0x01
    14a8:	0d c0       	rjmp	.+26     	; 0x14c4 <vfprintf+0x124>
    14aa:	83 36       	cpi	r24, 0x63	; 99
    14ac:	31 f0       	breq	.+12     	; 0x14ba <vfprintf+0x11a>
    14ae:	83 37       	cpi	r24, 0x73	; 115
    14b0:	71 f0       	breq	.+28     	; 0x14ce <vfprintf+0x12e>
    14b2:	83 35       	cpi	r24, 0x53	; 83
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <vfprintf+0x118>
    14b6:	59 c0       	rjmp	.+178    	; 0x156a <vfprintf+0x1ca>
    14b8:	21 c0       	rjmp	.+66     	; 0x14fc <vfprintf+0x15c>
    14ba:	f8 01       	movw	r30, r16
    14bc:	80 81       	ld	r24, Z
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	0e 5f       	subi	r16, 0xFE	; 254
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	88 24       	eor	r8, r8
    14c6:	83 94       	inc	r8
    14c8:	91 2c       	mov	r9, r1
    14ca:	53 01       	movw	r10, r6
    14cc:	13 c0       	rjmp	.+38     	; 0x14f4 <vfprintf+0x154>
    14ce:	28 01       	movw	r4, r16
    14d0:	f2 e0       	ldi	r31, 0x02	; 2
    14d2:	4f 0e       	add	r4, r31
    14d4:	51 1c       	adc	r5, r1
    14d6:	f8 01       	movw	r30, r16
    14d8:	a0 80       	ld	r10, Z
    14da:	b1 80       	ldd	r11, Z+1	; 0x01
    14dc:	36 fe       	sbrs	r3, 6
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <vfprintf+0x146>
    14e0:	69 2d       	mov	r22, r9
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <vfprintf+0x14a>
    14e6:	6f ef       	ldi	r22, 0xFF	; 255
    14e8:	7f ef       	ldi	r23, 0xFF	; 255
    14ea:	c5 01       	movw	r24, r10
    14ec:	0e 94 bc 0b 	call	0x1778	; 0x1778 <strnlen>
    14f0:	4c 01       	movw	r8, r24
    14f2:	82 01       	movw	r16, r4
    14f4:	f3 2d       	mov	r31, r3
    14f6:	ff 77       	andi	r31, 0x7F	; 127
    14f8:	3f 2e       	mov	r3, r31
    14fa:	16 c0       	rjmp	.+44     	; 0x1528 <vfprintf+0x188>
    14fc:	28 01       	movw	r4, r16
    14fe:	22 e0       	ldi	r18, 0x02	; 2
    1500:	42 0e       	add	r4, r18
    1502:	51 1c       	adc	r5, r1
    1504:	f8 01       	movw	r30, r16
    1506:	a0 80       	ld	r10, Z
    1508:	b1 80       	ldd	r11, Z+1	; 0x01
    150a:	36 fe       	sbrs	r3, 6
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <vfprintf+0x174>
    150e:	69 2d       	mov	r22, r9
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <vfprintf+0x178>
    1514:	6f ef       	ldi	r22, 0xFF	; 255
    1516:	7f ef       	ldi	r23, 0xFF	; 255
    1518:	c5 01       	movw	r24, r10
    151a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <strnlen_P>
    151e:	4c 01       	movw	r8, r24
    1520:	f3 2d       	mov	r31, r3
    1522:	f0 68       	ori	r31, 0x80	; 128
    1524:	3f 2e       	mov	r3, r31
    1526:	82 01       	movw	r16, r4
    1528:	33 fc       	sbrc	r3, 3
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <vfprintf+0x1c2>
    152c:	82 2d       	mov	r24, r2
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	88 16       	cp	r8, r24
    1532:	99 06       	cpc	r9, r25
    1534:	b0 f4       	brcc	.+44     	; 0x1562 <vfprintf+0x1c2>
    1536:	b6 01       	movw	r22, r12
    1538:	80 e2       	ldi	r24, 0x20	; 32
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fputc>
    1540:	2a 94       	dec	r2
    1542:	f4 cf       	rjmp	.-24     	; 0x152c <vfprintf+0x18c>
    1544:	f5 01       	movw	r30, r10
    1546:	37 fc       	sbrc	r3, 7
    1548:	85 91       	lpm	r24, Z+
    154a:	37 fe       	sbrs	r3, 7
    154c:	81 91       	ld	r24, Z+
    154e:	5f 01       	movw	r10, r30
    1550:	b6 01       	movw	r22, r12
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fputc>
    1558:	21 10       	cpse	r2, r1
    155a:	2a 94       	dec	r2
    155c:	21 e0       	ldi	r18, 0x01	; 1
    155e:	82 1a       	sub	r8, r18
    1560:	91 08       	sbc	r9, r1
    1562:	81 14       	cp	r8, r1
    1564:	91 04       	cpc	r9, r1
    1566:	71 f7       	brne	.-36     	; 0x1544 <vfprintf+0x1a4>
    1568:	e8 c0       	rjmp	.+464    	; 0x173a <vfprintf+0x39a>
    156a:	84 36       	cpi	r24, 0x64	; 100
    156c:	11 f0       	breq	.+4      	; 0x1572 <vfprintf+0x1d2>
    156e:	89 36       	cpi	r24, 0x69	; 105
    1570:	41 f5       	brne	.+80     	; 0x15c2 <vfprintf+0x222>
    1572:	f8 01       	movw	r30, r16
    1574:	37 fe       	sbrs	r3, 7
    1576:	07 c0       	rjmp	.+14     	; 0x1586 <vfprintf+0x1e6>
    1578:	60 81       	ld	r22, Z
    157a:	71 81       	ldd	r23, Z+1	; 0x01
    157c:	82 81       	ldd	r24, Z+2	; 0x02
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	0c 5f       	subi	r16, 0xFC	; 252
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <vfprintf+0x1f6>
    1586:	60 81       	ld	r22, Z
    1588:	71 81       	ldd	r23, Z+1	; 0x01
    158a:	07 2e       	mov	r0, r23
    158c:	00 0c       	add	r0, r0
    158e:	88 0b       	sbc	r24, r24
    1590:	99 0b       	sbc	r25, r25
    1592:	0e 5f       	subi	r16, 0xFE	; 254
    1594:	1f 4f       	sbci	r17, 0xFF	; 255
    1596:	f3 2d       	mov	r31, r3
    1598:	ff 76       	andi	r31, 0x6F	; 111
    159a:	3f 2e       	mov	r3, r31
    159c:	97 ff       	sbrs	r25, 7
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <vfprintf+0x212>
    15a0:	90 95       	com	r25
    15a2:	80 95       	com	r24
    15a4:	70 95       	com	r23
    15a6:	61 95       	neg	r22
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	8f 4f       	sbci	r24, 0xFF	; 255
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	f0 68       	ori	r31, 0x80	; 128
    15b0:	3f 2e       	mov	r3, r31
    15b2:	2a e0       	ldi	r18, 0x0A	; 10
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	a3 01       	movw	r20, r6
    15b8:	0e 94 13 0c 	call	0x1826	; 0x1826 <__ultoa_invert>
    15bc:	88 2e       	mov	r8, r24
    15be:	86 18       	sub	r8, r6
    15c0:	45 c0       	rjmp	.+138    	; 0x164c <vfprintf+0x2ac>
    15c2:	85 37       	cpi	r24, 0x75	; 117
    15c4:	31 f4       	brne	.+12     	; 0x15d2 <vfprintf+0x232>
    15c6:	23 2d       	mov	r18, r3
    15c8:	2f 7e       	andi	r18, 0xEF	; 239
    15ca:	b2 2e       	mov	r11, r18
    15cc:	2a e0       	ldi	r18, 0x0A	; 10
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	25 c0       	rjmp	.+74     	; 0x161c <vfprintf+0x27c>
    15d2:	93 2d       	mov	r25, r3
    15d4:	99 7f       	andi	r25, 0xF9	; 249
    15d6:	b9 2e       	mov	r11, r25
    15d8:	8f 36       	cpi	r24, 0x6F	; 111
    15da:	c1 f0       	breq	.+48     	; 0x160c <vfprintf+0x26c>
    15dc:	18 f4       	brcc	.+6      	; 0x15e4 <vfprintf+0x244>
    15de:	88 35       	cpi	r24, 0x58	; 88
    15e0:	79 f0       	breq	.+30     	; 0x1600 <vfprintf+0x260>
    15e2:	b5 c0       	rjmp	.+362    	; 0x174e <vfprintf+0x3ae>
    15e4:	80 37       	cpi	r24, 0x70	; 112
    15e6:	19 f0       	breq	.+6      	; 0x15ee <vfprintf+0x24e>
    15e8:	88 37       	cpi	r24, 0x78	; 120
    15ea:	21 f0       	breq	.+8      	; 0x15f4 <vfprintf+0x254>
    15ec:	b0 c0       	rjmp	.+352    	; 0x174e <vfprintf+0x3ae>
    15ee:	e9 2f       	mov	r30, r25
    15f0:	e0 61       	ori	r30, 0x10	; 16
    15f2:	be 2e       	mov	r11, r30
    15f4:	b4 fe       	sbrs	r11, 4
    15f6:	0d c0       	rjmp	.+26     	; 0x1612 <vfprintf+0x272>
    15f8:	fb 2d       	mov	r31, r11
    15fa:	f4 60       	ori	r31, 0x04	; 4
    15fc:	bf 2e       	mov	r11, r31
    15fe:	09 c0       	rjmp	.+18     	; 0x1612 <vfprintf+0x272>
    1600:	34 fe       	sbrs	r3, 4
    1602:	0a c0       	rjmp	.+20     	; 0x1618 <vfprintf+0x278>
    1604:	29 2f       	mov	r18, r25
    1606:	26 60       	ori	r18, 0x06	; 6
    1608:	b2 2e       	mov	r11, r18
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <vfprintf+0x278>
    160c:	28 e0       	ldi	r18, 0x08	; 8
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	05 c0       	rjmp	.+10     	; 0x161c <vfprintf+0x27c>
    1612:	20 e1       	ldi	r18, 0x10	; 16
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	02 c0       	rjmp	.+4      	; 0x161c <vfprintf+0x27c>
    1618:	20 e1       	ldi	r18, 0x10	; 16
    161a:	32 e0       	ldi	r19, 0x02	; 2
    161c:	f8 01       	movw	r30, r16
    161e:	b7 fe       	sbrs	r11, 7
    1620:	07 c0       	rjmp	.+14     	; 0x1630 <vfprintf+0x290>
    1622:	60 81       	ld	r22, Z
    1624:	71 81       	ldd	r23, Z+1	; 0x01
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	0c 5f       	subi	r16, 0xFC	; 252
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	06 c0       	rjmp	.+12     	; 0x163c <vfprintf+0x29c>
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 5f       	subi	r16, 0xFE	; 254
    163a:	1f 4f       	sbci	r17, 0xFF	; 255
    163c:	a3 01       	movw	r20, r6
    163e:	0e 94 13 0c 	call	0x1826	; 0x1826 <__ultoa_invert>
    1642:	88 2e       	mov	r8, r24
    1644:	86 18       	sub	r8, r6
    1646:	fb 2d       	mov	r31, r11
    1648:	ff 77       	andi	r31, 0x7F	; 127
    164a:	3f 2e       	mov	r3, r31
    164c:	36 fe       	sbrs	r3, 6
    164e:	0d c0       	rjmp	.+26     	; 0x166a <vfprintf+0x2ca>
    1650:	23 2d       	mov	r18, r3
    1652:	2e 7f       	andi	r18, 0xFE	; 254
    1654:	a2 2e       	mov	r10, r18
    1656:	89 14       	cp	r8, r9
    1658:	58 f4       	brcc	.+22     	; 0x1670 <vfprintf+0x2d0>
    165a:	34 fe       	sbrs	r3, 4
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <vfprintf+0x2d4>
    165e:	32 fc       	sbrc	r3, 2
    1660:	09 c0       	rjmp	.+18     	; 0x1674 <vfprintf+0x2d4>
    1662:	83 2d       	mov	r24, r3
    1664:	8e 7e       	andi	r24, 0xEE	; 238
    1666:	a8 2e       	mov	r10, r24
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <vfprintf+0x2d4>
    166a:	b8 2c       	mov	r11, r8
    166c:	a3 2c       	mov	r10, r3
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <vfprintf+0x2d6>
    1670:	b8 2c       	mov	r11, r8
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <vfprintf+0x2d6>
    1674:	b9 2c       	mov	r11, r9
    1676:	a4 fe       	sbrs	r10, 4
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <vfprintf+0x2f8>
    167a:	fe 01       	movw	r30, r28
    167c:	e8 0d       	add	r30, r8
    167e:	f1 1d       	adc	r31, r1
    1680:	80 81       	ld	r24, Z
    1682:	80 33       	cpi	r24, 0x30	; 48
    1684:	21 f4       	brne	.+8      	; 0x168e <vfprintf+0x2ee>
    1686:	9a 2d       	mov	r25, r10
    1688:	99 7e       	andi	r25, 0xE9	; 233
    168a:	a9 2e       	mov	r10, r25
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <vfprintf+0x300>
    168e:	a2 fe       	sbrs	r10, 2
    1690:	06 c0       	rjmp	.+12     	; 0x169e <vfprintf+0x2fe>
    1692:	b3 94       	inc	r11
    1694:	b3 94       	inc	r11
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <vfprintf+0x300>
    1698:	8a 2d       	mov	r24, r10
    169a:	86 78       	andi	r24, 0x86	; 134
    169c:	09 f0       	breq	.+2      	; 0x16a0 <vfprintf+0x300>
    169e:	b3 94       	inc	r11
    16a0:	a3 fc       	sbrc	r10, 3
    16a2:	11 c0       	rjmp	.+34     	; 0x16c6 <vfprintf+0x326>
    16a4:	a0 fe       	sbrs	r10, 0
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <vfprintf+0x314>
    16a8:	b2 14       	cp	r11, r2
    16aa:	88 f4       	brcc	.+34     	; 0x16ce <vfprintf+0x32e>
    16ac:	28 0c       	add	r2, r8
    16ae:	92 2c       	mov	r9, r2
    16b0:	9b 18       	sub	r9, r11
    16b2:	0e c0       	rjmp	.+28     	; 0x16d0 <vfprintf+0x330>
    16b4:	b2 14       	cp	r11, r2
    16b6:	60 f4       	brcc	.+24     	; 0x16d0 <vfprintf+0x330>
    16b8:	b6 01       	movw	r22, r12
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fputc>
    16c2:	b3 94       	inc	r11
    16c4:	f7 cf       	rjmp	.-18     	; 0x16b4 <vfprintf+0x314>
    16c6:	b2 14       	cp	r11, r2
    16c8:	18 f4       	brcc	.+6      	; 0x16d0 <vfprintf+0x330>
    16ca:	2b 18       	sub	r2, r11
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <vfprintf+0x332>
    16ce:	98 2c       	mov	r9, r8
    16d0:	21 2c       	mov	r2, r1
    16d2:	a4 fe       	sbrs	r10, 4
    16d4:	10 c0       	rjmp	.+32     	; 0x16f6 <vfprintf+0x356>
    16d6:	b6 01       	movw	r22, r12
    16d8:	80 e3       	ldi	r24, 0x30	; 48
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fputc>
    16e0:	a2 fe       	sbrs	r10, 2
    16e2:	17 c0       	rjmp	.+46     	; 0x1712 <vfprintf+0x372>
    16e4:	a1 fc       	sbrc	r10, 1
    16e6:	03 c0       	rjmp	.+6      	; 0x16ee <vfprintf+0x34e>
    16e8:	88 e7       	ldi	r24, 0x78	; 120
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <vfprintf+0x352>
    16ee:	88 e5       	ldi	r24, 0x58	; 88
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	b6 01       	movw	r22, r12
    16f4:	0c c0       	rjmp	.+24     	; 0x170e <vfprintf+0x36e>
    16f6:	8a 2d       	mov	r24, r10
    16f8:	86 78       	andi	r24, 0x86	; 134
    16fa:	59 f0       	breq	.+22     	; 0x1712 <vfprintf+0x372>
    16fc:	a1 fe       	sbrs	r10, 1
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <vfprintf+0x364>
    1700:	8b e2       	ldi	r24, 0x2B	; 43
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <vfprintf+0x366>
    1704:	80 e2       	ldi	r24, 0x20	; 32
    1706:	a7 fc       	sbrc	r10, 7
    1708:	8d e2       	ldi	r24, 0x2D	; 45
    170a:	b6 01       	movw	r22, r12
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fputc>
    1712:	89 14       	cp	r8, r9
    1714:	38 f4       	brcc	.+14     	; 0x1724 <vfprintf+0x384>
    1716:	b6 01       	movw	r22, r12
    1718:	80 e3       	ldi	r24, 0x30	; 48
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fputc>
    1720:	9a 94       	dec	r9
    1722:	f7 cf       	rjmp	.-18     	; 0x1712 <vfprintf+0x372>
    1724:	8a 94       	dec	r8
    1726:	f3 01       	movw	r30, r6
    1728:	e8 0d       	add	r30, r8
    172a:	f1 1d       	adc	r31, r1
    172c:	80 81       	ld	r24, Z
    172e:	b6 01       	movw	r22, r12
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fputc>
    1736:	81 10       	cpse	r8, r1
    1738:	f5 cf       	rjmp	.-22     	; 0x1724 <vfprintf+0x384>
    173a:	22 20       	and	r2, r2
    173c:	09 f4       	brne	.+2      	; 0x1740 <vfprintf+0x3a0>
    173e:	42 ce       	rjmp	.-892    	; 0x13c4 <vfprintf+0x24>
    1740:	b6 01       	movw	r22, r12
    1742:	80 e2       	ldi	r24, 0x20	; 32
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fputc>
    174a:	2a 94       	dec	r2
    174c:	f6 cf       	rjmp	.-20     	; 0x173a <vfprintf+0x39a>
    174e:	f6 01       	movw	r30, r12
    1750:	86 81       	ldd	r24, Z+6	; 0x06
    1752:	97 81       	ldd	r25, Z+7	; 0x07
    1754:	02 c0       	rjmp	.+4      	; 0x175a <vfprintf+0x3ba>
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	9f ef       	ldi	r25, 0xFF	; 255
    175a:	2b 96       	adiw	r28, 0x0b	; 11
    175c:	e2 e1       	ldi	r30, 0x12	; 18
    175e:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__epilogue_restores__>

00001762 <strnlen_P>:
    1762:	fc 01       	movw	r30, r24
    1764:	05 90       	lpm	r0, Z+
    1766:	61 50       	subi	r22, 0x01	; 1
    1768:	70 40       	sbci	r23, 0x00	; 0
    176a:	01 10       	cpse	r0, r1
    176c:	d8 f7       	brcc	.-10     	; 0x1764 <strnlen_P+0x2>
    176e:	80 95       	com	r24
    1770:	90 95       	com	r25
    1772:	8e 0f       	add	r24, r30
    1774:	9f 1f       	adc	r25, r31
    1776:	08 95       	ret

00001778 <strnlen>:
    1778:	fc 01       	movw	r30, r24
    177a:	61 50       	subi	r22, 0x01	; 1
    177c:	70 40       	sbci	r23, 0x00	; 0
    177e:	01 90       	ld	r0, Z+
    1780:	01 10       	cpse	r0, r1
    1782:	d8 f7       	brcc	.-10     	; 0x177a <strnlen+0x2>
    1784:	80 95       	com	r24
    1786:	90 95       	com	r25
    1788:	8e 0f       	add	r24, r30
    178a:	9f 1f       	adc	r25, r31
    178c:	08 95       	ret

0000178e <strrev>:
    178e:	dc 01       	movw	r26, r24
    1790:	fc 01       	movw	r30, r24
    1792:	67 2f       	mov	r22, r23
    1794:	71 91       	ld	r23, Z+
    1796:	77 23       	and	r23, r23
    1798:	e1 f7       	brne	.-8      	; 0x1792 <strrev+0x4>
    179a:	32 97       	sbiw	r30, 0x02	; 2
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <strrev+0x18>
    179e:	7c 91       	ld	r23, X
    17a0:	6d 93       	st	X+, r22
    17a2:	70 83       	st	Z, r23
    17a4:	62 91       	ld	r22, -Z
    17a6:	ae 17       	cp	r26, r30
    17a8:	bf 07       	cpc	r27, r31
    17aa:	c8 f3       	brcs	.-14     	; 0x179e <strrev+0x10>
    17ac:	08 95       	ret

000017ae <fputc>:
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	fb 01       	movw	r30, r22
    17b8:	23 81       	ldd	r18, Z+3	; 0x03
    17ba:	21 fd       	sbrc	r18, 1
    17bc:	03 c0       	rjmp	.+6      	; 0x17c4 <fputc+0x16>
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	9f ef       	ldi	r25, 0xFF	; 255
    17c2:	2c c0       	rjmp	.+88     	; 0x181c <fputc+0x6e>
    17c4:	22 ff       	sbrs	r18, 2
    17c6:	16 c0       	rjmp	.+44     	; 0x17f4 <fputc+0x46>
    17c8:	46 81       	ldd	r20, Z+6	; 0x06
    17ca:	57 81       	ldd	r21, Z+7	; 0x07
    17cc:	24 81       	ldd	r18, Z+4	; 0x04
    17ce:	35 81       	ldd	r19, Z+5	; 0x05
    17d0:	42 17       	cp	r20, r18
    17d2:	53 07       	cpc	r21, r19
    17d4:	44 f4       	brge	.+16     	; 0x17e6 <fputc+0x38>
    17d6:	a0 81       	ld	r26, Z
    17d8:	b1 81       	ldd	r27, Z+1	; 0x01
    17da:	9d 01       	movw	r18, r26
    17dc:	2f 5f       	subi	r18, 0xFF	; 255
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	31 83       	std	Z+1, r19	; 0x01
    17e2:	20 83       	st	Z, r18
    17e4:	8c 93       	st	X, r24
    17e6:	26 81       	ldd	r18, Z+6	; 0x06
    17e8:	37 81       	ldd	r19, Z+7	; 0x07
    17ea:	2f 5f       	subi	r18, 0xFF	; 255
    17ec:	3f 4f       	sbci	r19, 0xFF	; 255
    17ee:	37 83       	std	Z+7, r19	; 0x07
    17f0:	26 83       	std	Z+6, r18	; 0x06
    17f2:	14 c0       	rjmp	.+40     	; 0x181c <fputc+0x6e>
    17f4:	8b 01       	movw	r16, r22
    17f6:	ec 01       	movw	r28, r24
    17f8:	fb 01       	movw	r30, r22
    17fa:	00 84       	ldd	r0, Z+8	; 0x08
    17fc:	f1 85       	ldd	r31, Z+9	; 0x09
    17fe:	e0 2d       	mov	r30, r0
    1800:	09 95       	icall
    1802:	89 2b       	or	r24, r25
    1804:	e1 f6       	brne	.-72     	; 0x17be <fputc+0x10>
    1806:	d8 01       	movw	r26, r16
    1808:	16 96       	adiw	r26, 0x06	; 6
    180a:	8d 91       	ld	r24, X+
    180c:	9c 91       	ld	r25, X
    180e:	17 97       	sbiw	r26, 0x07	; 7
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	17 96       	adiw	r26, 0x07	; 7
    1814:	9c 93       	st	X, r25
    1816:	8e 93       	st	-X, r24
    1818:	16 97       	sbiw	r26, 0x06	; 6
    181a:	ce 01       	movw	r24, r28
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	08 95       	ret

00001826 <__ultoa_invert>:
    1826:	fa 01       	movw	r30, r20
    1828:	aa 27       	eor	r26, r26
    182a:	28 30       	cpi	r18, 0x08	; 8
    182c:	51 f1       	breq	.+84     	; 0x1882 <__ultoa_invert+0x5c>
    182e:	20 31       	cpi	r18, 0x10	; 16
    1830:	81 f1       	breq	.+96     	; 0x1892 <__ultoa_invert+0x6c>
    1832:	e8 94       	clt
    1834:	6f 93       	push	r22
    1836:	6e 7f       	andi	r22, 0xFE	; 254
    1838:	6e 5f       	subi	r22, 0xFE	; 254
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	8f 4f       	sbci	r24, 0xFF	; 255
    183e:	9f 4f       	sbci	r25, 0xFF	; 255
    1840:	af 4f       	sbci	r26, 0xFF	; 255
    1842:	b1 e0       	ldi	r27, 0x01	; 1
    1844:	3e d0       	rcall	.+124    	; 0x18c2 <__ultoa_invert+0x9c>
    1846:	b4 e0       	ldi	r27, 0x04	; 4
    1848:	3c d0       	rcall	.+120    	; 0x18c2 <__ultoa_invert+0x9c>
    184a:	67 0f       	add	r22, r23
    184c:	78 1f       	adc	r23, r24
    184e:	89 1f       	adc	r24, r25
    1850:	9a 1f       	adc	r25, r26
    1852:	a1 1d       	adc	r26, r1
    1854:	68 0f       	add	r22, r24
    1856:	79 1f       	adc	r23, r25
    1858:	8a 1f       	adc	r24, r26
    185a:	91 1d       	adc	r25, r1
    185c:	a1 1d       	adc	r26, r1
    185e:	6a 0f       	add	r22, r26
    1860:	71 1d       	adc	r23, r1
    1862:	81 1d       	adc	r24, r1
    1864:	91 1d       	adc	r25, r1
    1866:	a1 1d       	adc	r26, r1
    1868:	20 d0       	rcall	.+64     	; 0x18aa <__ultoa_invert+0x84>
    186a:	09 f4       	brne	.+2      	; 0x186e <__ultoa_invert+0x48>
    186c:	68 94       	set
    186e:	3f 91       	pop	r19
    1870:	2a e0       	ldi	r18, 0x0A	; 10
    1872:	26 9f       	mul	r18, r22
    1874:	11 24       	eor	r1, r1
    1876:	30 19       	sub	r19, r0
    1878:	30 5d       	subi	r19, 0xD0	; 208
    187a:	31 93       	st	Z+, r19
    187c:	de f6       	brtc	.-74     	; 0x1834 <__ultoa_invert+0xe>
    187e:	cf 01       	movw	r24, r30
    1880:	08 95       	ret
    1882:	46 2f       	mov	r20, r22
    1884:	47 70       	andi	r20, 0x07	; 7
    1886:	40 5d       	subi	r20, 0xD0	; 208
    1888:	41 93       	st	Z+, r20
    188a:	b3 e0       	ldi	r27, 0x03	; 3
    188c:	0f d0       	rcall	.+30     	; 0x18ac <__ultoa_invert+0x86>
    188e:	c9 f7       	brne	.-14     	; 0x1882 <__ultoa_invert+0x5c>
    1890:	f6 cf       	rjmp	.-20     	; 0x187e <__ultoa_invert+0x58>
    1892:	46 2f       	mov	r20, r22
    1894:	4f 70       	andi	r20, 0x0F	; 15
    1896:	40 5d       	subi	r20, 0xD0	; 208
    1898:	4a 33       	cpi	r20, 0x3A	; 58
    189a:	18 f0       	brcs	.+6      	; 0x18a2 <__ultoa_invert+0x7c>
    189c:	49 5d       	subi	r20, 0xD9	; 217
    189e:	31 fd       	sbrc	r19, 1
    18a0:	40 52       	subi	r20, 0x20	; 32
    18a2:	41 93       	st	Z+, r20
    18a4:	02 d0       	rcall	.+4      	; 0x18aa <__ultoa_invert+0x84>
    18a6:	a9 f7       	brne	.-22     	; 0x1892 <__ultoa_invert+0x6c>
    18a8:	ea cf       	rjmp	.-44     	; 0x187e <__ultoa_invert+0x58>
    18aa:	b4 e0       	ldi	r27, 0x04	; 4
    18ac:	a6 95       	lsr	r26
    18ae:	97 95       	ror	r25
    18b0:	87 95       	ror	r24
    18b2:	77 95       	ror	r23
    18b4:	67 95       	ror	r22
    18b6:	ba 95       	dec	r27
    18b8:	c9 f7       	brne	.-14     	; 0x18ac <__ultoa_invert+0x86>
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	61 05       	cpc	r22, r1
    18be:	71 05       	cpc	r23, r1
    18c0:	08 95       	ret
    18c2:	9b 01       	movw	r18, r22
    18c4:	ac 01       	movw	r20, r24
    18c6:	0a 2e       	mov	r0, r26
    18c8:	06 94       	lsr	r0
    18ca:	57 95       	ror	r21
    18cc:	47 95       	ror	r20
    18ce:	37 95       	ror	r19
    18d0:	27 95       	ror	r18
    18d2:	ba 95       	dec	r27
    18d4:	c9 f7       	brne	.-14     	; 0x18c8 <__ultoa_invert+0xa2>
    18d6:	62 0f       	add	r22, r18
    18d8:	73 1f       	adc	r23, r19
    18da:	84 1f       	adc	r24, r20
    18dc:	95 1f       	adc	r25, r21
    18de:	a0 1d       	adc	r26, r0
    18e0:	08 95       	ret

000018e2 <__prologue_saves__>:
    18e2:	2f 92       	push	r2
    18e4:	3f 92       	push	r3
    18e6:	4f 92       	push	r4
    18e8:	5f 92       	push	r5
    18ea:	6f 92       	push	r6
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	ca 1b       	sub	r28, r26
    190c:	db 0b       	sbc	r29, r27
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	09 94       	ijmp

0000191a <__epilogue_restores__>:
    191a:	2a 88       	ldd	r2, Y+18	; 0x12
    191c:	39 88       	ldd	r3, Y+17	; 0x11
    191e:	48 88       	ldd	r4, Y+16	; 0x10
    1920:	5f 84       	ldd	r5, Y+15	; 0x0f
    1922:	6e 84       	ldd	r6, Y+14	; 0x0e
    1924:	7d 84       	ldd	r7, Y+13	; 0x0d
    1926:	8c 84       	ldd	r8, Y+12	; 0x0c
    1928:	9b 84       	ldd	r9, Y+11	; 0x0b
    192a:	aa 84       	ldd	r10, Y+10	; 0x0a
    192c:	b9 84       	ldd	r11, Y+9	; 0x09
    192e:	c8 84       	ldd	r12, Y+8	; 0x08
    1930:	df 80       	ldd	r13, Y+7	; 0x07
    1932:	ee 80       	ldd	r14, Y+6	; 0x06
    1934:	fd 80       	ldd	r15, Y+5	; 0x05
    1936:	0c 81       	ldd	r16, Y+4	; 0x04
    1938:	1b 81       	ldd	r17, Y+3	; 0x03
    193a:	aa 81       	ldd	r26, Y+2	; 0x02
    193c:	b9 81       	ldd	r27, Y+1	; 0x01
    193e:	ce 0f       	add	r28, r30
    1940:	d1 1d       	adc	r29, r1
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	ed 01       	movw	r28, r26
    194e:	08 95       	ret

00001950 <_exit>:
    1950:	f8 94       	cli

00001952 <__stop_program>:
    1952:	ff cf       	rjmp	.-2      	; 0x1952 <__stop_program>
