
ece295_I2C_tutorial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00000d8e  00000e22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800206  00800206  00000f28  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000118c  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b4  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d5  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000581  00000000  00000000  00003528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099e  00000000  00000000  00003aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00004447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee e8       	ldi	r30, 0x8E	; 142
  90:	fd e0       	ldi	r31, 0x0D	; 13
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a6 e0       	ldi	r26, 0x06	; 6
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a5 37       	cpi	r26, 0x75	; 117
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  b2:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <I2Cinit>:
  ba:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  be:	08 95       	ret

000000c0 <I2Cstart>:
  c0:	84 ea       	ldi	r24, 0xA4	; 164
  c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ca:	88 23       	and	r24, r24
  cc:	e4 f7       	brge	.-8      	; 0xc6 <I2Cstart+0x6>
  ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d2:	88 7f       	andi	r24, 0xF8	; 248
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	41 f0       	breq	.+16     	; 0xe8 <I2Cstart+0x28>
  d8:	88 ec       	ldi	r24, 0xC8	; 200
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	9f 93       	push	r25
  de:	8f 93       	push	r24
  e0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <printf>
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	08 95       	ret

000000ea <I2Cstop>:
  ea:	84 e9       	ldi	r24, 0x94	; 148
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f0:	08 95       	ret

000000f2 <I2Cwrite>:
  f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  f6:	84 e8       	ldi	r24, 0x84	; 132
  f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 100:	88 23       	and	r24, r24
 102:	e4 f7       	brge	.-8      	; 0xfc <I2Cwrite+0xa>
 104:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 108:	88 7f       	andi	r24, 0xF8	; 248
 10a:	80 32       	cpi	r24, 0x20	; 32
 10c:	41 f0       	breq	.+16     	; 0x11e <I2Cwrite+0x2c>
 10e:	81 ee       	ldi	r24, 0xE1	; 225
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	9f 93       	push	r25
 114:	8f 93       	push	r24
 116:	0e 94 d7 03 	call	0x7ae	; 0x7ae <printf>
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	08 95       	ret

00000120 <I2Csendcmd>:
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	d8 2f       	mov	r29, r24
 126:	c6 2f       	mov	r28, r22
 128:	0e 94 60 00 	call	0xc0	; 0xc0 <I2Cstart>
 12c:	8d 2f       	mov	r24, r29
 12e:	0e 94 79 00 	call	0xf2	; 0xf2 <I2Cwrite>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 79 00 	call	0xf2	; 0xf2 <I2Cwrite>
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 79 00 	call	0xf2	; 0xf2 <I2Cwrite>
 13e:	0e 94 75 00 	call	0xea	; 0xea <I2Cstop>
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <I2Csenddatum>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	d8 2f       	mov	r29, r24
 14e:	c6 2f       	mov	r28, r22
 150:	0e 94 60 00 	call	0xc0	; 0xc0 <I2Cstart>
 154:	8d 2f       	mov	r24, r29
 156:	0e 94 79 00 	call	0xf2	; 0xf2 <I2Cwrite>
 15a:	80 e4       	ldi	r24, 0x40	; 64
 15c:	0e 94 79 00 	call	0xf2	; 0xf2 <I2Cwrite>
 160:	8c 2f       	mov	r24, r28
 162:	0e 94 79 00 	call	0xf2	; 0xf2 <I2Cwrite>
 166:	0e 94 75 00 	call	0xea	; 0xea <I2Cstop>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <screen_write_string>:
int TXEN = FALSE;

int UPDATE_LCD = TRUE;

void screen_write_string(char string_to_write[], int line_num)
{
 170:	af 92       	push	r10
 172:	bf 92       	push	r11
 174:	cf 92       	push	r12
 176:	df 92       	push	r13
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	6c 01       	movw	r12, r24
 186:	b6 2e       	mov	r11, r22
 188:	a7 2e       	mov	r10, r23
	int letter=0;

	I2Csendcmd(SCREEN_ADDR, line_num);
 18a:	88 e7       	ldi	r24, 0x78	; 120
 18c:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	int current_line = line_num;
 190:	eb 2c       	mov	r14, r11
 192:	fa 2c       	mov	r15, r10
	
	for(letter = 0; string_to_write[letter] != 0; letter++)	{
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	21 c0       	rjmp	.+66     	; 0x1dc <screen_write_string+0x6c>
		if ((letter != 0) && (letter % LINE_LENGTH == 0))
 19a:	20 97       	sbiw	r28, 0x00	; 0
 19c:	c9 f0       	breq	.+50     	; 0x1d0 <screen_write_string+0x60>
 19e:	ce 01       	movw	r24, r28
 1a0:	6a e0       	ldi	r22, 0x0A	; 10
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	0e 94 4e 03 	call	0x69c	; 0x69c <__divmodhi4>
 1a8:	89 2b       	or	r24, r25
 1aa:	91 f4       	brne	.+36     	; 0x1d0 <screen_write_string+0x60>
		{
			if (current_line == COMMAND_SET_CURSOR_LINE_4){
 1ac:	80 ee       	ldi	r24, 0xE0	; 224
 1ae:	e8 16       	cp	r14, r24
 1b0:	f1 04       	cpc	r15, r1
 1b2:	39 f4       	brne	.+14     	; 0x1c2 <screen_write_string+0x52>
				current_line = line_num;// We've gone past the end of the line, go to the next one
				I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	88 e7       	ldi	r24, 0x78	; 120
 1b8:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	
	for(letter = 0; string_to_write[letter] != 0; letter++)	{
		if ((letter != 0) && (letter % LINE_LENGTH == 0))
		{
			if (current_line == COMMAND_SET_CURSOR_LINE_4){
				current_line = line_num;// We've gone past the end of the line, go to the next one
 1bc:	eb 2c       	mov	r14, r11
 1be:	fa 2c       	mov	r15, r10
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <screen_write_string+0x58>
				I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
			}
			else
			current_line = current_line+0x20;
 1c2:	e0 e2       	ldi	r30, 0x20	; 32
 1c4:	ee 0e       	add	r14, r30
 1c6:	f1 1c       	adc	r15, r1
			I2Csendcmd(SCREEN_ADDR, current_line); // We've gone past the end of the line, go to the next one
 1c8:	6e 2d       	mov	r22, r14
 1ca:	88 e7       	ldi	r24, 0x78	; 120
 1cc:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
		}
		I2Csenddatum(SCREEN_ADDR, string_to_write[letter]);
 1d0:	f8 01       	movw	r30, r16
 1d2:	60 81       	ld	r22, Z
 1d4:	88 e7       	ldi	r24, 0x78	; 120
 1d6:	0e 94 a4 00 	call	0x148	; 0x148 <I2Csenddatum>
	int letter=0;

	I2Csendcmd(SCREEN_ADDR, line_num);
	int current_line = line_num;
	
	for(letter = 0; string_to_write[letter] != 0; letter++)	{
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	86 01       	movw	r16, r12
 1de:	0c 0f       	add	r16, r28
 1e0:	1d 1f       	adc	r17, r29
 1e2:	f8 01       	movw	r30, r16
 1e4:	80 81       	ld	r24, Z
 1e6:	81 11       	cpse	r24, r1
 1e8:	d8 cf       	rjmp	.-80     	; 0x19a <screen_write_string+0x2a>
			current_line = current_line+0x20;
			I2Csendcmd(SCREEN_ADDR, current_line); // We've gone past the end of the line, go to the next one
		}
		I2Csenddatum(SCREEN_ADDR, string_to_write[letter]);
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	bf 90       	pop	r11
 1fc:	af 90       	pop	r10
 1fe:	08 95       	ret

00000200 <getInputChar>:

int getInputChar(int row, int col){
	if (row == ROW1){
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	91 05       	cpc	r25, r1
 204:	99 f4       	brne	.+38     	; 0x22c <getInputChar+0x2c>
		if(col == COL1){
 206:	61 30       	cpi	r22, 0x01	; 1
 208:	71 05       	cpc	r23, r1
 20a:	09 f4       	brne	.+2      	; 0x20e <getInputChar+0xe>
 20c:	44 c0       	rjmp	.+136    	; 0x296 <getInputChar+0x96>
			return 1;
		}
		else if(col == COL2){
 20e:	62 30       	cpi	r22, 0x02	; 2
 210:	71 05       	cpc	r23, r1
 212:	09 f4       	brne	.+2      	; 0x216 <getInputChar+0x16>
 214:	43 c0       	rjmp	.+134    	; 0x29c <getInputChar+0x9c>
			return 2;
		}
		else if(col == COL3){
 216:	64 30       	cpi	r22, 0x04	; 4
 218:	71 05       	cpc	r23, r1
 21a:	09 f4       	brne	.+2      	; 0x21e <getInputChar+0x1e>
 21c:	42 c0       	rjmp	.+132    	; 0x2a2 <getInputChar+0xa2>
			return 3;
		}
		else if(col == COL4){
 21e:	68 30       	cpi	r22, 0x08	; 8
 220:	71 05       	cpc	r23, r1
 222:	09 f0       	breq	.+2      	; 0x226 <getInputChar+0x26>
 224:	41 c0       	rjmp	.+130    	; 0x2a8 <getInputChar+0xa8>
			return KEY_FREQSEL;
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	08 95       	ret
		}
		else {
			return KEY_UNKNOWN;
		}
	}
	else if (row == ROW2){
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	91 05       	cpc	r25, r1
 230:	79 f4       	brne	.+30     	; 0x250 <getInputChar+0x50>
		if(col == COL1){
 232:	61 30       	cpi	r22, 0x01	; 1
 234:	71 05       	cpc	r23, r1
 236:	d9 f1       	breq	.+118    	; 0x2ae <getInputChar+0xae>
			return 4;
		}
		else if(col == COL2){
 238:	62 30       	cpi	r22, 0x02	; 2
 23a:	71 05       	cpc	r23, r1
 23c:	d9 f1       	breq	.+118    	; 0x2b4 <getInputChar+0xb4>
			return 5;
		}
		else if(col == COL3){
 23e:	64 30       	cpi	r22, 0x04	; 4
 240:	71 05       	cpc	r23, r1
 242:	d9 f1       	breq	.+118    	; 0x2ba <getInputChar+0xba>
			return 6;
		}
		else if(col == COL4){
 244:	68 30       	cpi	r22, 0x08	; 8
 246:	71 05       	cpc	r23, r1
 248:	d9 f5       	brne	.+118    	; 0x2c0 <getInputChar+0xc0>
			return KEY_TOGGLE;
 24a:	8b e0       	ldi	r24, 0x0B	; 11
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	08 95       	ret
		}
		else {
			return KEY_UNKNOWN;
		}
	}
	else if (row == ROW3){
 250:	84 30       	cpi	r24, 0x04	; 4
 252:	91 05       	cpc	r25, r1
 254:	79 f4       	brne	.+30     	; 0x274 <getInputChar+0x74>
		if(col == COL1){
 256:	61 30       	cpi	r22, 0x01	; 1
 258:	71 05       	cpc	r23, r1
 25a:	a9 f1       	breq	.+106    	; 0x2c6 <getInputChar+0xc6>
			return 7;
		}
		else if(col == COL2){
 25c:	62 30       	cpi	r22, 0x02	; 2
 25e:	71 05       	cpc	r23, r1
 260:	a9 f1       	breq	.+106    	; 0x2cc <getInputChar+0xcc>
			return 8;
		}
		else if(col == COL3){
 262:	64 30       	cpi	r22, 0x04	; 4
 264:	71 05       	cpc	r23, r1
 266:	a9 f1       	breq	.+106    	; 0x2d2 <getInputChar+0xd2>
			return 9;
		}
		else if(col == COL4){
 268:	68 30       	cpi	r22, 0x08	; 8
 26a:	71 05       	cpc	r23, r1
 26c:	a9 f5       	brne	.+106    	; 0x2d8 <getInputChar+0xd8>
			return KEY_ENTER;
 26e:	8c e0       	ldi	r24, 0x0C	; 12
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	08 95       	ret
		}
		else {
			return KEY_UNKNOWN;
		}
	}
	else if (row == ROW4){
 274:	08 97       	sbiw	r24, 0x08	; 8
 276:	99 f5       	brne	.+102    	; 0x2de <getInputChar+0xde>
		if(col == COL1){
 278:	61 30       	cpi	r22, 0x01	; 1
 27a:	71 05       	cpc	r23, r1
 27c:	99 f1       	breq	.+102    	; 0x2e4 <getInputChar+0xe4>
			return KEY_ASTERISK;
		}
		else if(col == COL2){
 27e:	62 30       	cpi	r22, 0x02	; 2
 280:	71 05       	cpc	r23, r1
 282:	99 f1       	breq	.+102    	; 0x2ea <getInputChar+0xea>
			return 0;
		}
		else if(col == COL3){
 284:	64 30       	cpi	r22, 0x04	; 4
 286:	71 05       	cpc	r23, r1
 288:	99 f1       	breq	.+102    	; 0x2f0 <getInputChar+0xf0>
			return KEY_HASHTAG;
		}
		else if(col == COL4){
 28a:	68 30       	cpi	r22, 0x08	; 8
 28c:	71 05       	cpc	r23, r1
 28e:	99 f5       	brne	.+102    	; 0x2f6 <getInputChar+0xf6>
			return KEY_CANCEL;
 290:	8d e0       	ldi	r24, 0x0D	; 13
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	08 95       	ret
}

int getInputChar(int row, int col){
	if (row == ROW1){
		if(col == COL1){
			return 1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	08 95       	ret
		}
		else if(col == COL2){
			return 2;
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	08 95       	ret
		}
		else if(col == COL3){
			return 3;
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	08 95       	ret
		}
		else if(col == COL4){
			return KEY_FREQSEL;
		}
		else {
			return KEY_UNKNOWN;
 2a8:	80 e1       	ldi	r24, 0x10	; 16
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	08 95       	ret
		}
	}
	else if (row == ROW2){
		if(col == COL1){
			return 4;
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	08 95       	ret
		}
		else if(col == COL2){
			return 5;
 2b4:	85 e0       	ldi	r24, 0x05	; 5
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	08 95       	ret
		}
		else if(col == COL3){
			return 6;
 2ba:	86 e0       	ldi	r24, 0x06	; 6
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	08 95       	ret
		}
		else if(col == COL4){
			return KEY_TOGGLE;
		}
		else {
			return KEY_UNKNOWN;
 2c0:	80 e1       	ldi	r24, 0x10	; 16
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	08 95       	ret
		}
	}
	else if (row == ROW3){
		if(col == COL1){
			return 7;
 2c6:	87 e0       	ldi	r24, 0x07	; 7
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	08 95       	ret
		}
		else if(col == COL2){
			return 8;
 2cc:	88 e0       	ldi	r24, 0x08	; 8
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	08 95       	ret
		}
		else if(col == COL3){
			return 9;
 2d2:	89 e0       	ldi	r24, 0x09	; 9
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	08 95       	ret
		}
		else if(col == COL4){
			return KEY_ENTER;
		}
		else {
			return KEY_UNKNOWN;
 2d8:	80 e1       	ldi	r24, 0x10	; 16
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	08 95       	ret
		else {
			return KEY_UNKNOWN;
		}
	}
	else {
		return KEY_UNKNOWN;
 2de:	80 e1       	ldi	r24, 0x10	; 16
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	08 95       	ret
			return KEY_UNKNOWN;
		}
	}
	else if (row == ROW4){
		if(col == COL1){
			return KEY_ASTERISK;
 2e4:	8f e0       	ldi	r24, 0x0F	; 15
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	08 95       	ret
		}
		else if(col == COL2){
			return 0;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret
		}
		else if(col == COL3){
			return KEY_HASHTAG;
 2f0:	8e e0       	ldi	r24, 0x0E	; 14
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	08 95       	ret
		}
		else if(col == COL4){
			return KEY_CANCEL;
		}
		else {
			return KEY_UNKNOWN;
 2f6:	80 e1       	ldi	r24, 0x10	; 16
 2f8:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return KEY_UNKNOWN;
	}

}
 2fa:	08 95       	ret

000002fc <main>:

int main(void)
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	c6 5c       	subi	r28, 0xC6	; 198
 306:	d1 09       	sbc	r29, r1
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
	//LCD Part
	DDRA = 0xff; //PortA as output (only need PA0 for display)
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	8f e0       	ldi	r24, 0x0F	; 15
 318:	97 e2       	ldi	r25, 0x27	; 39
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x1e>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x24>
 320:	00 00       	nop
	
	_delay_ms(5);
	PORTA = PORTA | (0<<PA0); // turn off
 322:	82 b1       	in	r24, 0x02	; 2
 324:	82 b9       	out	0x02, r24	; 2
 326:	9f ef       	ldi	r25, 0xFF	; 255
 328:	a1 ee       	ldi	r26, 0xE1	; 225
 32a:	b4 e0       	ldi	r27, 0x04	; 4
 32c:	91 50       	subi	r25, 0x01	; 1
 32e:	a0 40       	sbci	r26, 0x00	; 0
 330:	b0 40       	sbci	r27, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0x30>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x3a>
 336:	00 00       	nop
	_delay_ms(200);
	PORTA = PORTA | (1<<PA0); // turn on display
 338:	82 b1       	in	r24, 0x02	; 2
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	82 b9       	out	0x02, r24	; 2
 33e:	8f e0       	ldi	r24, 0x0F	; 15
 340:	97 e2       	ldi	r25, 0x27	; 39
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0x46>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x4c>
 348:	00 00       	nop
	_delay_ms(5);
	
	//Set up I2C
	I2Cinit();
 34a:	0e 94 5d 00 	call	0xba	; 0xba <I2Cinit>
	//I2Cstart();
	
	//Initialize display
	I2Csendcmd(SCREEN_ADDR, 0x01); // clear display
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	88 e7       	ldi	r24, 0x78	; 120
 352:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x3A);
 356:	6a e3       	ldi	r22, 0x3A	; 58
 358:	88 e7       	ldi	r24, 0x78	; 120
 35a:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x09);
 35e:	69 e0       	ldi	r22, 0x09	; 9
 360:	88 e7       	ldi	r24, 0x78	; 120
 362:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x06);
 366:	66 e0       	ldi	r22, 0x06	; 6
 368:	88 e7       	ldi	r24, 0x78	; 120
 36a:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x1E);
 36e:	6e e1       	ldi	r22, 0x1E	; 30
 370:	88 e7       	ldi	r24, 0x78	; 120
 372:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x39);
 376:	69 e3       	ldi	r22, 0x39	; 57
 378:	88 e7       	ldi	r24, 0x78	; 120
 37a:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x1B);
 37e:	6b e1       	ldi	r22, 0x1B	; 27
 380:	88 e7       	ldi	r24, 0x78	; 120
 382:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x6E);
 386:	6e e6       	ldi	r22, 0x6E	; 110
 388:	88 e7       	ldi	r24, 0x78	; 120
 38a:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x57);
 38e:	67 e5       	ldi	r22, 0x57	; 87
 390:	88 e7       	ldi	r24, 0x78	; 120
 392:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x7A);
 396:	6a e7       	ldi	r22, 0x7A	; 122
 398:	88 e7       	ldi	r24, 0x78	; 120
 39a:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x38);
 39e:	68 e3       	ldi	r22, 0x38	; 56
 3a0:	88 e7       	ldi	r24, 0x78	; 120
 3a2:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x0F);
 3a6:	6f e0       	ldi	r22, 0x0F	; 15
 3a8:	88 e7       	ldi	r24, 0x78	; 120
 3aa:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, 0x01); // clear display
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	88 e7       	ldi	r24, 0x78	; 120
 3b2:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
	
	
	
	//Keypad Part
		DDRB = 0xf0; //Set ports B 4-7 as output, 0-3 as input
 3b6:	80 ef       	ldi	r24, 0xF0	; 240
 3b8:	84 b9       	out	0x04, r24	; 4
		DDRD = 0x3c; //Set port D as output for test LED
 3ba:	8c e3       	ldi	r24, 0x3C	; 60
 3bc:	8a b9       	out	0x0a, r24	; 10
		
		PCICR = 0x2; //Setting PCICR (ATMEGA's GIC) to enable interrupts from PCINT1
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
		PCMSK1 = 0xf; //Setting interrupt masks of pins PCINT8-11 to 1
 3c4:	8f e0       	ldi	r24, 0x0F	; 15
 3c6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
		sei(); //Enable interrupts by setting I bit of the Status Register to 1
 3ca:	78 94       	sei
	
	
    //Write some data
	    while (1)
	    {
		    PORTB = 0xf0; //ToDo will this matter if PORTB[3:0] are set to input?
 3cc:	80 ef       	ldi	r24, 0xF0	; 240
 3ce:	85 b9       	out	0x05, r24	; 5
		    // ToDo Store and restore SREG
			if(UPDATE_LCD){
 3d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3d8:	89 2b       	or	r24, r25
 3da:	c1 f3       	breq	.-16     	; 0x3cc <main+0xd0>
				I2Csendcmd(SCREEN_ADDR, 0x01); // clear display
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	88 e7       	ldi	r24, 0x78	; 120
 3e0:	0e 94 90 00 	call	0x120	; 0x120 <I2Csendcmd>
				if(is_entering){
 3e4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <is_entering>
 3e8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <is_entering+0x1>
 3ec:	89 2b       	or	r24, r25
 3ee:	39 f0       	breq	.+14     	; 0x3fe <main+0x102>
					screen_write_string(freq_input, COMMAND_SET_CURSOR_LINE_4);
 3f0:	60 ee       	ldi	r22, 0xE0	; 224
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	8c e0       	ldi	r24, 0x0C	; 12
 3f6:	92 e0       	ldi	r25, 0x02	; 2
 3f8:	0e 94 b8 00 	call	0x170	; 0x170 <screen_write_string>
 3fc:	31 c0       	rjmp	.+98     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
				}
				else {
					char freq_disp[99] = "FREQ: ";
 3fe:	8e 01       	movw	r16, r28
 400:	0c 59       	subi	r16, 0x9C	; 156
 402:	1f 4f       	sbci	r17, 0xFF	; 255
 404:	87 e0       	ldi	r24, 0x07	; 7
 406:	e2 e0       	ldi	r30, 0x02	; 2
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	d8 01       	movw	r26, r16
 40c:	01 90       	ld	r0, Z+
 40e:	0d 92       	st	X+, r0
 410:	8a 95       	dec	r24
 412:	e1 f7       	brne	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	f8 01       	movw	r30, r16
 416:	37 96       	adiw	r30, 0x07	; 7
 418:	8c e5       	ldi	r24, 0x5C	; 92
 41a:	df 01       	movw	r26, r30
 41c:	1d 92       	st	X+, r1
 41e:	8a 95       	dec	r24
 420:	e9 f7       	brne	.-6      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
					char freq_val[99];
					itoa(freq, freq_val, 10);
 422:	4a e0       	ldi	r20, 0x0A	; 10
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	be 01       	movw	r22, r28
 428:	6f 5f       	subi	r22, 0xFF	; 255
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <freq>
 430:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <freq+0x1>
 434:	0e 94 9f 03 	call	0x73e	; 0x73e <itoa>
					strcat(freq_disp, freq_val);
 438:	be 01       	movw	r22, r28
 43a:	6f 5f       	subi	r22, 0xFF	; 255
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	c8 01       	movw	r24, r16
 440:	0e 94 94 03 	call	0x728	; 0x728 <strcat>
					strcat(freq_disp, "M");
 444:	f8 01       	movw	r30, r16
 446:	01 90       	ld	r0, Z+
 448:	00 20       	and	r0, r0
 44a:	e9 f7       	brne	.-6      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	8d e4       	ldi	r24, 0x4D	; 77
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	91 83       	std	Z+1, r25	; 0x01
 454:	80 83       	st	Z, r24
					screen_write_string(freq_disp, COMMAND_SET_CURSOR_LINE_1);
 456:	60 e8       	ldi	r22, 0x80	; 128
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	c8 01       	movw	r24, r16
 45c:	0e 94 b8 00 	call	0x170	; 0x170 <screen_write_string>
				}
			
				//ToDo output TXEN
				char mode_disp[99] = "MODE: ";
 460:	87 e0       	ldi	r24, 0x07	; 7
 462:	e5 e6       	ldi	r30, 0x65	; 101
 464:	f1 e0       	ldi	r31, 0x01	; 1
 466:	de 01       	movw	r26, r28
 468:	11 96       	adiw	r26, 0x01	; 1
 46a:	01 90       	ld	r0, Z+
 46c:	0d 92       	st	X+, r0
 46e:	8a 95       	dec	r24
 470:	e1 f7       	brne	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 472:	fe 01       	movw	r30, r28
 474:	38 96       	adiw	r30, 0x08	; 8
 476:	8c e5       	ldi	r24, 0x5C	; 92
 478:	df 01       	movw	r26, r30
 47a:	1d 92       	st	X+, r1
 47c:	8a 95       	dec	r24
 47e:	e9 f7       	brne	.-6      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				if(TXEN){
 480:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 484:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 488:	89 2b       	or	r24, r25
 48a:	59 f0       	breq	.+22     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
					strcat(mode_disp, "TX");
 48c:	37 97       	sbiw	r30, 0x07	; 7
 48e:	01 90       	ld	r0, Z+
 490:	00 20       	and	r0, r0
 492:	e9 f7       	brne	.-6      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 494:	31 97       	sbiw	r30, 0x01	; 1
 496:	84 e5       	ldi	r24, 0x54	; 84
 498:	98 e5       	ldi	r25, 0x58	; 88
 49a:	91 83       	std	Z+1, r25	; 0x01
 49c:	80 83       	st	Z, r24
 49e:	12 82       	std	Z+2, r1	; 0x02
 4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
				}
				else{
					strcat(mode_disp, "RX");
 4a2:	fe 01       	movw	r30, r28
 4a4:	31 96       	adiw	r30, 0x01	; 1
 4a6:	01 90       	ld	r0, Z+
 4a8:	00 20       	and	r0, r0
 4aa:	e9 f7       	brne	.-6      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4ac:	31 97       	sbiw	r30, 0x01	; 1
 4ae:	82 e5       	ldi	r24, 0x52	; 82
 4b0:	98 e5       	ldi	r25, 0x58	; 88
 4b2:	91 83       	std	Z+1, r25	; 0x01
 4b4:	80 83       	st	Z, r24
 4b6:	12 82       	std	Z+2, r1	; 0x02
				}
				screen_write_string(mode_disp, COMMAND_SET_CURSOR_LINE_2);
 4b8:	60 ea       	ldi	r22, 0xA0	; 160
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	ce 01       	movw	r24, r28
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	0e 94 b8 00 	call	0x170	; 0x170 <screen_write_string>

				UPDATE_LCD = FALSE;
 4c4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 4cc:	7f cf       	rjmp	.-258    	; 0x3cc <main+0xd0>

000004ce <__vector_5>:
		}
}



ISR(PCINT1_vect){
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	2f 93       	push	r18
 4de:	3f 93       	push	r19
 4e0:	4f 93       	push	r20
 4e2:	5f 93       	push	r21
 4e4:	6f 93       	push	r22
 4e6:	7f 93       	push	r23
 4e8:	8f 93       	push	r24
 4ea:	9f 93       	push	r25
 4ec:	af 93       	push	r26
 4ee:	bf 93       	push	r27
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	2a 97       	sbiw	r28, 0x0a	; 10
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	cd bf       	out	0x3d, r28	; 61
 502:	2f ef       	ldi	r18, 0xFF	; 255
 504:	39 ef       	ldi	r19, 0xF9	; 249
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	21 50       	subi	r18, 0x01	; 1
 50a:	30 40       	sbci	r19, 0x00	; 0
 50c:	40 40       	sbci	r20, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <__vector_5+0x3a>
 510:	00 c0       	rjmp	.+0      	; 0x512 <__vector_5+0x44>
 512:	00 00       	nop
	
	
	_delay_ms(KEY_DEBOUNCE_TIME);
	
	//Return if no key is pressed
	if((PINB & 0xf) == 0){ //No key is pressed
 514:	83 b1       	in	r24, 0x03	; 3
 516:	8f 70       	andi	r24, 0x0F	; 15
 518:	21 f4       	brne	.+8      	; 0x522 <__vector_5+0x54>
		PORTD = (PORTD & 0xc3) | 0;
 51a:	8b b1       	in	r24, 0x0b	; 11
 51c:	83 7c       	andi	r24, 0xC3	; 195
 51e:	8b b9       	out	0x0b, r24	; 11
		return;
 520:	a2 c0       	rjmp	.+324    	; 0x666 <__vector_5+0x198>
	}
	
	//Obtain row of key press
	key_row = (PINB & 0xf);
 522:	83 b1       	in	r24, 0x03	; 3
 524:	8f 70       	andi	r24, 0x0F	; 15
 526:	90 e0       	ldi	r25, 0x00	; 0

	//Swap input and output
	DDRB = 0xf;
 528:	2f e0       	ldi	r18, 0x0F	; 15
 52a:	24 b9       	out	0x04, r18	; 4
	PORTB = 0xf;
 52c:	25 b9       	out	0x05, r18	; 5
 52e:	2f ef       	ldi	r18, 0xFF	; 255
 530:	39 ef       	ldi	r19, 0xF9	; 249
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	21 50       	subi	r18, 0x01	; 1
 536:	30 40       	sbci	r19, 0x00	; 0
 538:	40 40       	sbci	r20, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <__vector_5+0x66>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <__vector_5+0x70>
 53e:	00 00       	nop
	_delay_ms(KEY_DEBOUNCE_TIME);

	//Return if key is released in the middle of detection
	if((PINB & 0xf0) == 0){
 540:	23 b1       	in	r18, 0x03	; 3
 542:	20 7f       	andi	r18, 0xF0	; 240
 544:	49 f4       	brne	.+18     	; 0x558 <__vector_5+0x8a>
		DDRB = 0xf0;
 546:	80 ef       	ldi	r24, 0xF0	; 240
 548:	84 b9       	out	0x04, r24	; 4
		PORTB |= 0xf0;
 54a:	85 b1       	in	r24, 0x05	; 5
 54c:	80 6f       	ori	r24, 0xF0	; 240
 54e:	85 b9       	out	0x05, r24	; 5
		PORTD = (PORTD & 0xc3) | 0;
 550:	8b b1       	in	r24, 0x0b	; 11
 552:	83 7c       	andi	r24, 0xC3	; 195
 554:	8b b9       	out	0x0b, r24	; 11
		return;
 556:	87 c0       	rjmp	.+270    	; 0x666 <__vector_5+0x198>
	}
	
	//Obtain column of key press
	key_col = (PINB & 0xf0) >> 0x4;
 558:	63 b1       	in	r22, 0x03	; 3
 55a:	62 95       	swap	r22
 55c:	6f 70       	andi	r22, 0x0F	; 15
 55e:	70 e0       	ldi	r23, 0x00	; 0
	
	
	
	//Parse input
	input_char = getInputChar(key_row, key_col);
 560:	0e 94 00 01 	call	0x200	; 0x200 <getInputChar>
 564:	8c 01       	movw	r16, r24

	//Numeric keys
	if(input_char <= 0x9){
 566:	8a 30       	cpi	r24, 0x0A	; 10
 568:	91 05       	cpc	r25, r1
 56a:	94 f5       	brge	.+100    	; 0x5d0 <__vector_5+0x102>
		if (!is_entering){ //User just started entering frequency setting
 56c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <is_entering>
 570:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <is_entering+0x1>
 574:	89 2b       	or	r24, r25
 576:	b1 f4       	brne	.+44     	; 0x5a4 <__vector_5+0xd6>
			char s[10];
			itoa(input_char, s, 10);
 578:	4a e0       	ldi	r20, 0x0A	; 10
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	be 01       	movw	r22, r28
 57e:	6f 5f       	subi	r22, 0xFF	; 255
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	c8 01       	movw	r24, r16
 584:	0e 94 9f 03 	call	0x73e	; 0x73e <itoa>
			strcat(freq_input, s);
 588:	be 01       	movw	r22, r28
 58a:	6f 5f       	subi	r22, 0xFF	; 255
 58c:	7f 4f       	sbci	r23, 0xFF	; 255
 58e:	8c e0       	ldi	r24, 0x0C	; 12
 590:	92 e0       	ldi	r25, 0x02	; 2
 592:	0e 94 94 03 	call	0x728	; 0x728 <strcat>
			is_entering = TRUE;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <is_entering+0x1>
 59e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <is_entering>
 5a2:	0f c0       	rjmp	.+30     	; 0x5c2 <__vector_5+0xf4>
		}
		else { //User is entering second or third digit go frequency setting
			char s[10];
			itoa(input_char, s, 10);
 5a4:	4a e0       	ldi	r20, 0x0A	; 10
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	be 01       	movw	r22, r28
 5aa:	6f 5f       	subi	r22, 0xFF	; 255
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	c8 01       	movw	r24, r16
 5b0:	0e 94 9f 03 	call	0x73e	; 0x73e <itoa>
			strcat(freq_input, s);
 5b4:	be 01       	movw	r22, r28
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8c e0       	ldi	r24, 0x0C	; 12
 5bc:	92 e0       	ldi	r25, 0x02	; 2
 5be:	0e 94 94 03 	call	0x728	; 0x728 <strcat>
		}
		UPDATE_LCD = TRUE;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 5ce:	3e c0       	rjmp	.+124    	; 0x64c <__vector_5+0x17e>
	}
	else if(input_char == KEY_CANCEL){
 5d0:	8d 30       	cpi	r24, 0x0D	; 13
 5d2:	91 05       	cpc	r25, r1
 5d4:	69 f4       	brne	.+26     	; 0x5f0 <__vector_5+0x122>
		is_entering = FALSE;
 5d6:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <is_entering+0x1>
 5da:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <is_entering>
		freq_input[0] = '\0';
 5de:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <freq_input>
		UPDATE_LCD = TRUE;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 5ee:	2e c0       	rjmp	.+92     	; 0x64c <__vector_5+0x17e>
	}
	else if(input_char == KEY_ENTER){
 5f0:	8c 30       	cpi	r24, 0x0C	; 12
 5f2:	91 05       	cpc	r25, r1
 5f4:	a9 f4       	brne	.+42     	; 0x620 <__vector_5+0x152>
		is_entering = FALSE;
 5f6:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <is_entering+0x1>
 5fa:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <is_entering>
		freq = atoi(freq_input); //ToDo: display error when input > 4 digits
 5fe:	8c e0       	ldi	r24, 0x0C	; 12
 600:	92 e0       	ldi	r25, 0x02	; 2
 602:	0e 94 76 03 	call	0x6ec	; 0x6ec <atoi>
 606:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <freq+0x1>
 60a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <freq>
		freq_input[0] = '\0';
 60e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <freq_input>
		UPDATE_LCD = TRUE; //Redundant
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 61a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 61e:	16 c0       	rjmp	.+44     	; 0x64c <__vector_5+0x17e>
	}
	else if(input_char == KEY_TOGGLE){
 620:	0b 97       	sbiw	r24, 0x0b	; 11
 622:	a1 f4       	brne	.+40     	; 0x64c <__vector_5+0x17e>
		TXEN = !TXEN;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 62c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 630:	23 2b       	or	r18, r19
 632:	11 f0       	breq	.+4      	; 0x638 <__vector_5+0x16a>
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
 63c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
		UPDATE_LCD = TRUE;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 648:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
			PORTD = (PORTD & 0xc3) | (input_char << 0x2);
 64c:	8b b1       	in	r24, 0x0b	; 11
 64e:	00 0f       	add	r16, r16
 650:	11 1f       	adc	r17, r17
 652:	00 0f       	add	r16, r16
 654:	11 1f       	adc	r17, r17
 656:	83 7c       	andi	r24, 0xC3	; 195
 658:	08 2b       	or	r16, r24
 65a:	0b b9       	out	0x0b, r16	; 11
	
	//Swap input and output back
	DDRB = 0xf0;
 65c:	80 ef       	ldi	r24, 0xF0	; 240
 65e:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0xf0;
 660:	85 b1       	in	r24, 0x05	; 5
 662:	80 6f       	ori	r24, 0xF0	; 240
 664:	85 b9       	out	0x05, r24	; 5
 666:	2a 96       	adiw	r28, 0x0a	; 10
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	f8 94       	cli
 66c:	de bf       	out	0x3e, r29	; 62
 66e:	0f be       	out	0x3f, r0	; 63
 670:	cd bf       	out	0x3d, r28	; 61
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <__divmodhi4>:
 69c:	97 fb       	bst	r25, 7
 69e:	07 2e       	mov	r0, r23
 6a0:	16 f4       	brtc	.+4      	; 0x6a6 <__divmodhi4+0xa>
 6a2:	00 94       	com	r0
 6a4:	07 d0       	rcall	.+14     	; 0x6b4 <__divmodhi4_neg1>
 6a6:	77 fd       	sbrc	r23, 7
 6a8:	09 d0       	rcall	.+18     	; 0x6bc <__divmodhi4_neg2>
 6aa:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__udivmodhi4>
 6ae:	07 fc       	sbrc	r0, 7
 6b0:	05 d0       	rcall	.+10     	; 0x6bc <__divmodhi4_neg2>
 6b2:	3e f4       	brtc	.+14     	; 0x6c2 <__divmodhi4_exit>

000006b4 <__divmodhi4_neg1>:
 6b4:	90 95       	com	r25
 6b6:	81 95       	neg	r24
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	08 95       	ret

000006bc <__divmodhi4_neg2>:
 6bc:	70 95       	com	r23
 6be:	61 95       	neg	r22
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255

000006c2 <__divmodhi4_exit>:
 6c2:	08 95       	ret

000006c4 <__udivmodhi4>:
 6c4:	aa 1b       	sub	r26, r26
 6c6:	bb 1b       	sub	r27, r27
 6c8:	51 e1       	ldi	r21, 0x11	; 17
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <__udivmodhi4_ep>

000006cc <__udivmodhi4_loop>:
 6cc:	aa 1f       	adc	r26, r26
 6ce:	bb 1f       	adc	r27, r27
 6d0:	a6 17       	cp	r26, r22
 6d2:	b7 07       	cpc	r27, r23
 6d4:	10 f0       	brcs	.+4      	; 0x6da <__udivmodhi4_ep>
 6d6:	a6 1b       	sub	r26, r22
 6d8:	b7 0b       	sbc	r27, r23

000006da <__udivmodhi4_ep>:
 6da:	88 1f       	adc	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	5a 95       	dec	r21
 6e0:	a9 f7       	brne	.-22     	; 0x6cc <__udivmodhi4_loop>
 6e2:	80 95       	com	r24
 6e4:	90 95       	com	r25
 6e6:	bc 01       	movw	r22, r24
 6e8:	cd 01       	movw	r24, r26
 6ea:	08 95       	ret

000006ec <atoi>:
 6ec:	fc 01       	movw	r30, r24
 6ee:	88 27       	eor	r24, r24
 6f0:	99 27       	eor	r25, r25
 6f2:	e8 94       	clt
 6f4:	21 91       	ld	r18, Z+
 6f6:	20 32       	cpi	r18, 0x20	; 32
 6f8:	e9 f3       	breq	.-6      	; 0x6f4 <atoi+0x8>
 6fa:	29 30       	cpi	r18, 0x09	; 9
 6fc:	10 f0       	brcs	.+4      	; 0x702 <atoi+0x16>
 6fe:	2e 30       	cpi	r18, 0x0E	; 14
 700:	c8 f3       	brcs	.-14     	; 0x6f4 <atoi+0x8>
 702:	2b 32       	cpi	r18, 0x2B	; 43
 704:	41 f0       	breq	.+16     	; 0x716 <atoi+0x2a>
 706:	2d 32       	cpi	r18, 0x2D	; 45
 708:	39 f4       	brne	.+14     	; 0x718 <atoi+0x2c>
 70a:	68 94       	set
 70c:	04 c0       	rjmp	.+8      	; 0x716 <atoi+0x2a>
 70e:	0e 94 b5 03 	call	0x76a	; 0x76a <__mulhi_const_10>
 712:	82 0f       	add	r24, r18
 714:	91 1d       	adc	r25, r1
 716:	21 91       	ld	r18, Z+
 718:	20 53       	subi	r18, 0x30	; 48
 71a:	2a 30       	cpi	r18, 0x0A	; 10
 71c:	c0 f3       	brcs	.-16     	; 0x70e <atoi+0x22>
 71e:	1e f4       	brtc	.+6      	; 0x726 <atoi+0x3a>
 720:	90 95       	com	r25
 722:	81 95       	neg	r24
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	08 95       	ret

00000728 <strcat>:
 728:	fb 01       	movw	r30, r22
 72a:	dc 01       	movw	r26, r24
 72c:	0d 90       	ld	r0, X+
 72e:	00 20       	and	r0, r0
 730:	e9 f7       	brne	.-6      	; 0x72c <strcat+0x4>
 732:	11 97       	sbiw	r26, 0x01	; 1
 734:	01 90       	ld	r0, Z+
 736:	0d 92       	st	X+, r0
 738:	00 20       	and	r0, r0
 73a:	e1 f7       	brne	.-8      	; 0x734 <strcat+0xc>
 73c:	08 95       	ret

0000073e <itoa>:
 73e:	45 32       	cpi	r20, 0x25	; 37
 740:	51 05       	cpc	r21, r1
 742:	20 f4       	brcc	.+8      	; 0x74c <itoa+0xe>
 744:	42 30       	cpi	r20, 0x02	; 2
 746:	10 f0       	brcs	.+4      	; 0x74c <itoa+0xe>
 748:	0c 94 aa 03 	jmp	0x754	; 0x754 <__itoa_ncheck>
 74c:	fb 01       	movw	r30, r22
 74e:	10 82       	st	Z, r1
 750:	cb 01       	movw	r24, r22
 752:	08 95       	ret

00000754 <__itoa_ncheck>:
 754:	bb 27       	eor	r27, r27
 756:	4a 30       	cpi	r20, 0x0A	; 10
 758:	31 f4       	brne	.+12     	; 0x766 <__itoa_ncheck+0x12>
 75a:	99 23       	and	r25, r25
 75c:	22 f4       	brpl	.+8      	; 0x766 <__itoa_ncheck+0x12>
 75e:	bd e2       	ldi	r27, 0x2D	; 45
 760:	90 95       	com	r25
 762:	81 95       	neg	r24
 764:	9f 4f       	sbci	r25, 0xFF	; 255
 766:	0c 94 be 03 	jmp	0x77c	; 0x77c <__utoa_common>

0000076a <__mulhi_const_10>:
 76a:	7a e0       	ldi	r23, 0x0A	; 10
 76c:	97 9f       	mul	r25, r23
 76e:	90 2d       	mov	r25, r0
 770:	87 9f       	mul	r24, r23
 772:	80 2d       	mov	r24, r0
 774:	91 0d       	add	r25, r1
 776:	11 24       	eor	r1, r1
 778:	08 95       	ret

0000077a <__utoa_ncheck>:
 77a:	bb 27       	eor	r27, r27

0000077c <__utoa_common>:
 77c:	fb 01       	movw	r30, r22
 77e:	55 27       	eor	r21, r21
 780:	aa 27       	eor	r26, r26
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	aa 1f       	adc	r26, r26
 788:	a4 17       	cp	r26, r20
 78a:	10 f0       	brcs	.+4      	; 0x790 <__utoa_common+0x14>
 78c:	a4 1b       	sub	r26, r20
 78e:	83 95       	inc	r24
 790:	50 51       	subi	r21, 0x10	; 16
 792:	b9 f7       	brne	.-18     	; 0x782 <__utoa_common+0x6>
 794:	a0 5d       	subi	r26, 0xD0	; 208
 796:	aa 33       	cpi	r26, 0x3A	; 58
 798:	08 f0       	brcs	.+2      	; 0x79c <__utoa_common+0x20>
 79a:	a9 5d       	subi	r26, 0xD9	; 217
 79c:	a1 93       	st	Z+, r26
 79e:	00 97       	sbiw	r24, 0x00	; 0
 7a0:	79 f7       	brne	.-34     	; 0x780 <__utoa_common+0x4>
 7a2:	b1 11       	cpse	r27, r1
 7a4:	b1 93       	st	Z+, r27
 7a6:	11 92       	st	Z+, r1
 7a8:	cb 01       	movw	r24, r22
 7aa:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <strrev>

000007ae <printf>:
 7ae:	a0 e0       	ldi	r26, 0x00	; 0
 7b0:	b0 e0       	ldi	r27, 0x00	; 0
 7b2:	ed ed       	ldi	r30, 0xDD	; 221
 7b4:	f3 e0       	ldi	r31, 0x03	; 3
 7b6:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__prologue_saves__+0x20>
 7ba:	ae 01       	movw	r20, r28
 7bc:	4b 5f       	subi	r20, 0xFB	; 251
 7be:	5f 4f       	sbci	r21, 0xFF	; 255
 7c0:	fa 01       	movw	r30, r20
 7c2:	61 91       	ld	r22, Z+
 7c4:	71 91       	ld	r23, Z+
 7c6:	af 01       	movw	r20, r30
 7c8:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <__iob+0x2>
 7cc:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <__iob+0x3>
 7d0:	0e 94 ed 03 	call	0x7da	; 0x7da <vfprintf>
 7d4:	e2 e0       	ldi	r30, 0x02	; 2
 7d6:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__epilogue_restores__+0x20>

000007da <vfprintf>:
 7da:	ab e0       	ldi	r26, 0x0B	; 11
 7dc:	b0 e0       	ldi	r27, 0x00	; 0
 7de:	e3 ef       	ldi	r30, 0xF3	; 243
 7e0:	f3 e0       	ldi	r31, 0x03	; 3
 7e2:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__prologue_saves__>
 7e6:	6c 01       	movw	r12, r24
 7e8:	7b 01       	movw	r14, r22
 7ea:	8a 01       	movw	r16, r20
 7ec:	fc 01       	movw	r30, r24
 7ee:	17 82       	std	Z+7, r1	; 0x07
 7f0:	16 82       	std	Z+6, r1	; 0x06
 7f2:	83 81       	ldd	r24, Z+3	; 0x03
 7f4:	81 ff       	sbrs	r24, 1
 7f6:	cc c1       	rjmp	.+920    	; 0xb90 <__stack+0x291>
 7f8:	ce 01       	movw	r24, r28
 7fa:	01 96       	adiw	r24, 0x01	; 1
 7fc:	3c 01       	movw	r6, r24
 7fe:	f6 01       	movw	r30, r12
 800:	93 81       	ldd	r25, Z+3	; 0x03
 802:	f7 01       	movw	r30, r14
 804:	93 fd       	sbrc	r25, 3
 806:	85 91       	lpm	r24, Z+
 808:	93 ff       	sbrs	r25, 3
 80a:	81 91       	ld	r24, Z+
 80c:	7f 01       	movw	r14, r30
 80e:	88 23       	and	r24, r24
 810:	09 f4       	brne	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 812:	ba c1       	rjmp	.+884    	; 0xb88 <__stack+0x289>
 814:	85 32       	cpi	r24, 0x25	; 37
 816:	39 f4       	brne	.+14     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 818:	93 fd       	sbrc	r25, 3
 81a:	85 91       	lpm	r24, Z+
 81c:	93 ff       	sbrs	r25, 3
 81e:	81 91       	ld	r24, Z+
 820:	7f 01       	movw	r14, r30
 822:	85 32       	cpi	r24, 0x25	; 37
 824:	29 f4       	brne	.+10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 826:	b6 01       	movw	r22, r12
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <fputc>
 82e:	e7 cf       	rjmp	.-50     	; 0x7fe <vfprintf+0x24>
 830:	91 2c       	mov	r9, r1
 832:	21 2c       	mov	r2, r1
 834:	31 2c       	mov	r3, r1
 836:	ff e1       	ldi	r31, 0x1F	; 31
 838:	f3 15       	cp	r31, r3
 83a:	d8 f0       	brcs	.+54     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 83c:	8b 32       	cpi	r24, 0x2B	; 43
 83e:	79 f0       	breq	.+30     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 840:	38 f4       	brcc	.+14     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 842:	80 32       	cpi	r24, 0x20	; 32
 844:	79 f0       	breq	.+30     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 846:	83 32       	cpi	r24, 0x23	; 35
 848:	a1 f4       	brne	.+40     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 84a:	23 2d       	mov	r18, r3
 84c:	20 61       	ori	r18, 0x10	; 16
 84e:	1d c0       	rjmp	.+58     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 850:	8d 32       	cpi	r24, 0x2D	; 45
 852:	61 f0       	breq	.+24     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 854:	80 33       	cpi	r24, 0x30	; 48
 856:	69 f4       	brne	.+26     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 858:	23 2d       	mov	r18, r3
 85a:	21 60       	ori	r18, 0x01	; 1
 85c:	16 c0       	rjmp	.+44     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 85e:	83 2d       	mov	r24, r3
 860:	82 60       	ori	r24, 0x02	; 2
 862:	38 2e       	mov	r3, r24
 864:	e3 2d       	mov	r30, r3
 866:	e4 60       	ori	r30, 0x04	; 4
 868:	3e 2e       	mov	r3, r30
 86a:	2a c0       	rjmp	.+84     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 86c:	f3 2d       	mov	r31, r3
 86e:	f8 60       	ori	r31, 0x08	; 8
 870:	1d c0       	rjmp	.+58     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 872:	37 fc       	sbrc	r3, 7
 874:	2d c0       	rjmp	.+90     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 876:	20 ed       	ldi	r18, 0xD0	; 208
 878:	28 0f       	add	r18, r24
 87a:	2a 30       	cpi	r18, 0x0A	; 10
 87c:	40 f0       	brcs	.+16     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 87e:	8e 32       	cpi	r24, 0x2E	; 46
 880:	b9 f4       	brne	.+46     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 882:	36 fc       	sbrc	r3, 6
 884:	81 c1       	rjmp	.+770    	; 0xb88 <__stack+0x289>
 886:	23 2d       	mov	r18, r3
 888:	20 64       	ori	r18, 0x40	; 64
 88a:	32 2e       	mov	r3, r18
 88c:	19 c0       	rjmp	.+50     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 88e:	36 fe       	sbrs	r3, 6
 890:	06 c0       	rjmp	.+12     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 892:	8a e0       	ldi	r24, 0x0A	; 10
 894:	98 9e       	mul	r9, r24
 896:	20 0d       	add	r18, r0
 898:	11 24       	eor	r1, r1
 89a:	92 2e       	mov	r9, r18
 89c:	11 c0       	rjmp	.+34     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 89e:	ea e0       	ldi	r30, 0x0A	; 10
 8a0:	2e 9e       	mul	r2, r30
 8a2:	20 0d       	add	r18, r0
 8a4:	11 24       	eor	r1, r1
 8a6:	22 2e       	mov	r2, r18
 8a8:	f3 2d       	mov	r31, r3
 8aa:	f0 62       	ori	r31, 0x20	; 32
 8ac:	3f 2e       	mov	r3, r31
 8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8b0:	8c 36       	cpi	r24, 0x6C	; 108
 8b2:	21 f4       	brne	.+8      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8b4:	83 2d       	mov	r24, r3
 8b6:	80 68       	ori	r24, 0x80	; 128
 8b8:	38 2e       	mov	r3, r24
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8bc:	88 36       	cpi	r24, 0x68	; 104
 8be:	41 f4       	brne	.+16     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8c0:	f7 01       	movw	r30, r14
 8c2:	93 fd       	sbrc	r25, 3
 8c4:	85 91       	lpm	r24, Z+
 8c6:	93 ff       	sbrs	r25, 3
 8c8:	81 91       	ld	r24, Z+
 8ca:	7f 01       	movw	r14, r30
 8cc:	81 11       	cpse	r24, r1
 8ce:	b3 cf       	rjmp	.-154    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 8d0:	98 2f       	mov	r25, r24
 8d2:	9f 7d       	andi	r25, 0xDF	; 223
 8d4:	95 54       	subi	r25, 0x45	; 69
 8d6:	93 30       	cpi	r25, 0x03	; 3
 8d8:	28 f4       	brcc	.+10     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8da:	0c 5f       	subi	r16, 0xFC	; 252
 8dc:	1f 4f       	sbci	r17, 0xFF	; 255
 8de:	9f e3       	ldi	r25, 0x3F	; 63
 8e0:	99 83       	std	Y+1, r25	; 0x01
 8e2:	0d c0       	rjmp	.+26     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8e4:	83 36       	cpi	r24, 0x63	; 99
 8e6:	31 f0       	breq	.+12     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8e8:	83 37       	cpi	r24, 0x73	; 115
 8ea:	71 f0       	breq	.+28     	; 0x908 <__stack+0x9>
 8ec:	83 35       	cpi	r24, 0x53	; 83
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8f0:	59 c0       	rjmp	.+178    	; 0x9a4 <__stack+0xa5>
 8f2:	21 c0       	rjmp	.+66     	; 0x936 <__stack+0x37>
 8f4:	f8 01       	movw	r30, r16
 8f6:	80 81       	ld	r24, Z
 8f8:	89 83       	std	Y+1, r24	; 0x01
 8fa:	0e 5f       	subi	r16, 0xFE	; 254
 8fc:	1f 4f       	sbci	r17, 0xFF	; 255
 8fe:	88 24       	eor	r8, r8
 900:	83 94       	inc	r8
 902:	91 2c       	mov	r9, r1
 904:	53 01       	movw	r10, r6
 906:	13 c0       	rjmp	.+38     	; 0x92e <__stack+0x2f>
 908:	28 01       	movw	r4, r16
 90a:	f2 e0       	ldi	r31, 0x02	; 2
 90c:	4f 0e       	add	r4, r31
 90e:	51 1c       	adc	r5, r1
 910:	f8 01       	movw	r30, r16
 912:	a0 80       	ld	r10, Z
 914:	b1 80       	ldd	r11, Z+1	; 0x01
 916:	36 fe       	sbrs	r3, 6
 918:	03 c0       	rjmp	.+6      	; 0x920 <__stack+0x21>
 91a:	69 2d       	mov	r22, r9
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
 920:	6f ef       	ldi	r22, 0xFF	; 255
 922:	7f ef       	ldi	r23, 0xFF	; 255
 924:	c5 01       	movw	r24, r10
 926:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <strnlen>
 92a:	4c 01       	movw	r8, r24
 92c:	82 01       	movw	r16, r4
 92e:	f3 2d       	mov	r31, r3
 930:	ff 77       	andi	r31, 0x7F	; 127
 932:	3f 2e       	mov	r3, r31
 934:	16 c0       	rjmp	.+44     	; 0x962 <__stack+0x63>
 936:	28 01       	movw	r4, r16
 938:	22 e0       	ldi	r18, 0x02	; 2
 93a:	42 0e       	add	r4, r18
 93c:	51 1c       	adc	r5, r1
 93e:	f8 01       	movw	r30, r16
 940:	a0 80       	ld	r10, Z
 942:	b1 80       	ldd	r11, Z+1	; 0x01
 944:	36 fe       	sbrs	r3, 6
 946:	03 c0       	rjmp	.+6      	; 0x94e <__stack+0x4f>
 948:	69 2d       	mov	r22, r9
 94a:	70 e0       	ldi	r23, 0x00	; 0
 94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0x53>
 94e:	6f ef       	ldi	r22, 0xFF	; 255
 950:	7f ef       	ldi	r23, 0xFF	; 255
 952:	c5 01       	movw	r24, r10
 954:	0e 94 ce 05 	call	0xb9c	; 0xb9c <strnlen_P>
 958:	4c 01       	movw	r8, r24
 95a:	f3 2d       	mov	r31, r3
 95c:	f0 68       	ori	r31, 0x80	; 128
 95e:	3f 2e       	mov	r3, r31
 960:	82 01       	movw	r16, r4
 962:	33 fc       	sbrc	r3, 3
 964:	1b c0       	rjmp	.+54     	; 0x99c <__stack+0x9d>
 966:	82 2d       	mov	r24, r2
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	88 16       	cp	r8, r24
 96c:	99 06       	cpc	r9, r25
 96e:	b0 f4       	brcc	.+44     	; 0x99c <__stack+0x9d>
 970:	b6 01       	movw	r22, r12
 972:	80 e2       	ldi	r24, 0x20	; 32
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <fputc>
 97a:	2a 94       	dec	r2
 97c:	f4 cf       	rjmp	.-24     	; 0x966 <__stack+0x67>
 97e:	f5 01       	movw	r30, r10
 980:	37 fc       	sbrc	r3, 7
 982:	85 91       	lpm	r24, Z+
 984:	37 fe       	sbrs	r3, 7
 986:	81 91       	ld	r24, Z+
 988:	5f 01       	movw	r10, r30
 98a:	b6 01       	movw	r22, r12
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <fputc>
 992:	21 10       	cpse	r2, r1
 994:	2a 94       	dec	r2
 996:	21 e0       	ldi	r18, 0x01	; 1
 998:	82 1a       	sub	r8, r18
 99a:	91 08       	sbc	r9, r1
 99c:	81 14       	cp	r8, r1
 99e:	91 04       	cpc	r9, r1
 9a0:	71 f7       	brne	.-36     	; 0x97e <__stack+0x7f>
 9a2:	e8 c0       	rjmp	.+464    	; 0xb74 <__stack+0x275>
 9a4:	84 36       	cpi	r24, 0x64	; 100
 9a6:	11 f0       	breq	.+4      	; 0x9ac <__stack+0xad>
 9a8:	89 36       	cpi	r24, 0x69	; 105
 9aa:	41 f5       	brne	.+80     	; 0x9fc <__stack+0xfd>
 9ac:	f8 01       	movw	r30, r16
 9ae:	37 fe       	sbrs	r3, 7
 9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <__stack+0xc1>
 9b2:	60 81       	ld	r22, Z
 9b4:	71 81       	ldd	r23, Z+1	; 0x01
 9b6:	82 81       	ldd	r24, Z+2	; 0x02
 9b8:	93 81       	ldd	r25, Z+3	; 0x03
 9ba:	0c 5f       	subi	r16, 0xFC	; 252
 9bc:	1f 4f       	sbci	r17, 0xFF	; 255
 9be:	08 c0       	rjmp	.+16     	; 0x9d0 <__stack+0xd1>
 9c0:	60 81       	ld	r22, Z
 9c2:	71 81       	ldd	r23, Z+1	; 0x01
 9c4:	07 2e       	mov	r0, r23
 9c6:	00 0c       	add	r0, r0
 9c8:	88 0b       	sbc	r24, r24
 9ca:	99 0b       	sbc	r25, r25
 9cc:	0e 5f       	subi	r16, 0xFE	; 254
 9ce:	1f 4f       	sbci	r17, 0xFF	; 255
 9d0:	f3 2d       	mov	r31, r3
 9d2:	ff 76       	andi	r31, 0x6F	; 111
 9d4:	3f 2e       	mov	r3, r31
 9d6:	97 ff       	sbrs	r25, 7
 9d8:	09 c0       	rjmp	.+18     	; 0x9ec <__stack+0xed>
 9da:	90 95       	com	r25
 9dc:	80 95       	com	r24
 9de:	70 95       	com	r23
 9e0:	61 95       	neg	r22
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255
 9e4:	8f 4f       	sbci	r24, 0xFF	; 255
 9e6:	9f 4f       	sbci	r25, 0xFF	; 255
 9e8:	f0 68       	ori	r31, 0x80	; 128
 9ea:	3f 2e       	mov	r3, r31
 9ec:	2a e0       	ldi	r18, 0x0A	; 10
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	a3 01       	movw	r20, r6
 9f2:	0e 94 30 06 	call	0xc60	; 0xc60 <__ultoa_invert>
 9f6:	88 2e       	mov	r8, r24
 9f8:	86 18       	sub	r8, r6
 9fa:	45 c0       	rjmp	.+138    	; 0xa86 <__stack+0x187>
 9fc:	85 37       	cpi	r24, 0x75	; 117
 9fe:	31 f4       	brne	.+12     	; 0xa0c <__stack+0x10d>
 a00:	23 2d       	mov	r18, r3
 a02:	2f 7e       	andi	r18, 0xEF	; 239
 a04:	b2 2e       	mov	r11, r18
 a06:	2a e0       	ldi	r18, 0x0A	; 10
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	25 c0       	rjmp	.+74     	; 0xa56 <__stack+0x157>
 a0c:	93 2d       	mov	r25, r3
 a0e:	99 7f       	andi	r25, 0xF9	; 249
 a10:	b9 2e       	mov	r11, r25
 a12:	8f 36       	cpi	r24, 0x6F	; 111
 a14:	c1 f0       	breq	.+48     	; 0xa46 <__stack+0x147>
 a16:	18 f4       	brcc	.+6      	; 0xa1e <__stack+0x11f>
 a18:	88 35       	cpi	r24, 0x58	; 88
 a1a:	79 f0       	breq	.+30     	; 0xa3a <__stack+0x13b>
 a1c:	b5 c0       	rjmp	.+362    	; 0xb88 <__stack+0x289>
 a1e:	80 37       	cpi	r24, 0x70	; 112
 a20:	19 f0       	breq	.+6      	; 0xa28 <__stack+0x129>
 a22:	88 37       	cpi	r24, 0x78	; 120
 a24:	21 f0       	breq	.+8      	; 0xa2e <__stack+0x12f>
 a26:	b0 c0       	rjmp	.+352    	; 0xb88 <__stack+0x289>
 a28:	e9 2f       	mov	r30, r25
 a2a:	e0 61       	ori	r30, 0x10	; 16
 a2c:	be 2e       	mov	r11, r30
 a2e:	b4 fe       	sbrs	r11, 4
 a30:	0d c0       	rjmp	.+26     	; 0xa4c <__stack+0x14d>
 a32:	fb 2d       	mov	r31, r11
 a34:	f4 60       	ori	r31, 0x04	; 4
 a36:	bf 2e       	mov	r11, r31
 a38:	09 c0       	rjmp	.+18     	; 0xa4c <__stack+0x14d>
 a3a:	34 fe       	sbrs	r3, 4
 a3c:	0a c0       	rjmp	.+20     	; 0xa52 <__stack+0x153>
 a3e:	29 2f       	mov	r18, r25
 a40:	26 60       	ori	r18, 0x06	; 6
 a42:	b2 2e       	mov	r11, r18
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <__stack+0x153>
 a46:	28 e0       	ldi	r18, 0x08	; 8
 a48:	30 e0       	ldi	r19, 0x00	; 0
 a4a:	05 c0       	rjmp	.+10     	; 0xa56 <__stack+0x157>
 a4c:	20 e1       	ldi	r18, 0x10	; 16
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <__stack+0x157>
 a52:	20 e1       	ldi	r18, 0x10	; 16
 a54:	32 e0       	ldi	r19, 0x02	; 2
 a56:	f8 01       	movw	r30, r16
 a58:	b7 fe       	sbrs	r11, 7
 a5a:	07 c0       	rjmp	.+14     	; 0xa6a <__stack+0x16b>
 a5c:	60 81       	ld	r22, Z
 a5e:	71 81       	ldd	r23, Z+1	; 0x01
 a60:	82 81       	ldd	r24, Z+2	; 0x02
 a62:	93 81       	ldd	r25, Z+3	; 0x03
 a64:	0c 5f       	subi	r16, 0xFC	; 252
 a66:	1f 4f       	sbci	r17, 0xFF	; 255
 a68:	06 c0       	rjmp	.+12     	; 0xa76 <__stack+0x177>
 a6a:	60 81       	ld	r22, Z
 a6c:	71 81       	ldd	r23, Z+1	; 0x01
 a6e:	80 e0       	ldi	r24, 0x00	; 0
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 5f       	subi	r16, 0xFE	; 254
 a74:	1f 4f       	sbci	r17, 0xFF	; 255
 a76:	a3 01       	movw	r20, r6
 a78:	0e 94 30 06 	call	0xc60	; 0xc60 <__ultoa_invert>
 a7c:	88 2e       	mov	r8, r24
 a7e:	86 18       	sub	r8, r6
 a80:	fb 2d       	mov	r31, r11
 a82:	ff 77       	andi	r31, 0x7F	; 127
 a84:	3f 2e       	mov	r3, r31
 a86:	36 fe       	sbrs	r3, 6
 a88:	0d c0       	rjmp	.+26     	; 0xaa4 <__stack+0x1a5>
 a8a:	23 2d       	mov	r18, r3
 a8c:	2e 7f       	andi	r18, 0xFE	; 254
 a8e:	a2 2e       	mov	r10, r18
 a90:	89 14       	cp	r8, r9
 a92:	58 f4       	brcc	.+22     	; 0xaaa <__stack+0x1ab>
 a94:	34 fe       	sbrs	r3, 4
 a96:	0b c0       	rjmp	.+22     	; 0xaae <__stack+0x1af>
 a98:	32 fc       	sbrc	r3, 2
 a9a:	09 c0       	rjmp	.+18     	; 0xaae <__stack+0x1af>
 a9c:	83 2d       	mov	r24, r3
 a9e:	8e 7e       	andi	r24, 0xEE	; 238
 aa0:	a8 2e       	mov	r10, r24
 aa2:	05 c0       	rjmp	.+10     	; 0xaae <__stack+0x1af>
 aa4:	b8 2c       	mov	r11, r8
 aa6:	a3 2c       	mov	r10, r3
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <__stack+0x1b1>
 aaa:	b8 2c       	mov	r11, r8
 aac:	01 c0       	rjmp	.+2      	; 0xab0 <__stack+0x1b1>
 aae:	b9 2c       	mov	r11, r9
 ab0:	a4 fe       	sbrs	r10, 4
 ab2:	0f c0       	rjmp	.+30     	; 0xad2 <__stack+0x1d3>
 ab4:	fe 01       	movw	r30, r28
 ab6:	e8 0d       	add	r30, r8
 ab8:	f1 1d       	adc	r31, r1
 aba:	80 81       	ld	r24, Z
 abc:	80 33       	cpi	r24, 0x30	; 48
 abe:	21 f4       	brne	.+8      	; 0xac8 <__stack+0x1c9>
 ac0:	9a 2d       	mov	r25, r10
 ac2:	99 7e       	andi	r25, 0xE9	; 233
 ac4:	a9 2e       	mov	r10, r25
 ac6:	09 c0       	rjmp	.+18     	; 0xada <__stack+0x1db>
 ac8:	a2 fe       	sbrs	r10, 2
 aca:	06 c0       	rjmp	.+12     	; 0xad8 <__stack+0x1d9>
 acc:	b3 94       	inc	r11
 ace:	b3 94       	inc	r11
 ad0:	04 c0       	rjmp	.+8      	; 0xada <__stack+0x1db>
 ad2:	8a 2d       	mov	r24, r10
 ad4:	86 78       	andi	r24, 0x86	; 134
 ad6:	09 f0       	breq	.+2      	; 0xada <__stack+0x1db>
 ad8:	b3 94       	inc	r11
 ada:	a3 fc       	sbrc	r10, 3
 adc:	11 c0       	rjmp	.+34     	; 0xb00 <__stack+0x201>
 ade:	a0 fe       	sbrs	r10, 0
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <__stack+0x1ef>
 ae2:	b2 14       	cp	r11, r2
 ae4:	88 f4       	brcc	.+34     	; 0xb08 <__stack+0x209>
 ae6:	28 0c       	add	r2, r8
 ae8:	92 2c       	mov	r9, r2
 aea:	9b 18       	sub	r9, r11
 aec:	0e c0       	rjmp	.+28     	; 0xb0a <__stack+0x20b>
 aee:	b2 14       	cp	r11, r2
 af0:	60 f4       	brcc	.+24     	; 0xb0a <__stack+0x20b>
 af2:	b6 01       	movw	r22, r12
 af4:	80 e2       	ldi	r24, 0x20	; 32
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <fputc>
 afc:	b3 94       	inc	r11
 afe:	f7 cf       	rjmp	.-18     	; 0xaee <__stack+0x1ef>
 b00:	b2 14       	cp	r11, r2
 b02:	18 f4       	brcc	.+6      	; 0xb0a <__stack+0x20b>
 b04:	2b 18       	sub	r2, r11
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <__stack+0x20d>
 b08:	98 2c       	mov	r9, r8
 b0a:	21 2c       	mov	r2, r1
 b0c:	a4 fe       	sbrs	r10, 4
 b0e:	10 c0       	rjmp	.+32     	; 0xb30 <__stack+0x231>
 b10:	b6 01       	movw	r22, r12
 b12:	80 e3       	ldi	r24, 0x30	; 48
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <fputc>
 b1a:	a2 fe       	sbrs	r10, 2
 b1c:	17 c0       	rjmp	.+46     	; 0xb4c <__stack+0x24d>
 b1e:	a1 fc       	sbrc	r10, 1
 b20:	03 c0       	rjmp	.+6      	; 0xb28 <__stack+0x229>
 b22:	88 e7       	ldi	r24, 0x78	; 120
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <__stack+0x22d>
 b28:	88 e5       	ldi	r24, 0x58	; 88
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	b6 01       	movw	r22, r12
 b2e:	0c c0       	rjmp	.+24     	; 0xb48 <__stack+0x249>
 b30:	8a 2d       	mov	r24, r10
 b32:	86 78       	andi	r24, 0x86	; 134
 b34:	59 f0       	breq	.+22     	; 0xb4c <__stack+0x24d>
 b36:	a1 fe       	sbrs	r10, 1
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <__stack+0x23f>
 b3a:	8b e2       	ldi	r24, 0x2B	; 43
 b3c:	01 c0       	rjmp	.+2      	; 0xb40 <__stack+0x241>
 b3e:	80 e2       	ldi	r24, 0x20	; 32
 b40:	a7 fc       	sbrc	r10, 7
 b42:	8d e2       	ldi	r24, 0x2D	; 45
 b44:	b6 01       	movw	r22, r12
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <fputc>
 b4c:	89 14       	cp	r8, r9
 b4e:	38 f4       	brcc	.+14     	; 0xb5e <__stack+0x25f>
 b50:	b6 01       	movw	r22, r12
 b52:	80 e3       	ldi	r24, 0x30	; 48
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <fputc>
 b5a:	9a 94       	dec	r9
 b5c:	f7 cf       	rjmp	.-18     	; 0xb4c <__stack+0x24d>
 b5e:	8a 94       	dec	r8
 b60:	f3 01       	movw	r30, r6
 b62:	e8 0d       	add	r30, r8
 b64:	f1 1d       	adc	r31, r1
 b66:	80 81       	ld	r24, Z
 b68:	b6 01       	movw	r22, r12
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <fputc>
 b70:	81 10       	cpse	r8, r1
 b72:	f5 cf       	rjmp	.-22     	; 0xb5e <__stack+0x25f>
 b74:	22 20       	and	r2, r2
 b76:	09 f4       	brne	.+2      	; 0xb7a <__stack+0x27b>
 b78:	42 ce       	rjmp	.-892    	; 0x7fe <vfprintf+0x24>
 b7a:	b6 01       	movw	r22, r12
 b7c:	80 e2       	ldi	r24, 0x20	; 32
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <fputc>
 b84:	2a 94       	dec	r2
 b86:	f6 cf       	rjmp	.-20     	; 0xb74 <__stack+0x275>
 b88:	f6 01       	movw	r30, r12
 b8a:	86 81       	ldd	r24, Z+6	; 0x06
 b8c:	97 81       	ldd	r25, Z+7	; 0x07
 b8e:	02 c0       	rjmp	.+4      	; 0xb94 <__stack+0x295>
 b90:	8f ef       	ldi	r24, 0xFF	; 255
 b92:	9f ef       	ldi	r25, 0xFF	; 255
 b94:	2b 96       	adiw	r28, 0x0b	; 11
 b96:	e2 e1       	ldi	r30, 0x12	; 18
 b98:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__epilogue_restores__>

00000b9c <strnlen_P>:
 b9c:	fc 01       	movw	r30, r24
 b9e:	05 90       	lpm	r0, Z+
 ba0:	61 50       	subi	r22, 0x01	; 1
 ba2:	70 40       	sbci	r23, 0x00	; 0
 ba4:	01 10       	cpse	r0, r1
 ba6:	d8 f7       	brcc	.-10     	; 0xb9e <strnlen_P+0x2>
 ba8:	80 95       	com	r24
 baa:	90 95       	com	r25
 bac:	8e 0f       	add	r24, r30
 bae:	9f 1f       	adc	r25, r31
 bb0:	08 95       	ret

00000bb2 <strnlen>:
 bb2:	fc 01       	movw	r30, r24
 bb4:	61 50       	subi	r22, 0x01	; 1
 bb6:	70 40       	sbci	r23, 0x00	; 0
 bb8:	01 90       	ld	r0, Z+
 bba:	01 10       	cpse	r0, r1
 bbc:	d8 f7       	brcc	.-10     	; 0xbb4 <strnlen+0x2>
 bbe:	80 95       	com	r24
 bc0:	90 95       	com	r25
 bc2:	8e 0f       	add	r24, r30
 bc4:	9f 1f       	adc	r25, r31
 bc6:	08 95       	ret

00000bc8 <strrev>:
 bc8:	dc 01       	movw	r26, r24
 bca:	fc 01       	movw	r30, r24
 bcc:	67 2f       	mov	r22, r23
 bce:	71 91       	ld	r23, Z+
 bd0:	77 23       	and	r23, r23
 bd2:	e1 f7       	brne	.-8      	; 0xbcc <strrev+0x4>
 bd4:	32 97       	sbiw	r30, 0x02	; 2
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <strrev+0x18>
 bd8:	7c 91       	ld	r23, X
 bda:	6d 93       	st	X+, r22
 bdc:	70 83       	st	Z, r23
 bde:	62 91       	ld	r22, -Z
 be0:	ae 17       	cp	r26, r30
 be2:	bf 07       	cpc	r27, r31
 be4:	c8 f3       	brcs	.-14     	; 0xbd8 <strrev+0x10>
 be6:	08 95       	ret

00000be8 <fputc>:
 be8:	0f 93       	push	r16
 bea:	1f 93       	push	r17
 bec:	cf 93       	push	r28
 bee:	df 93       	push	r29
 bf0:	fb 01       	movw	r30, r22
 bf2:	23 81       	ldd	r18, Z+3	; 0x03
 bf4:	21 fd       	sbrc	r18, 1
 bf6:	03 c0       	rjmp	.+6      	; 0xbfe <fputc+0x16>
 bf8:	8f ef       	ldi	r24, 0xFF	; 255
 bfa:	9f ef       	ldi	r25, 0xFF	; 255
 bfc:	2c c0       	rjmp	.+88     	; 0xc56 <fputc+0x6e>
 bfe:	22 ff       	sbrs	r18, 2
 c00:	16 c0       	rjmp	.+44     	; 0xc2e <fputc+0x46>
 c02:	46 81       	ldd	r20, Z+6	; 0x06
 c04:	57 81       	ldd	r21, Z+7	; 0x07
 c06:	24 81       	ldd	r18, Z+4	; 0x04
 c08:	35 81       	ldd	r19, Z+5	; 0x05
 c0a:	42 17       	cp	r20, r18
 c0c:	53 07       	cpc	r21, r19
 c0e:	44 f4       	brge	.+16     	; 0xc20 <fputc+0x38>
 c10:	a0 81       	ld	r26, Z
 c12:	b1 81       	ldd	r27, Z+1	; 0x01
 c14:	9d 01       	movw	r18, r26
 c16:	2f 5f       	subi	r18, 0xFF	; 255
 c18:	3f 4f       	sbci	r19, 0xFF	; 255
 c1a:	31 83       	std	Z+1, r19	; 0x01
 c1c:	20 83       	st	Z, r18
 c1e:	8c 93       	st	X, r24
 c20:	26 81       	ldd	r18, Z+6	; 0x06
 c22:	37 81       	ldd	r19, Z+7	; 0x07
 c24:	2f 5f       	subi	r18, 0xFF	; 255
 c26:	3f 4f       	sbci	r19, 0xFF	; 255
 c28:	37 83       	std	Z+7, r19	; 0x07
 c2a:	26 83       	std	Z+6, r18	; 0x06
 c2c:	14 c0       	rjmp	.+40     	; 0xc56 <fputc+0x6e>
 c2e:	8b 01       	movw	r16, r22
 c30:	ec 01       	movw	r28, r24
 c32:	fb 01       	movw	r30, r22
 c34:	00 84       	ldd	r0, Z+8	; 0x08
 c36:	f1 85       	ldd	r31, Z+9	; 0x09
 c38:	e0 2d       	mov	r30, r0
 c3a:	09 95       	icall
 c3c:	89 2b       	or	r24, r25
 c3e:	e1 f6       	brne	.-72     	; 0xbf8 <fputc+0x10>
 c40:	d8 01       	movw	r26, r16
 c42:	16 96       	adiw	r26, 0x06	; 6
 c44:	8d 91       	ld	r24, X+
 c46:	9c 91       	ld	r25, X
 c48:	17 97       	sbiw	r26, 0x07	; 7
 c4a:	01 96       	adiw	r24, 0x01	; 1
 c4c:	17 96       	adiw	r26, 0x07	; 7
 c4e:	9c 93       	st	X, r25
 c50:	8e 93       	st	-X, r24
 c52:	16 97       	sbiw	r26, 0x06	; 6
 c54:	ce 01       	movw	r24, r28
 c56:	df 91       	pop	r29
 c58:	cf 91       	pop	r28
 c5a:	1f 91       	pop	r17
 c5c:	0f 91       	pop	r16
 c5e:	08 95       	ret

00000c60 <__ultoa_invert>:
 c60:	fa 01       	movw	r30, r20
 c62:	aa 27       	eor	r26, r26
 c64:	28 30       	cpi	r18, 0x08	; 8
 c66:	51 f1       	breq	.+84     	; 0xcbc <__ultoa_invert+0x5c>
 c68:	20 31       	cpi	r18, 0x10	; 16
 c6a:	81 f1       	breq	.+96     	; 0xccc <__ultoa_invert+0x6c>
 c6c:	e8 94       	clt
 c6e:	6f 93       	push	r22
 c70:	6e 7f       	andi	r22, 0xFE	; 254
 c72:	6e 5f       	subi	r22, 0xFE	; 254
 c74:	7f 4f       	sbci	r23, 0xFF	; 255
 c76:	8f 4f       	sbci	r24, 0xFF	; 255
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	af 4f       	sbci	r26, 0xFF	; 255
 c7c:	b1 e0       	ldi	r27, 0x01	; 1
 c7e:	3e d0       	rcall	.+124    	; 0xcfc <__ultoa_invert+0x9c>
 c80:	b4 e0       	ldi	r27, 0x04	; 4
 c82:	3c d0       	rcall	.+120    	; 0xcfc <__ultoa_invert+0x9c>
 c84:	67 0f       	add	r22, r23
 c86:	78 1f       	adc	r23, r24
 c88:	89 1f       	adc	r24, r25
 c8a:	9a 1f       	adc	r25, r26
 c8c:	a1 1d       	adc	r26, r1
 c8e:	68 0f       	add	r22, r24
 c90:	79 1f       	adc	r23, r25
 c92:	8a 1f       	adc	r24, r26
 c94:	91 1d       	adc	r25, r1
 c96:	a1 1d       	adc	r26, r1
 c98:	6a 0f       	add	r22, r26
 c9a:	71 1d       	adc	r23, r1
 c9c:	81 1d       	adc	r24, r1
 c9e:	91 1d       	adc	r25, r1
 ca0:	a1 1d       	adc	r26, r1
 ca2:	20 d0       	rcall	.+64     	; 0xce4 <__ultoa_invert+0x84>
 ca4:	09 f4       	brne	.+2      	; 0xca8 <__ultoa_invert+0x48>
 ca6:	68 94       	set
 ca8:	3f 91       	pop	r19
 caa:	2a e0       	ldi	r18, 0x0A	; 10
 cac:	26 9f       	mul	r18, r22
 cae:	11 24       	eor	r1, r1
 cb0:	30 19       	sub	r19, r0
 cb2:	30 5d       	subi	r19, 0xD0	; 208
 cb4:	31 93       	st	Z+, r19
 cb6:	de f6       	brtc	.-74     	; 0xc6e <__ultoa_invert+0xe>
 cb8:	cf 01       	movw	r24, r30
 cba:	08 95       	ret
 cbc:	46 2f       	mov	r20, r22
 cbe:	47 70       	andi	r20, 0x07	; 7
 cc0:	40 5d       	subi	r20, 0xD0	; 208
 cc2:	41 93       	st	Z+, r20
 cc4:	b3 e0       	ldi	r27, 0x03	; 3
 cc6:	0f d0       	rcall	.+30     	; 0xce6 <__ultoa_invert+0x86>
 cc8:	c9 f7       	brne	.-14     	; 0xcbc <__ultoa_invert+0x5c>
 cca:	f6 cf       	rjmp	.-20     	; 0xcb8 <__ultoa_invert+0x58>
 ccc:	46 2f       	mov	r20, r22
 cce:	4f 70       	andi	r20, 0x0F	; 15
 cd0:	40 5d       	subi	r20, 0xD0	; 208
 cd2:	4a 33       	cpi	r20, 0x3A	; 58
 cd4:	18 f0       	brcs	.+6      	; 0xcdc <__ultoa_invert+0x7c>
 cd6:	49 5d       	subi	r20, 0xD9	; 217
 cd8:	31 fd       	sbrc	r19, 1
 cda:	40 52       	subi	r20, 0x20	; 32
 cdc:	41 93       	st	Z+, r20
 cde:	02 d0       	rcall	.+4      	; 0xce4 <__ultoa_invert+0x84>
 ce0:	a9 f7       	brne	.-22     	; 0xccc <__ultoa_invert+0x6c>
 ce2:	ea cf       	rjmp	.-44     	; 0xcb8 <__ultoa_invert+0x58>
 ce4:	b4 e0       	ldi	r27, 0x04	; 4
 ce6:	a6 95       	lsr	r26
 ce8:	97 95       	ror	r25
 cea:	87 95       	ror	r24
 cec:	77 95       	ror	r23
 cee:	67 95       	ror	r22
 cf0:	ba 95       	dec	r27
 cf2:	c9 f7       	brne	.-14     	; 0xce6 <__ultoa_invert+0x86>
 cf4:	00 97       	sbiw	r24, 0x00	; 0
 cf6:	61 05       	cpc	r22, r1
 cf8:	71 05       	cpc	r23, r1
 cfa:	08 95       	ret
 cfc:	9b 01       	movw	r18, r22
 cfe:	ac 01       	movw	r20, r24
 d00:	0a 2e       	mov	r0, r26
 d02:	06 94       	lsr	r0
 d04:	57 95       	ror	r21
 d06:	47 95       	ror	r20
 d08:	37 95       	ror	r19
 d0a:	27 95       	ror	r18
 d0c:	ba 95       	dec	r27
 d0e:	c9 f7       	brne	.-14     	; 0xd02 <__ultoa_invert+0xa2>
 d10:	62 0f       	add	r22, r18
 d12:	73 1f       	adc	r23, r19
 d14:	84 1f       	adc	r24, r20
 d16:	95 1f       	adc	r25, r21
 d18:	a0 1d       	adc	r26, r0
 d1a:	08 95       	ret

00000d1c <__prologue_saves__>:
 d1c:	2f 92       	push	r2
 d1e:	3f 92       	push	r3
 d20:	4f 92       	push	r4
 d22:	5f 92       	push	r5
 d24:	6f 92       	push	r6
 d26:	7f 92       	push	r7
 d28:	8f 92       	push	r8
 d2a:	9f 92       	push	r9
 d2c:	af 92       	push	r10
 d2e:	bf 92       	push	r11
 d30:	cf 92       	push	r12
 d32:	df 92       	push	r13
 d34:	ef 92       	push	r14
 d36:	ff 92       	push	r15
 d38:	0f 93       	push	r16
 d3a:	1f 93       	push	r17
 d3c:	cf 93       	push	r28
 d3e:	df 93       	push	r29
 d40:	cd b7       	in	r28, 0x3d	; 61
 d42:	de b7       	in	r29, 0x3e	; 62
 d44:	ca 1b       	sub	r28, r26
 d46:	db 0b       	sbc	r29, r27
 d48:	0f b6       	in	r0, 0x3f	; 63
 d4a:	f8 94       	cli
 d4c:	de bf       	out	0x3e, r29	; 62
 d4e:	0f be       	out	0x3f, r0	; 63
 d50:	cd bf       	out	0x3d, r28	; 61
 d52:	09 94       	ijmp

00000d54 <__epilogue_restores__>:
 d54:	2a 88       	ldd	r2, Y+18	; 0x12
 d56:	39 88       	ldd	r3, Y+17	; 0x11
 d58:	48 88       	ldd	r4, Y+16	; 0x10
 d5a:	5f 84       	ldd	r5, Y+15	; 0x0f
 d5c:	6e 84       	ldd	r6, Y+14	; 0x0e
 d5e:	7d 84       	ldd	r7, Y+13	; 0x0d
 d60:	8c 84       	ldd	r8, Y+12	; 0x0c
 d62:	9b 84       	ldd	r9, Y+11	; 0x0b
 d64:	aa 84       	ldd	r10, Y+10	; 0x0a
 d66:	b9 84       	ldd	r11, Y+9	; 0x09
 d68:	c8 84       	ldd	r12, Y+8	; 0x08
 d6a:	df 80       	ldd	r13, Y+7	; 0x07
 d6c:	ee 80       	ldd	r14, Y+6	; 0x06
 d6e:	fd 80       	ldd	r15, Y+5	; 0x05
 d70:	0c 81       	ldd	r16, Y+4	; 0x04
 d72:	1b 81       	ldd	r17, Y+3	; 0x03
 d74:	aa 81       	ldd	r26, Y+2	; 0x02
 d76:	b9 81       	ldd	r27, Y+1	; 0x01
 d78:	ce 0f       	add	r28, r30
 d7a:	d1 1d       	adc	r29, r1
 d7c:	0f b6       	in	r0, 0x3f	; 63
 d7e:	f8 94       	cli
 d80:	de bf       	out	0x3e, r29	; 62
 d82:	0f be       	out	0x3f, r0	; 63
 d84:	cd bf       	out	0x3d, r28	; 61
 d86:	ed 01       	movw	r28, r26
 d88:	08 95       	ret

00000d8a <_exit>:
 d8a:	f8 94       	cli

00000d8c <__stop_program>:
 d8c:	ff cf       	rjmp	.-2      	; 0xd8c <__stop_program>
