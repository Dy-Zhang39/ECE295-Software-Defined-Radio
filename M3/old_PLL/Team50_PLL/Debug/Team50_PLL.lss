
Team50_PLL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000ec4  00000f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800106  00800106  00000f5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d51  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf8  00000000  00000000  00002e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a67  00000000  00000000  00003a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00004490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015e5  00000000  00000000  000047a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001037  00000000  00000000  00005d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00006dc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ec       	ldi	r30, 0xC4	; 196
  90:	fe e0       	ldi	r31, 0x0E	; 14
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a6 e0       	ldi	r26, 0x06	; 6
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a1 31       	cpi	r26, 0x11	; 17
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  b2:	0c 94 60 07 	jmp	0xec0	; 0xec0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <si5351aSetFrequency>:
	num = f;						// the actual multiplier is  mult + num / denom
	denom = 1048575;				// For simplicity we set the denominator to the maximum 1048575

									// Set up PLL A with the calculated multiplication ratio
	//setupPLL(SI5351_PLL_A, mult, num, denom);
	setupPLLInt(SI5351_PLL_A, 28); //testing number, hard coded
  ba:	6c e1       	ldi	r22, 0x1C	; 28
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 ad 02 	call	0x55a	; 0x55a <setupPLLInt>
									// The final R division stage can divide by a power of two, from 1..128.
									// reprented by constants SI_R_DIV1 to SI_R_DIV128 (see si5351a.h header file)
									// If you want to output frequencies below 1MHz, you have to use the
									// final R division stage
	//setupMultisynth(CHANNEL_0, SI5351_PLL_A, num, denom);
	setupMultisynthInt(CHANNEL_0, SI5351_PLL_A, 50);
  c2:	42 e3       	ldi	r20, 0x32	; 50
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 40 04 	call	0x880	; 0x880 <setupMultisynthInt>
									// Reset the PLL. This causes a glitch in the output. For small changes to
									// the parameters, you don't need to reset the PLL, and there is no glitch

	// Sets PLLB_rst and PLLA_rst to 1 in Reg 177
	write8(SI5351_REGISTER_177_PLL_RESET, 0xA0); // 0xA0 -> 10100000
  cc:	60 ea       	ldi	r22, 0xA0	; 160
  ce:	81 eb       	ldi	r24, 0xB1	; 177
  d0:	0e 94 84 00 	call	0x108	; 0x108 <write8>

									// Finally switch on the CLK0 output (0x4F)
									// and set the MultiSynth0 input to be PLL A
	write8(SI5351_REGISTER_16_CLK0_CONTROL, 0x4F); // 00001111
  d4:	6f e4       	ldi	r22, 0x4F	; 79
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	0e 94 84 00 	call	0x108	; 0x108 <write8>
	
	enableOutputs(true);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 5e 04 	call	0x8bc	; 0x8bc <enableOutputs>
  e2:	08 95       	ret

000000e4 <main>:
#include "Si5351A_PLL.h"
#include "asserts.h"

int main(void)
{
	Si5351A_setup();
  e4:	0e 94 98 00 	call	0x130	; 0x130 <Si5351A_setup>

	si5351aSetFrequency(10000000);
  e8:	60 e8       	ldi	r22, 0x80	; 128
  ea:	76 e9       	ldi	r23, 0x96	; 150
  ec:	88 e9       	ldi	r24, 0x98	; 152
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 5d 00 	call	0xba	; 0xba <si5351aSetFrequency>

	return 0;
}
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	08 95       	ret

000000fa <writeN>:
}

err_t setupRdiv(uint8_t output, si5351RDiv_t div, uint32_t* freq) {

  return ERROR_NONE;
}
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	42 e0       	ldi	r20, 0x02	; 2
  fe:	bc 01       	movw	r22, r24
 100:	80 e6       	ldi	r24, 0x60	; 96
 102:	0e 94 c8 04 	call	0x990	; 0x990 <tw_master_transmit>
 106:	08 95       	ret

00000108 <write8>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	00 d0       	rcall	.+0      	; 0x10e <write8+0x6>
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	6a 83       	std	Y+2, r22	; 0x02
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	42 e0       	ldi	r20, 0x02	; 2
 11a:	be 01       	movw	r22, r28
 11c:	6f 5f       	subi	r22, 0xFF	; 255
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	80 e6       	ldi	r24, 0x60	; 96
 122:	0e 94 c8 04 	call	0x990	; 0x990 <tw_master_transmit>
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <Si5351A_setup>:
 130:	6f ef       	ldi	r22, 0xFF	; 255
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 138:	60 e8       	ldi	r22, 0x80	; 128
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 140:	60 e8       	ldi	r22, 0x80	; 128
 142:	81 e1       	ldi	r24, 0x11	; 17
 144:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 148:	60 e8       	ldi	r22, 0x80	; 128
 14a:	82 e1       	ldi	r24, 0x12	; 18
 14c:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 150:	60 e8       	ldi	r22, 0x80	; 128
 152:	83 e1       	ldi	r24, 0x13	; 19
 154:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 158:	60 e8       	ldi	r22, 0x80	; 128
 15a:	84 e1       	ldi	r24, 0x14	; 20
 15c:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 160:	60 e8       	ldi	r22, 0x80	; 128
 162:	85 e1       	ldi	r24, 0x15	; 21
 164:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 168:	60 e8       	ldi	r22, 0x80	; 128
 16a:	86 e1       	ldi	r24, 0x16	; 22
 16c:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 170:	60 e8       	ldi	r22, 0x80	; 128
 172:	87 e1       	ldi	r24, 0x17	; 23
 174:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 178:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	87 eb       	ldi	r24, 0xB7	; 183
 17e:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 182:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Si5351_plla_configured>
 186:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <Si5351_plla_freq>
 18a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Si5351_plla_freq+0x1>
 18e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <Si5351_plla_freq+0x2>
 192:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Si5351_plla_freq+0x3>
 196:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Si5351_pllb_configured>
 19a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 19e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 1a2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end+0x2>
 1a6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x3>
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Si5351_initialised>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <setupPLL>:
 1b6:	2f 92       	push	r2
 1b8:	3f 92       	push	r3
 1ba:	4f 92       	push	r4
 1bc:	5f 92       	push	r5
 1be:	6f 92       	push	r6
 1c0:	7f 92       	push	r7
 1c2:	8f 92       	push	r8
 1c4:	9f 92       	push	r9
 1c6:	af 92       	push	r10
 1c8:	bf 92       	push	r11
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	2d 97       	sbiw	r28, 0x0d	; 13
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	cd bf       	out	0x3d, r28	; 61
 1ea:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Si5351_initialised>
 1ee:	99 23       	and	r25, r25
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <setupPLL+0x3e>
 1f2:	8c c1       	rjmp	.+792    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 1f4:	91 ef       	ldi	r25, 0xF1	; 241
 1f6:	96 0f       	add	r25, r22
 1f8:	9c 34       	cpi	r25, 0x4C	; 76
 1fa:	08 f0       	brcs	.+2      	; 0x1fe <setupPLL+0x48>
 1fc:	8a c1       	rjmp	.+788    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 1fe:	e1 14       	cp	r14, r1
 200:	f1 04       	cpc	r15, r1
 202:	01 05       	cpc	r16, r1
 204:	11 05       	cpc	r17, r1
 206:	09 f4       	brne	.+2      	; 0x20a <setupPLL+0x54>
 208:	87 c1       	rjmp	.+782    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 20a:	21 15       	cp	r18, r1
 20c:	31 05       	cpc	r19, r1
 20e:	90 e1       	ldi	r25, 0x10	; 16
 210:	49 07       	cpc	r20, r25
 212:	51 05       	cpc	r21, r1
 214:	08 f0       	brcs	.+2      	; 0x218 <setupPLL+0x62>
 216:	83 c1       	rjmp	.+774    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 218:	e1 14       	cp	r14, r1
 21a:	f1 04       	cpc	r15, r1
 21c:	90 e1       	ldi	r25, 0x10	; 16
 21e:	09 07       	cpc	r16, r25
 220:	11 05       	cpc	r17, r1
 222:	08 f0       	brcs	.+2      	; 0x226 <setupPLL+0x70>
 224:	7f c1       	rjmp	.+766    	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 226:	67 01       	movw	r12, r14
 228:	78 01       	movw	r14, r16
 22a:	49 01       	movw	r8, r18
 22c:	5a 01       	movw	r10, r20
 22e:	6d 87       	std	Y+13, r22	; 0x0d
 230:	18 2f       	mov	r17, r24
 232:	23 2b       	or	r18, r19
 234:	24 2b       	or	r18, r20
 236:	25 2b       	or	r18, r21
 238:	99 f4       	brne	.+38     	; 0x260 <setupPLL+0xaa>
 23a:	46 2e       	mov	r4, r22
 23c:	51 2c       	mov	r5, r1
 23e:	24 e0       	ldi	r18, 0x04	; 4
 240:	42 1a       	sub	r4, r18
 242:	51 08       	sbc	r5, r1
 244:	56 94       	lsr	r5
 246:	54 2c       	mov	r5, r4
 248:	44 24       	eor	r4, r4
 24a:	57 94       	ror	r5
 24c:	47 94       	ror	r4
 24e:	05 2c       	mov	r0, r5
 250:	00 0c       	add	r0, r0
 252:	66 08       	sbc	r6, r6
 254:	77 08       	sbc	r7, r7
 256:	89 82       	std	Y+1, r8	; 0x01
 258:	9a 82       	std	Y+2, r9	; 0x02
 25a:	ab 82       	std	Y+3, r10	; 0x03
 25c:	bc 82       	std	Y+4, r11	; 0x04
 25e:	80 c0       	rjmp	.+256    	; 0x360 <setupPLL+0x1aa>
 260:	4d 85       	ldd	r20, Y+13	; 0x0d
 262:	30 e8       	ldi	r19, 0x80	; 128
 264:	43 9f       	mul	r20, r19
 266:	10 01       	movw	r2, r0
 268:	11 24       	eor	r1, r1
 26a:	c5 01       	movw	r24, r10
 26c:	b4 01       	movw	r22, r8
 26e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 272:	2b 01       	movw	r4, r22
 274:	3c 01       	movw	r6, r24
 276:	c7 01       	movw	r24, r14
 278:	b6 01       	movw	r22, r12
 27a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 27e:	69 83       	std	Y+1, r22	; 0x01
 280:	7a 83       	std	Y+2, r23	; 0x02
 282:	8b 83       	std	Y+3, r24	; 0x03
 284:	9c 83       	std	Y+4, r25	; 0x04
 286:	9b 01       	movw	r18, r22
 288:	ac 01       	movw	r20, r24
 28a:	c3 01       	movw	r24, r6
 28c:	b2 01       	movw	r22, r4
 28e:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divsf3>
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	53 e4       	ldi	r21, 0x43	; 67
 29a:	0e 94 f3 06 	call	0xde6	; 0xde6 <__mulsf3>
 29e:	0e 94 4a 06 	call	0xc94	; 0xc94 <floor>
 2a2:	6d 83       	std	Y+5, r22	; 0x05
 2a4:	7e 83       	std	Y+6, r23	; 0x06
 2a6:	8f 83       	std	Y+7, r24	; 0x07
 2a8:	98 87       	std	Y+8, r25	; 0x08
 2aa:	b1 01       	movw	r22, r2
 2ac:	07 2e       	mov	r0, r23
 2ae:	00 0c       	add	r0, r0
 2b0:	88 0b       	sbc	r24, r24
 2b2:	99 0b       	sbc	r25, r25
 2b4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
 2b8:	2d 81       	ldd	r18, Y+5	; 0x05
 2ba:	3e 81       	ldd	r19, Y+6	; 0x06
 2bc:	4f 81       	ldd	r20, Y+7	; 0x07
 2be:	58 85       	ldd	r21, Y+8	; 0x08
 2c0:	0e 94 00 05 	call	0xa00	; 0xa00 <__addsf3>
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	54 e4       	ldi	r21, 0x44	; 68
 2cc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__subsf3>
 2d0:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 2d4:	2b 01       	movw	r4, r22
 2d6:	3c 01       	movw	r6, r24
 2d8:	d5 01       	movw	r26, r10
 2da:	c4 01       	movw	r24, r8
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	aa 1f       	adc	r26, r26
 2e2:	bb 1f       	adc	r27, r27
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	aa 1f       	adc	r26, r26
 2ea:	bb 1f       	adc	r27, r27
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	aa 1f       	adc	r26, r26
 2f2:	bb 1f       	adc	r27, r27
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	aa 1f       	adc	r26, r26
 2fa:	bb 1f       	adc	r27, r27
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	aa 1f       	adc	r26, r26
 302:	bb 1f       	adc	r27, r27
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	aa 1f       	adc	r26, r26
 30a:	bb 1f       	adc	r27, r27
 30c:	9c 01       	movw	r18, r24
 30e:	ad 01       	movw	r20, r26
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	44 1f       	adc	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	29 87       	std	Y+9, r18	; 0x09
 31a:	3a 87       	std	Y+10, r19	; 0x0a
 31c:	4b 87       	std	Y+11, r20	; 0x0b
 31e:	5c 87       	std	Y+12, r21	; 0x0c
 320:	2d 81       	ldd	r18, Y+5	; 0x05
 322:	3e 81       	ldd	r19, Y+6	; 0x06
 324:	4f 81       	ldd	r20, Y+7	; 0x07
 326:	58 85       	ldd	r21, Y+8	; 0x08
 328:	69 81       	ldd	r22, Y+1	; 0x01
 32a:	7a 81       	ldd	r23, Y+2	; 0x02
 32c:	8b 81       	ldd	r24, Y+3	; 0x03
 32e:	9c 81       	ldd	r25, Y+4	; 0x04
 330:	0e 94 f3 06 	call	0xde6	; 0xde6 <__mulsf3>
 334:	69 83       	std	Y+1, r22	; 0x01
 336:	7a 83       	std	Y+2, r23	; 0x02
 338:	8b 83       	std	Y+3, r24	; 0x03
 33a:	9c 83       	std	Y+4, r25	; 0x04
 33c:	69 85       	ldd	r22, Y+9	; 0x09
 33e:	7a 85       	ldd	r23, Y+10	; 0x0a
 340:	8b 85       	ldd	r24, Y+11	; 0x0b
 342:	9c 85       	ldd	r25, Y+12	; 0x0c
 344:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 348:	29 81       	ldd	r18, Y+1	; 0x01
 34a:	3a 81       	ldd	r19, Y+2	; 0x02
 34c:	4b 81       	ldd	r20, Y+3	; 0x03
 34e:	5c 81       	ldd	r21, Y+4	; 0x04
 350:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__subsf3>
 354:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 358:	69 83       	std	Y+1, r22	; 0x01
 35a:	7a 83       	std	Y+2, r23	; 0x02
 35c:	8b 83       	std	Y+3, r24	; 0x03
 35e:	9c 83       	std	Y+4, r25	; 0x04
 360:	11 11       	cpse	r17, r1
 362:	03 c0       	rjmp	.+6      	; 0x36a <setupPLL+0x1b4>
 364:	3a e1       	ldi	r19, 0x1A	; 26
 366:	3d 83       	std	Y+5, r19	; 0x05
 368:	02 c0       	rjmp	.+4      	; 0x36e <setupPLL+0x1b8>
 36a:	42 e2       	ldi	r20, 0x22	; 34
 36c:	4d 83       	std	Y+5, r20	; 0x05
 36e:	6d 2d       	mov	r22, r13
 370:	8d 81       	ldd	r24, Y+5	; 0x05
 372:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 376:	6c 2d       	mov	r22, r12
 378:	8d 81       	ldd	r24, Y+5	; 0x05
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 380:	d3 01       	movw	r26, r6
 382:	c2 01       	movw	r24, r4
 384:	88 27       	eor	r24, r24
 386:	99 27       	eor	r25, r25
 388:	a3 70       	andi	r26, 0x03	; 3
 38a:	bb 27       	eor	r27, r27
 38c:	bd 01       	movw	r22, r26
 38e:	88 27       	eor	r24, r24
 390:	99 27       	eor	r25, r25
 392:	8d 81       	ldd	r24, Y+5	; 0x05
 394:	8e 5f       	subi	r24, 0xFE	; 254
 396:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 39a:	65 2d       	mov	r22, r5
 39c:	8d 81       	ldd	r24, Y+5	; 0x05
 39e:	8d 5f       	subi	r24, 0xFD	; 253
 3a0:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 3a4:	64 2d       	mov	r22, r4
 3a6:	8d 81       	ldd	r24, Y+5	; 0x05
 3a8:	8c 5f       	subi	r24, 0xFC	; 252
 3aa:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 3ae:	d7 01       	movw	r26, r14
 3b0:	c6 01       	movw	r24, r12
 3b2:	88 27       	eor	r24, r24
 3b4:	99 27       	eor	r25, r25
 3b6:	af 70       	andi	r26, 0x0F	; 15
 3b8:	bb 27       	eor	r27, r27
 3ba:	07 2e       	mov	r0, r23
 3bc:	7c e0       	ldi	r23, 0x0C	; 12
 3be:	b6 95       	lsr	r27
 3c0:	a7 95       	ror	r26
 3c2:	97 95       	ror	r25
 3c4:	87 95       	ror	r24
 3c6:	7a 95       	dec	r23
 3c8:	d1 f7       	brne	.-12     	; 0x3be <setupPLL+0x208>
 3ca:	70 2d       	mov	r23, r0
 3cc:	49 81       	ldd	r20, Y+1	; 0x01
 3ce:	5a 81       	ldd	r21, Y+2	; 0x02
 3d0:	6b 81       	ldd	r22, Y+3	; 0x03
 3d2:	7c 81       	ldd	r23, Y+4	; 0x04
 3d4:	44 27       	eor	r20, r20
 3d6:	55 27       	eor	r21, r21
 3d8:	6f 70       	andi	r22, 0x0F	; 15
 3da:	77 27       	eor	r23, r23
 3dc:	68 2b       	or	r22, r24
 3de:	8d 81       	ldd	r24, Y+5	; 0x05
 3e0:	8b 5f       	subi	r24, 0xFB	; 251
 3e2:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 3e6:	5a 81       	ldd	r21, Y+2	; 0x02
 3e8:	65 2f       	mov	r22, r21
 3ea:	8d 81       	ldd	r24, Y+5	; 0x05
 3ec:	8a 5f       	subi	r24, 0xFA	; 250
 3ee:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 3f2:	69 81       	ldd	r22, Y+1	; 0x01
 3f4:	8d 81       	ldd	r24, Y+5	; 0x05
 3f6:	89 5f       	subi	r24, 0xF9	; 249
 3f8:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 3fc:	60 ea       	ldi	r22, 0xA0	; 160
 3fe:	81 eb       	ldi	r24, 0xB1	; 177
 400:	0e 94 84 00 	call	0x108	; 0x108 <write8>
 404:	11 11       	cpse	r17, r1
 406:	41 c0       	rjmp	.+130    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 408:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <Si5351_crystalFreq>
 40c:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <Si5351_crystalFreq+0x1>
 410:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Si5351_crystalFreq+0x2>
 414:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Si5351_crystalFreq+0x3>
 418:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 41c:	2b 01       	movw	r4, r22
 41e:	3c 01       	movw	r6, r24
 420:	c5 01       	movw	r24, r10
 422:	b4 01       	movw	r22, r8
 424:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 428:	4b 01       	movw	r8, r22
 42a:	5c 01       	movw	r10, r24
 42c:	c7 01       	movw	r24, r14
 42e:	b6 01       	movw	r22, r12
 430:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 434:	9b 01       	movw	r18, r22
 436:	ac 01       	movw	r20, r24
 438:	c5 01       	movw	r24, r10
 43a:	b4 01       	movw	r22, r8
 43c:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divsf3>
 440:	6b 01       	movw	r12, r22
 442:	7c 01       	movw	r14, r24
 444:	2d 85       	ldd	r18, Y+13	; 0x0d
 446:	62 2f       	mov	r22, r18
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
 452:	a7 01       	movw	r20, r14
 454:	96 01       	movw	r18, r12
 456:	0e 94 00 05 	call	0xa00	; 0xa00 <__addsf3>
 45a:	9b 01       	movw	r18, r22
 45c:	ac 01       	movw	r20, r24
 45e:	c3 01       	movw	r24, r6
 460:	b2 01       	movw	r22, r4
 462:	0e 94 f3 06 	call	0xde6	; 0xde6 <__mulsf3>
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <Si5351_plla_configured>
 46c:	0e 94 4a 06 	call	0xc94	; 0xc94 <floor>
 470:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 474:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <Si5351_plla_freq>
 478:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <Si5351_plla_freq+0x1>
 47c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <Si5351_plla_freq+0x2>
 480:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <Si5351_plla_freq+0x3>
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	4f c0       	rjmp	.+158    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 48a:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <Si5351_crystalFreq>
 48e:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <Si5351_crystalFreq+0x1>
 492:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Si5351_crystalFreq+0x2>
 496:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Si5351_crystalFreq+0x3>
 49a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 49e:	2b 01       	movw	r4, r22
 4a0:	3c 01       	movw	r6, r24
 4a2:	c5 01       	movw	r24, r10
 4a4:	b4 01       	movw	r22, r8
 4a6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 4aa:	4b 01       	movw	r8, r22
 4ac:	5c 01       	movw	r10, r24
 4ae:	c7 01       	movw	r24, r14
 4b0:	b6 01       	movw	r22, r12
 4b2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 4b6:	9b 01       	movw	r18, r22
 4b8:	ac 01       	movw	r20, r24
 4ba:	c5 01       	movw	r24, r10
 4bc:	b4 01       	movw	r22, r8
 4be:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divsf3>
 4c2:	6b 01       	movw	r12, r22
 4c4:	7c 01       	movw	r14, r24
 4c6:	3d 85       	ldd	r19, Y+13	; 0x0d
 4c8:	63 2f       	mov	r22, r19
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
 4d4:	a7 01       	movw	r20, r14
 4d6:	96 01       	movw	r18, r12
 4d8:	0e 94 00 05 	call	0xa00	; 0xa00 <__addsf3>
 4dc:	9b 01       	movw	r18, r22
 4de:	ac 01       	movw	r20, r24
 4e0:	c3 01       	movw	r24, r6
 4e2:	b2 01       	movw	r22, r4
 4e4:	0e 94 f3 06 	call	0xde6	; 0xde6 <__mulsf3>
 4e8:	21 e0       	ldi	r18, 0x01	; 1
 4ea:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <Si5351_pllb_configured>
 4ee:	0e 94 4a 06 	call	0xc94	; 0xc94 <floor>
 4f2:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 4f6:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
 4fa:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
 4fe:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
 502:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e c0       	rjmp	.+28     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 50c:	85 e0       	ldi	r24, 0x05	; 5
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0b c0       	rjmp	.+22     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	08 c0       	rjmp	.+16     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 518:	84 e0       	ldi	r24, 0x04	; 4
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	05 c0       	rjmp	.+10     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 524:	84 e0       	ldi	r24, 0x04	; 4
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	2d 96       	adiw	r28, 0x0d	; 13
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	f8 94       	cli
 52e:	de bf       	out	0x3e, r29	; 62
 530:	0f be       	out	0x3f, r0	; 63
 532:	cd bf       	out	0x3d, r28	; 61
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	df 90       	pop	r13
 542:	cf 90       	pop	r12
 544:	bf 90       	pop	r11
 546:	af 90       	pop	r10
 548:	9f 90       	pop	r9
 54a:	8f 90       	pop	r8
 54c:	7f 90       	pop	r7
 54e:	6f 90       	pop	r6
 550:	5f 90       	pop	r5
 552:	4f 90       	pop	r4
 554:	3f 90       	pop	r3
 556:	2f 90       	pop	r2
 558:	08 95       	ret

0000055a <setupPLLInt>:
 55a:	ef 92       	push	r14
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	e1 2c       	mov	r14, r1
 564:	f1 2c       	mov	r15, r1
 566:	87 01       	movw	r16, r14
 568:	e3 94       	inc	r14
 56a:	20 e0       	ldi	r18, 0x00	; 0
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	a9 01       	movw	r20, r18
 570:	0e 94 db 00 	call	0x1b6	; 0x1b6 <setupPLL>
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	ff 90       	pop	r15
 57a:	ef 90       	pop	r14
 57c:	08 95       	ret

0000057e <setupMultisynth>:
            used, but this isn't currently implemented in the driver.
*/
/**************************************************************************/
err_t setupMultisynth(uint8_t output, si5351PLL_t pllSource,
                                       uint32_t div, uint32_t num,
                                       uint32_t denom) {
 57e:	4f 92       	push	r4
 580:	5f 92       	push	r5
 582:	6f 92       	push	r6
 584:	7f 92       	push	r7
 586:	8f 92       	push	r8
 588:	9f 92       	push	r9
 58a:	af 92       	push	r10
 58c:	bf 92       	push	r11
 58e:	cf 92       	push	r12
 590:	df 92       	push	r13
 592:	ef 92       	push	r14
 594:	ff 92       	push	r15
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
 5a2:	65 97       	sbiw	r28, 0x15	; 21
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
	 uint32_t P1; /* Multisynth config register P1 */
	 uint32_t P2; /* Multisynth config register P2 */
	 uint32_t P3; /* Multisynth config register P3 */

	 /* Basic validation */
  ASSERT(Si5351_initialised, ERROR_DEVICENOTINITIALISED);
 5ae:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Si5351_initialised>
 5b2:	99 23       	and	r25, r25
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <setupMultisynth+0x3a>
 5b6:	36 c1       	rjmp	.+620    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
  ASSERT(output < 3, ERROR_INVALIDPARAMETER);       /* Channel range */
 5b8:	83 30       	cpi	r24, 0x03	; 3
 5ba:	08 f0       	brcs	.+2      	; 0x5be <setupMultisynth+0x40>
 5bc:	36 c1       	rjmp	.+620    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
  ASSERT(div > 3, ERROR_INVALIDPARAMETER);          /* Divider integer value */
 5be:	24 30       	cpi	r18, 0x04	; 4
 5c0:	31 05       	cpc	r19, r1
 5c2:	41 05       	cpc	r20, r1
 5c4:	51 05       	cpc	r21, r1
 5c6:	08 f4       	brcc	.+2      	; 0x5ca <setupMultisynth+0x4c>
 5c8:	33 c1       	rjmp	.+614    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
  ASSERT(div < 2049, ERROR_INVALIDPARAMETER);       /* Divider integer value */
 5ca:	21 30       	cpi	r18, 0x01	; 1
 5cc:	98 e0       	ldi	r25, 0x08	; 8
 5ce:	39 07       	cpc	r19, r25
 5d0:	41 05       	cpc	r20, r1
 5d2:	51 05       	cpc	r21, r1
 5d4:	08 f0       	brcs	.+2      	; 0x5d8 <setupMultisynth+0x5a>
 5d6:	2f c1       	rjmp	.+606    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
  ASSERT(denom > 0, ERROR_INVALIDPARAMETER);        /* Avoid divide by zero */
 5d8:	a1 14       	cp	r10, r1
 5da:	b1 04       	cpc	r11, r1
 5dc:	c1 04       	cpc	r12, r1
 5de:	d1 04       	cpc	r13, r1
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <setupMultisynth+0x66>
 5e2:	2c c1       	rjmp	.+600    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
  ASSERT(num <= 0xFFFFF, ERROR_INVALIDPARAMETER);   /* 20-bit limit */
 5e4:	e1 14       	cp	r14, r1
 5e6:	f1 04       	cpc	r15, r1
 5e8:	a0 e1       	ldi	r26, 0x10	; 16
 5ea:	0a 07       	cpc	r16, r26
 5ec:	11 05       	cpc	r17, r1
 5ee:	08 f0       	brcs	.+2      	; 0x5f2 <setupMultisynth+0x74>
 5f0:	28 c1       	rjmp	.+592    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
  ASSERT(denom <= 0xFFFFF, ERROR_INVALIDPARAMETER); /* 20-bit limit */
 5f2:	a1 14       	cp	r10, r1
 5f4:	b1 04       	cpc	r11, r1
 5f6:	b0 e1       	ldi	r27, 0x10	; 16
 5f8:	cb 06       	cpc	r12, r27
 5fa:	d1 04       	cpc	r13, r1
 5fc:	08 f0       	brcs	.+2      	; 0x600 <setupMultisynth+0x82>
 5fe:	24 c1       	rjmp	.+584    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 600:	aa 86       	std	Y+10, r10	; 0x0a
 602:	bb 86       	std	Y+11, r11	; 0x0b
 604:	cc 86       	std	Y+12, r12	; 0x0c
 606:	dd 86       	std	Y+13, r13	; 0x0d
 608:	47 01       	movw	r8, r14
 60a:	58 01       	movw	r10, r16
 60c:	29 01       	movw	r4, r18
 60e:	3a 01       	movw	r6, r20
 610:	06 2f       	mov	r16, r22
 612:	18 2f       	mov	r17, r24

	/* Set the main PLL config registers */
	if (num == 0) {
 614:	81 14       	cp	r8, r1
 616:	91 04       	cpc	r9, r1
 618:	a1 04       	cpc	r10, r1
 61a:	b1 04       	cpc	r11, r1
 61c:	a1 f4       	brne	.+40     	; 0x646 <setupMultisynth+0xc8>
    /* Integer mode */
    P1 = 128 * div - 512;
 61e:	69 01       	movw	r12, r18
 620:	7a 01       	movw	r14, r20
 622:	24 e0       	ldi	r18, 0x04	; 4
 624:	c2 1a       	sub	r12, r18
 626:	d1 08       	sbc	r13, r1
 628:	e1 08       	sbc	r14, r1
 62a:	2e ef       	ldi	r18, 0xFE	; 254
 62c:	f2 0a       	sbc	r15, r18
 62e:	68 94       	set
 630:	16 f8       	bld	r1, 6
 632:	cc 0c       	add	r12, r12
 634:	dd 1c       	adc	r13, r13
 636:	ee 1c       	adc	r14, r14
 638:	ff 1c       	adc	r15, r15
 63a:	16 94       	lsr	r1
 63c:	d1 f7       	brne	.-12     	; 0x632 <setupMultisynth+0xb4>
    P2 = 0;
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	cb 01       	movw	r24, r22
 644:	8d c0       	rjmp	.+282    	; 0x760 <setupMultisynth+0x1e2>
    P3 = denom;
  } else if (denom == 1) {
 646:	8a 85       	ldd	r24, Y+10	; 0x0a
 648:	9b 85       	ldd	r25, Y+11	; 0x0b
 64a:	ac 85       	ldd	r26, Y+12	; 0x0c
 64c:	bd 85       	ldd	r27, Y+13	; 0x0d
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	a1 05       	cpc	r26, r1
 652:	b1 05       	cpc	r27, r1
 654:	29 f5       	brne	.+74     	; 0x6a0 <setupMultisynth+0x122>
    /* Fractional mode, simplified calculations */
    P1 = 128 * div + 128 * num - 512;
 656:	69 01       	movw	r12, r18
 658:	7a 01       	movw	r14, r20
 65a:	c8 0c       	add	r12, r8
 65c:	d9 1c       	adc	r13, r9
 65e:	ea 1c       	adc	r14, r10
 660:	fb 1c       	adc	r15, r11
 662:	94 e0       	ldi	r25, 0x04	; 4
 664:	c9 1a       	sub	r12, r25
 666:	d1 08       	sbc	r13, r1
 668:	e1 08       	sbc	r14, r1
 66a:	9e ef       	ldi	r25, 0xFE	; 254
 66c:	f9 0a       	sbc	r15, r25
 66e:	68 94       	set
 670:	16 f8       	bld	r1, 6
 672:	cc 0c       	add	r12, r12
 674:	dd 1c       	adc	r13, r13
 676:	ee 1c       	adc	r14, r14
 678:	ff 1c       	adc	r15, r15
 67a:	16 94       	lsr	r1
 67c:	d1 f7       	brne	.-12     	; 0x672 <setupMultisynth+0xf4>
    P2 = 128 * num - 128;
 67e:	b5 01       	movw	r22, r10
 680:	a4 01       	movw	r20, r8
 682:	41 50       	subi	r20, 0x01	; 1
 684:	51 09       	sbc	r21, r1
 686:	61 09       	sbc	r22, r1
 688:	7e 4f       	sbci	r23, 0xFE	; 254
 68a:	cb 01       	movw	r24, r22
 68c:	ba 01       	movw	r22, r20
 68e:	68 94       	set
 690:	16 f8       	bld	r1, 6
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	16 94       	lsr	r1
 69c:	d1 f7       	brne	.-12     	; 0x692 <setupMultisynth+0x114>
 69e:	60 c0       	rjmp	.+192    	; 0x760 <setupMultisynth+0x1e2>
    P3 = 1;
  } else {
    /* Fractional mode */
    P1 = (uint32_t)(128 * div + floor(128 * ((float)num / (float)denom)) - 512);
 6a0:	c5 01       	movw	r24, r10
 6a2:	b4 01       	movw	r22, r8
 6a4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 6a8:	6b 01       	movw	r12, r22
 6aa:	7c 01       	movw	r14, r24
 6ac:	6a 85       	ldd	r22, Y+10	; 0x0a
 6ae:	7b 85       	ldd	r23, Y+11	; 0x0b
 6b0:	8c 85       	ldd	r24, Y+12	; 0x0c
 6b2:	9d 85       	ldd	r25, Y+13	; 0x0d
 6b4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 6b8:	6e 87       	std	Y+14, r22	; 0x0e
 6ba:	7f 87       	std	Y+15, r23	; 0x0f
 6bc:	88 8b       	std	Y+16, r24	; 0x10
 6be:	99 8b       	std	Y+17, r25	; 0x11
 6c0:	9b 01       	movw	r18, r22
 6c2:	ac 01       	movw	r20, r24
 6c4:	c7 01       	movw	r24, r14
 6c6:	b6 01       	movw	r22, r12
 6c8:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divsf3>
 6cc:	20 e0       	ldi	r18, 0x00	; 0
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	53 e4       	ldi	r21, 0x43	; 67
 6d4:	0e 94 f3 06 	call	0xde6	; 0xde6 <__mulsf3>
 6d8:	0e 94 4a 06 	call	0xc94	; 0xc94 <floor>
 6dc:	6a 8b       	std	Y+18, r22	; 0x12
 6de:	7b 8b       	std	Y+19, r23	; 0x13
 6e0:	8c 8b       	std	Y+20, r24	; 0x14
 6e2:	9d 8b       	std	Y+21, r25	; 0x15
 6e4:	c3 01       	movw	r24, r6
 6e6:	b2 01       	movw	r22, r4
 6e8:	68 94       	set
 6ea:	16 f8       	bld	r1, 6
 6ec:	66 0f       	add	r22, r22
 6ee:	77 1f       	adc	r23, r23
 6f0:	88 1f       	adc	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	16 94       	lsr	r1
 6f6:	d1 f7       	brne	.-12     	; 0x6ec <setupMultisynth+0x16e>
 6f8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 6fc:	2a 89       	ldd	r18, Y+18	; 0x12
 6fe:	3b 89       	ldd	r19, Y+19	; 0x13
 700:	4c 89       	ldd	r20, Y+20	; 0x14
 702:	5d 89       	ldd	r21, Y+21	; 0x15
 704:	0e 94 00 05 	call	0xa00	; 0xa00 <__addsf3>
 708:	20 e0       	ldi	r18, 0x00	; 0
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	40 e0       	ldi	r20, 0x00	; 0
 70e:	54 e4       	ldi	r21, 0x44	; 68
 710:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__subsf3>
 714:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
 718:	6b 01       	movw	r12, r22
 71a:	7c 01       	movw	r14, r24
    P2 = (uint32_t)(128 * num -
                    denom * floor(128 * ((float)num / (float)denom)));
 71c:	2a 89       	ldd	r18, Y+18	; 0x12
 71e:	3b 89       	ldd	r19, Y+19	; 0x13
 720:	4c 89       	ldd	r20, Y+20	; 0x14
 722:	5d 89       	ldd	r21, Y+21	; 0x15
 724:	6e 85       	ldd	r22, Y+14	; 0x0e
 726:	7f 85       	ldd	r23, Y+15	; 0x0f
 728:	88 89       	ldd	r24, Y+16	; 0x10
 72a:	99 89       	ldd	r25, Y+17	; 0x11
 72c:	0e 94 f3 06 	call	0xde6	; 0xde6 <__mulsf3>
 730:	6e 87       	std	Y+14, r22	; 0x0e
 732:	7f 87       	std	Y+15, r23	; 0x0f
 734:	88 8b       	std	Y+16, r24	; 0x10
 736:	99 8b       	std	Y+17, r25	; 0x11
    P2 = 128 * num - 128;
    P3 = 1;
  } else {
    /* Fractional mode */
    P1 = (uint32_t)(128 * div + floor(128 * ((float)num / (float)denom)) - 512);
    P2 = (uint32_t)(128 * num -
 738:	c5 01       	movw	r24, r10
 73a:	b4 01       	movw	r22, r8
 73c:	68 94       	set
 73e:	16 f8       	bld	r1, 6
 740:	66 0f       	add	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	16 94       	lsr	r1
 74a:	d1 f7       	brne	.-12     	; 0x740 <setupMultisynth+0x1c2>
 74c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__floatunsisf>
 750:	2e 85       	ldd	r18, Y+14	; 0x0e
 752:	3f 85       	ldd	r19, Y+15	; 0x0f
 754:	48 89       	ldd	r20, Y+16	; 0x10
 756:	59 89       	ldd	r21, Y+17	; 0x11
 758:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__subsf3>
 75c:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixunssfsi>
    P3 = denom;
  }

	/* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = 0;
  switch (output) {
 760:	11 30       	cpi	r17, 0x01	; 1
 762:	29 f0       	breq	.+10     	; 0x76e <setupMultisynth+0x1f0>
 764:	40 f0       	brcs	.+16     	; 0x776 <setupMultisynth+0x1f8>
 766:	12 30       	cpi	r17, 0x02	; 2
 768:	21 f0       	breq	.+8      	; 0x772 <setupMultisynth+0x1f4>
                    denom * floor(128 * ((float)num / (float)denom)));
    P3 = denom;
  }

	/* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = 0;
 76a:	20 e0       	ldi	r18, 0x00	; 0
 76c:	05 c0       	rjmp	.+10     	; 0x778 <setupMultisynth+0x1fa>
  switch (output) {
  case 0:
    baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
    break;
  case 1:
    baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 76e:	22 e3       	ldi	r18, 0x32	; 50
    break;
 770:	03 c0       	rjmp	.+6      	; 0x778 <setupMultisynth+0x1fa>
  case 2:
    baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 772:	2a e3       	ldi	r18, 0x3A	; 58
    break;
 774:	01 c0       	rjmp	.+2      	; 0x778 <setupMultisynth+0x1fa>

	/* Get the appropriate starting point for the PLL registers */
  uint8_t baseaddr = 0;
  switch (output) {
  case 0:
    baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 776:	2a e2       	ldi	r18, 0x2A	; 42
  }

	/* Set the MSx config registers */
   /* Burst mode: register address auto-increases */
   uint8_t sendBuffer[9];
   sendBuffer[0] = baseaddr;
 778:	29 83       	std	Y+1, r18	; 0x01
   sendBuffer[1] = (P3 & 0xFF00) >> 8;
 77a:	ab 85       	ldd	r26, Y+11	; 0x0b
 77c:	aa 83       	std	Y+2, r26	; 0x02
   sendBuffer[2] = P3 & 0xFF;
 77e:	ba 85       	ldd	r27, Y+10	; 0x0a
 780:	bb 83       	std	Y+3, r27	; 0x03
   sendBuffer[3] = ((P1 & 0x30000) >> 16) | div;
 782:	a7 01       	movw	r20, r14
 784:	96 01       	movw	r18, r12
 786:	22 27       	eor	r18, r18
 788:	33 27       	eor	r19, r19
 78a:	43 70       	andi	r20, 0x03	; 3
 78c:	55 27       	eor	r21, r21
 78e:	44 2a       	or	r4, r20
 790:	4c 82       	std	Y+4, r4	; 0x04
   sendBuffer[4] = (P1 & 0xFF00) >> 8;
 792:	dd 82       	std	Y+5, r13	; 0x05
   sendBuffer[5] = P1 & 0xFF;
 794:	ce 82       	std	Y+6, r12	; 0x06
   sendBuffer[6] = ((P3 & 0xF0000) >> 12) | ((P2 & 0xF0000) >> 16);
 796:	ca 84       	ldd	r12, Y+10	; 0x0a
 798:	db 84       	ldd	r13, Y+11	; 0x0b
 79a:	ec 84       	ldd	r14, Y+12	; 0x0c
 79c:	fd 84       	ldd	r15, Y+13	; 0x0d
 79e:	cc 24       	eor	r12, r12
 7a0:	dd 24       	eor	r13, r13
 7a2:	2f e0       	ldi	r18, 0x0F	; 15
 7a4:	e2 22       	and	r14, r18
 7a6:	ff 24       	eor	r15, r15
 7a8:	26 01       	movw	r4, r12
 7aa:	37 01       	movw	r6, r14
 7ac:	03 2e       	mov	r0, r19
 7ae:	3c e0       	ldi	r19, 0x0C	; 12
 7b0:	76 94       	lsr	r7
 7b2:	67 94       	ror	r6
 7b4:	57 94       	ror	r5
 7b6:	47 94       	ror	r4
 7b8:	3a 95       	dec	r19
 7ba:	d1 f7       	brne	.-12     	; 0x7b0 <setupMultisynth+0x232>
 7bc:	30 2d       	mov	r19, r0
 7be:	6b 01       	movw	r12, r22
 7c0:	7c 01       	movw	r14, r24
 7c2:	cc 24       	eor	r12, r12
 7c4:	dd 24       	eor	r13, r13
 7c6:	af e0       	ldi	r26, 0x0F	; 15
 7c8:	ea 22       	and	r14, r26
 7ca:	ff 24       	eor	r15, r15
 7cc:	24 2d       	mov	r18, r4
 7ce:	2e 29       	or	r18, r14
 7d0:	2f 83       	std	Y+7, r18	; 0x07
   sendBuffer[7] = (P2 & 0xFF00) >> 8;
 7d2:	78 87       	std	Y+8, r23	; 0x08
   sendBuffer[8] = P2 & 0xFF;
 7d4:	69 87       	std	Y+9, r22	; 0x09
   writeN(sendBuffer, 9);
 7d6:	69 e0       	ldi	r22, 0x09	; 9
 7d8:	ce 01       	movw	r24, r28
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	0e 94 7d 00 	call	0xfa	; 0xfa <writeN>

   /* Configure the clk control and enable the output */
   /* TODO: Check if the clk control byte needs to be updated. */
   uint8_t clkControlReg = 0x0F; /* 8mA drive strength, MS0 as CLK0 source, Clock
                                    not inverted, powered up */
   if (pllSource == SI5351_PLL_B)
 7e0:	01 30       	cpi	r16, 0x01	; 1
 7e2:	11 f0       	breq	.+4      	; 0x7e8 <setupMultisynth+0x26a>
   sendBuffer[8] = P2 & 0xFF;
   writeN(sendBuffer, 9);

   /* Configure the clk control and enable the output */
   /* TODO: Check if the clk control byte needs to be updated. */
   uint8_t clkControlReg = 0x0F; /* 8mA drive strength, MS0 as CLK0 source, Clock
 7e4:	6f e0       	ldi	r22, 0x0F	; 15
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <setupMultisynth+0x26c>
                                    not inverted, powered up */
   if (pllSource == SI5351_PLL_B)
     clkControlReg |= (1 << 5); /* Uses PLLB */
 7e8:	6f e2       	ldi	r22, 0x2F	; 47
   if (num == 0)
 7ea:	89 28       	or	r8, r9
 7ec:	8a 28       	or	r8, r10
 7ee:	8b 28       	or	r8, r11
 7f0:	09 f4       	brne	.+2      	; 0x7f4 <setupMultisynth+0x276>
     clkControlReg |= (1 << 6); /* Integer mode */
 7f2:	60 64       	ori	r22, 0x40	; 64
   switch (output) {
 7f4:	11 30       	cpi	r17, 0x01	; 1
 7f6:	51 f0       	breq	.+20     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f8:	18 f0       	brcs	.+6      	; 0x800 <__DATA_REGION_LENGTH__>
 7fa:	12 30       	cpi	r17, 0x02	; 2
 7fc:	69 f0       	breq	.+26     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7fe:	27 c0       	rjmp	.+78     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
   case 0:
     write8(SI5351_REGISTER_16_CLK0_CONTROL, clkControlReg);
 800:	80 e1       	ldi	r24, 0x10	; 16
 802:	0e 94 84 00 	call	0x108	; 0x108 <write8>
   case 2:
     write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg);
     break;
   }

  return ERROR_NONE;
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	90 e0       	ldi	r25, 0x00	; 0
   if (num == 0)
     clkControlReg |= (1 << 6); /* Integer mode */
   switch (output) {
   case 0:
     write8(SI5351_REGISTER_16_CLK0_CONTROL, clkControlReg);
     break;
 80a:	23 c0       	rjmp	.+70     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
   case 1:
     write8(SI5351_REGISTER_17_CLK1_CONTROL, clkControlReg);
 80c:	81 e1       	ldi	r24, 0x11	; 17
 80e:	0e 94 84 00 	call	0x108	; 0x108 <write8>
   case 2:
     write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg);
     break;
   }

  return ERROR_NONE;
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	90 e0       	ldi	r25, 0x00	; 0
   case 0:
     write8(SI5351_REGISTER_16_CLK0_CONTROL, clkControlReg);
     break;
   case 1:
     write8(SI5351_REGISTER_17_CLK1_CONTROL, clkControlReg);
     break;
 816:	1d c0       	rjmp	.+58     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
   case 2:
     write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg);
 818:	82 e1       	ldi	r24, 0x12	; 18
 81a:	0e 94 84 00 	call	0x108	; 0x108 <write8>
     break;
   }

  return ERROR_NONE;
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	90 e0       	ldi	r25, 0x00	; 0
   case 1:
     write8(SI5351_REGISTER_17_CLK1_CONTROL, clkControlReg);
     break;
   case 2:
     write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg);
     break;
 822:	17 c0       	rjmp	.+46     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	 uint32_t P1; /* Multisynth config register P1 */
	 uint32_t P2; /* Multisynth config register P2 */
	 uint32_t P3; /* Multisynth config register P3 */

	 /* Basic validation */
  ASSERT(Si5351_initialised, ERROR_DEVICENOTINITIALISED);
 824:	85 e0       	ldi	r24, 0x05	; 5
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	14 c0       	rjmp	.+40     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
  ASSERT(output < 3, ERROR_INVALIDPARAMETER);       /* Channel range */
 82a:	84 e0       	ldi	r24, 0x04	; 4
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	11 c0       	rjmp	.+34     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
  ASSERT(div > 3, ERROR_INVALIDPARAMETER);          /* Divider integer value */
 830:	84 e0       	ldi	r24, 0x04	; 4
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e c0       	rjmp	.+28     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
  ASSERT(div < 2049, ERROR_INVALIDPARAMETER);       /* Divider integer value */
 836:	84 e0       	ldi	r24, 0x04	; 4
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0b c0       	rjmp	.+22     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
  ASSERT(denom > 0, ERROR_INVALIDPARAMETER);        /* Avoid divide by zero */
 83c:	84 e0       	ldi	r24, 0x04	; 4
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	08 c0       	rjmp	.+16     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
  ASSERT(num <= 0xFFFFF, ERROR_INVALIDPARAMETER);   /* 20-bit limit */
 842:	84 e0       	ldi	r24, 0x04	; 4
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	05 c0       	rjmp	.+10     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
  ASSERT(denom <= 0xFFFFF, ERROR_INVALIDPARAMETER); /* 20-bit limit */
 848:	84 e0       	ldi	r24, 0x04	; 4
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
   case 2:
     write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg);
     break;
   }

  return ERROR_NONE;
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	90 e0       	ldi	r25, 0x00	; 0
}
 852:	65 96       	adiw	r28, 0x15	; 21
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	f8 94       	cli
 858:	de bf       	out	0x3e, r29	; 62
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	cd bf       	out	0x3d, r28	; 61
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	ff 90       	pop	r15
 868:	ef 90       	pop	r14
 86a:	df 90       	pop	r13
 86c:	cf 90       	pop	r12
 86e:	bf 90       	pop	r11
 870:	af 90       	pop	r10
 872:	9f 90       	pop	r9
 874:	8f 90       	pop	r8
 876:	7f 90       	pop	r7
 878:	6f 90       	pop	r6
 87a:	5f 90       	pop	r5
 87c:	4f 90       	pop	r4
 87e:	08 95       	ret

00000880 <setupMultisynthInt>:
                      - SI5351_MULTISYNTH_DIV_6
                      - SI5351_MULTISYNTH_DIV_8
*/
/**************************************************************************/
err_t setupMultisynthInt(uint8_t output, si5351PLL_t pllSource,
                                          si5351MultisynthDiv_t div) {
 880:	af 92       	push	r10
 882:	bf 92       	push	r11
 884:	cf 92       	push	r12
 886:	df 92       	push	r13
 888:	ef 92       	push	r14
 88a:	ff 92       	push	r15
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
  return setupMultisynth(output, pllSource, div, 0, 1);
 890:	24 2f       	mov	r18, r20
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	40 e0       	ldi	r20, 0x00	; 0
 896:	50 e0       	ldi	r21, 0x00	; 0
 898:	a1 2c       	mov	r10, r1
 89a:	b1 2c       	mov	r11, r1
 89c:	65 01       	movw	r12, r10
 89e:	a3 94       	inc	r10
 8a0:	e1 2c       	mov	r14, r1
 8a2:	f1 2c       	mov	r15, r1
 8a4:	87 01       	movw	r16, r14
 8a6:	0e 94 bf 02 	call	0x57e	; 0x57e <setupMultisynth>
}
 8aa:	1f 91       	pop	r17
 8ac:	0f 91       	pop	r16
 8ae:	ff 90       	pop	r15
 8b0:	ef 90       	pop	r14
 8b2:	df 90       	pop	r13
 8b4:	cf 90       	pop	r12
 8b6:	bf 90       	pop	r11
 8b8:	af 90       	pop	r10
 8ba:	08 95       	ret

000008bc <enableOutputs>:
    @brief  Enables or disables all clock outputs
*/
/**************************************************************************/
err_t enableOutputs(bool enabled) {
	/* Make sure we've called init first */
  ASSERT(Si5351_initialised, ERROR_DEVICENOTINITIALISED);
 8bc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Si5351_initialised>
 8c0:	99 23       	and	r25, r25
 8c2:	59 f0       	breq	.+22     	; 0x8da <enableOutputs+0x1e>

  /* Enabled desired outputs (see Register 3) */
  
      write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, enabled ? 0x00 : 0xFF);
 8c4:	88 23       	and	r24, r24
 8c6:	11 f0       	breq	.+4      	; 0x8cc <enableOutputs+0x10>
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <enableOutputs+0x12>
 8cc:	6f ef       	ldi	r22, 0xFF	; 255
 8ce:	83 e0       	ldi	r24, 0x03	; 3
 8d0:	0e 94 84 00 	call	0x108	; 0x108 <write8>

  return ERROR_NONE;
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	08 95       	ret
    @brief  Enables or disables all clock outputs
*/
/**************************************************************************/
err_t enableOutputs(bool enabled) {
	/* Make sure we've called init first */
  ASSERT(Si5351_initialised, ERROR_DEVICENOTINITIALISED);
 8da:	85 e0       	ldi	r24, 0x05	; 5
 8dc:	90 e0       	ldi	r25, 0x00	; 0
  /* Enabled desired outputs (see Register 3) */
  
      write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, enabled ? 0x00 : 0xFF);

  return ERROR_NONE;
}
 8de:	08 95       	ret

000008e0 <tw_start>:
		
		case TW_FREQ_400K:
		/* Set bit rate register 12 and prescaler to 1 resulting in
		SCL_freq = 16MHz/(16 + 2*12*1) = 400KHz	*/
		//TWBR = 12;		
		TWBR = (8000000/400000-16)/2;
 8e0:	84 ea       	ldi	r24, 0xA4	; 164
 8e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 8e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 8ea:	88 23       	and	r24, r24
 8ec:	e4 f7       	brge	.-8      	; 0x8e6 <tw_start+0x6>
 8ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 8f2:	88 7f       	andi	r24, 0xF8	; 248
 8f4:	88 30       	cpi	r24, 0x08	; 8
 8f6:	51 f0       	breq	.+20     	; 0x90c <__stack+0xd>
 8f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 8fc:	88 7f       	andi	r24, 0xF8	; 248
 8fe:	80 31       	cpi	r24, 0x10	; 16
 900:	41 f0       	breq	.+16     	; 0x912 <__stack+0x13>
 902:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 906:	88 7f       	andi	r24, 0xF8	; 248
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	08 95       	ret
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	08 95       	ret
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	08 95       	ret

00000918 <tw_stop>:
 918:	84 e9       	ldi	r24, 0x94	; 148
 91a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 91e:	08 95       	ret

00000920 <tw_write_sla>:
 920:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 924:	84 e8       	ldi	r24, 0x84	; 132
 926:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 92a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 92e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 932:	88 23       	and	r24, r24
 934:	e4 f7       	brge	.-8      	; 0x92e <tw_write_sla+0xe>
 936:	e9 eb       	ldi	r30, 0xB9	; 185
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	80 81       	ld	r24, Z
 93e:	88 7f       	andi	r24, 0xF8	; 248
 940:	88 31       	cpi	r24, 0x18	; 24
 942:	51 f0       	breq	.+20     	; 0x958 <tw_write_sla+0x38>
 944:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 948:	88 7f       	andi	r24, 0xF8	; 248
 94a:	80 34       	cpi	r24, 0x40	; 64
 94c:	41 f0       	breq	.+16     	; 0x95e <tw_write_sla+0x3e>
 94e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 952:	88 7f       	andi	r24, 0xF8	; 248
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	08 95       	ret
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	08 95       	ret
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	08 95       	ret

00000964 <tw_write>:
 964:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 968:	84 e8       	ldi	r24, 0x84	; 132
 96a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 96e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 972:	88 23       	and	r24, r24
 974:	e4 f7       	brge	.-8      	; 0x96e <tw_write+0xa>
 976:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 97a:	88 7f       	andi	r24, 0xF8	; 248
 97c:	88 32       	cpi	r24, 0x28	; 40
 97e:	29 f0       	breq	.+10     	; 0x98a <tw_write+0x26>
 980:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 984:	88 7f       	andi	r24, 0xF8	; 248
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	08 95       	ret
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	08 95       	ret

00000990 <tw_master_transmit>:
	}
}


ret_code_t tw_master_transmit(uint8_t slave_addr, uint8_t* p_data, uint8_t len, bool repeat_start)
{
 990:	ef 92       	push	r14
 992:	ff 92       	push	r15
 994:	0f 93       	push	r16
 996:	1f 93       	push	r17
 998:	cf 93       	push	r28
 99a:	df 93       	push	r29
 99c:	c8 2f       	mov	r28, r24
 99e:	7b 01       	movw	r14, r22
 9a0:	14 2f       	mov	r17, r20
 9a2:	02 2f       	mov	r16, r18
	ret_code_t error_code;
	
	/* Send START condition */
	error_code = tw_start();
 9a4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <tw_start>
	if (error_code != SUCCESS)
 9a8:	00 97       	sbiw	r24, 0x00	; 0
 9aa:	11 f5       	brne	.+68     	; 0x9f0 <tw_master_transmit+0x60>
	{
		return error_code;
	}
	
	uint8_t test = TWSR;
 9ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	/* Send slave address with WRITE flag */
	error_code = tw_write_sla(TW_SLA_W(slave_addr));
 9b0:	8c 2f       	mov	r24, r28
 9b2:	88 0f       	add	r24, r24
 9b4:	0e 94 90 04 	call	0x920	; 0x920 <tw_write_sla>
	if (error_code != SUCCESS)
 9b8:	00 97       	sbiw	r24, 0x00	; 0
 9ba:	d1 f4       	brne	.+52     	; 0x9f0 <tw_master_transmit+0x60>
 9bc:	c0 e0       	ldi	r28, 0x00	; 0
 9be:	d0 e0       	ldi	r29, 0x00	; 0
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <tw_master_transmit+0x44>
	}
	
	/* Send data byte in single or burst mode */
	for (int i = 0; i < len; ++i)
	{
		error_code = tw_write(p_data[i]);
 9c2:	f7 01       	movw	r30, r14
 9c4:	ec 0f       	add	r30, r28
 9c6:	fd 1f       	adc	r31, r29
 9c8:	80 81       	ld	r24, Z
 9ca:	0e 94 b2 04 	call	0x964	; 0x964 <tw_write>
		if (error_code != SUCCESS)
 9ce:	00 97       	sbiw	r24, 0x00	; 0
 9d0:	79 f4       	brne	.+30     	; 0x9f0 <tw_master_transmit+0x60>
	{
		return error_code;
	}
	
	/* Send data byte in single or burst mode */
	for (int i = 0; i < len; ++i)
 9d2:	21 96       	adiw	r28, 0x01	; 1
 9d4:	81 2f       	mov	r24, r17
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	c8 17       	cp	r28, r24
 9da:	d9 07       	cpc	r29, r25
 9dc:	94 f3       	brlt	.-28     	; 0x9c2 <tw_master_transmit+0x32>
		{
			return error_code;
		}
	}
	
	if (!repeat_start)
 9de:	01 11       	cpse	r16, r1
 9e0:	05 c0       	rjmp	.+10     	; 0x9ec <tw_master_transmit+0x5c>
	{
		/* Send STOP condition */
		tw_stop();
 9e2:	0e 94 8c 04 	call	0x918	; 0x918 <tw_stop>
	}
	
	return SUCCESS;
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <tw_master_transmit+0x60>
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	90 e0       	ldi	r25, 0x00	; 0
}
 9f0:	df 91       	pop	r29
 9f2:	cf 91       	pop	r28
 9f4:	1f 91       	pop	r17
 9f6:	0f 91       	pop	r16
 9f8:	ff 90       	pop	r15
 9fa:	ef 90       	pop	r14
 9fc:	08 95       	ret

000009fe <__subsf3>:
 9fe:	50 58       	subi	r21, 0x80	; 128

00000a00 <__addsf3>:
 a00:	bb 27       	eor	r27, r27
 a02:	aa 27       	eor	r26, r26
 a04:	0e 94 17 05 	call	0xa2e	; 0xa2e <__addsf3x>
 a08:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_round>
 a0c:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_pscA>
 a10:	38 f0       	brcs	.+14     	; 0xa20 <__addsf3+0x20>
 a12:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscB>
 a16:	20 f0       	brcs	.+8      	; 0xa20 <__addsf3+0x20>
 a18:	39 f4       	brne	.+14     	; 0xa28 <__addsf3+0x28>
 a1a:	9f 3f       	cpi	r25, 0xFF	; 255
 a1c:	19 f4       	brne	.+6      	; 0xa24 <__addsf3+0x24>
 a1e:	26 f4       	brtc	.+8      	; 0xa28 <__addsf3+0x28>
 a20:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>
 a24:	0e f4       	brtc	.+2      	; 0xa28 <__addsf3+0x28>
 a26:	e0 95       	com	r30
 a28:	e7 fb       	bst	r30, 7
 a2a:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__fp_inf>

00000a2e <__addsf3x>:
 a2e:	e9 2f       	mov	r30, r25
 a30:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_split3>
 a34:	58 f3       	brcs	.-42     	; 0xa0c <__addsf3+0xc>
 a36:	ba 17       	cp	r27, r26
 a38:	62 07       	cpc	r22, r18
 a3a:	73 07       	cpc	r23, r19
 a3c:	84 07       	cpc	r24, r20
 a3e:	95 07       	cpc	r25, r21
 a40:	20 f0       	brcs	.+8      	; 0xa4a <__addsf3x+0x1c>
 a42:	79 f4       	brne	.+30     	; 0xa62 <__addsf3x+0x34>
 a44:	a6 f5       	brtc	.+104    	; 0xaae <__addsf3x+0x80>
 a46:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_zero>
 a4a:	0e f4       	brtc	.+2      	; 0xa4e <__addsf3x+0x20>
 a4c:	e0 95       	com	r30
 a4e:	0b 2e       	mov	r0, r27
 a50:	ba 2f       	mov	r27, r26
 a52:	a0 2d       	mov	r26, r0
 a54:	0b 01       	movw	r0, r22
 a56:	b9 01       	movw	r22, r18
 a58:	90 01       	movw	r18, r0
 a5a:	0c 01       	movw	r0, r24
 a5c:	ca 01       	movw	r24, r20
 a5e:	a0 01       	movw	r20, r0
 a60:	11 24       	eor	r1, r1
 a62:	ff 27       	eor	r31, r31
 a64:	59 1b       	sub	r21, r25
 a66:	99 f0       	breq	.+38     	; 0xa8e <__addsf3x+0x60>
 a68:	59 3f       	cpi	r21, 0xF9	; 249
 a6a:	50 f4       	brcc	.+20     	; 0xa80 <__addsf3x+0x52>
 a6c:	50 3e       	cpi	r21, 0xE0	; 224
 a6e:	68 f1       	brcs	.+90     	; 0xaca <__addsf3x+0x9c>
 a70:	1a 16       	cp	r1, r26
 a72:	f0 40       	sbci	r31, 0x00	; 0
 a74:	a2 2f       	mov	r26, r18
 a76:	23 2f       	mov	r18, r19
 a78:	34 2f       	mov	r19, r20
 a7a:	44 27       	eor	r20, r20
 a7c:	58 5f       	subi	r21, 0xF8	; 248
 a7e:	f3 cf       	rjmp	.-26     	; 0xa66 <__addsf3x+0x38>
 a80:	46 95       	lsr	r20
 a82:	37 95       	ror	r19
 a84:	27 95       	ror	r18
 a86:	a7 95       	ror	r26
 a88:	f0 40       	sbci	r31, 0x00	; 0
 a8a:	53 95       	inc	r21
 a8c:	c9 f7       	brne	.-14     	; 0xa80 <__addsf3x+0x52>
 a8e:	7e f4       	brtc	.+30     	; 0xaae <__addsf3x+0x80>
 a90:	1f 16       	cp	r1, r31
 a92:	ba 0b       	sbc	r27, r26
 a94:	62 0b       	sbc	r22, r18
 a96:	73 0b       	sbc	r23, r19
 a98:	84 0b       	sbc	r24, r20
 a9a:	ba f0       	brmi	.+46     	; 0xaca <__addsf3x+0x9c>
 a9c:	91 50       	subi	r25, 0x01	; 1
 a9e:	a1 f0       	breq	.+40     	; 0xac8 <__addsf3x+0x9a>
 aa0:	ff 0f       	add	r31, r31
 aa2:	bb 1f       	adc	r27, r27
 aa4:	66 1f       	adc	r22, r22
 aa6:	77 1f       	adc	r23, r23
 aa8:	88 1f       	adc	r24, r24
 aaa:	c2 f7       	brpl	.-16     	; 0xa9c <__addsf3x+0x6e>
 aac:	0e c0       	rjmp	.+28     	; 0xaca <__addsf3x+0x9c>
 aae:	ba 0f       	add	r27, r26
 ab0:	62 1f       	adc	r22, r18
 ab2:	73 1f       	adc	r23, r19
 ab4:	84 1f       	adc	r24, r20
 ab6:	48 f4       	brcc	.+18     	; 0xaca <__addsf3x+0x9c>
 ab8:	87 95       	ror	r24
 aba:	77 95       	ror	r23
 abc:	67 95       	ror	r22
 abe:	b7 95       	ror	r27
 ac0:	f7 95       	ror	r31
 ac2:	9e 3f       	cpi	r25, 0xFE	; 254
 ac4:	08 f0       	brcs	.+2      	; 0xac8 <__addsf3x+0x9a>
 ac6:	b0 cf       	rjmp	.-160    	; 0xa28 <__addsf3+0x28>
 ac8:	93 95       	inc	r25
 aca:	88 0f       	add	r24, r24
 acc:	08 f0       	brcs	.+2      	; 0xad0 <__addsf3x+0xa2>
 ace:	99 27       	eor	r25, r25
 ad0:	ee 0f       	add	r30, r30
 ad2:	97 95       	ror	r25
 ad4:	87 95       	ror	r24
 ad6:	08 95       	ret

00000ad8 <__divsf3>:
 ad8:	0e 94 80 05 	call	0xb00	; 0xb00 <__divsf3x>
 adc:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_round>
 ae0:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscB>
 ae4:	58 f0       	brcs	.+22     	; 0xafc <__divsf3+0x24>
 ae6:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_pscA>
 aea:	40 f0       	brcs	.+16     	; 0xafc <__divsf3+0x24>
 aec:	29 f4       	brne	.+10     	; 0xaf8 <__divsf3+0x20>
 aee:	5f 3f       	cpi	r21, 0xFF	; 255
 af0:	29 f0       	breq	.+10     	; 0xafc <__divsf3+0x24>
 af2:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__fp_inf>
 af6:	51 11       	cpse	r21, r1
 af8:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_szero>
 afc:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>

00000b00 <__divsf3x>:
 b00:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_split3>
 b04:	68 f3       	brcs	.-38     	; 0xae0 <__divsf3+0x8>

00000b06 <__divsf3_pse>:
 b06:	99 23       	and	r25, r25
 b08:	b1 f3       	breq	.-20     	; 0xaf6 <__divsf3+0x1e>
 b0a:	55 23       	and	r21, r21
 b0c:	91 f3       	breq	.-28     	; 0xaf2 <__divsf3+0x1a>
 b0e:	95 1b       	sub	r25, r21
 b10:	55 0b       	sbc	r21, r21
 b12:	bb 27       	eor	r27, r27
 b14:	aa 27       	eor	r26, r26
 b16:	62 17       	cp	r22, r18
 b18:	73 07       	cpc	r23, r19
 b1a:	84 07       	cpc	r24, r20
 b1c:	38 f0       	brcs	.+14     	; 0xb2c <__divsf3_pse+0x26>
 b1e:	9f 5f       	subi	r25, 0xFF	; 255
 b20:	5f 4f       	sbci	r21, 0xFF	; 255
 b22:	22 0f       	add	r18, r18
 b24:	33 1f       	adc	r19, r19
 b26:	44 1f       	adc	r20, r20
 b28:	aa 1f       	adc	r26, r26
 b2a:	a9 f3       	breq	.-22     	; 0xb16 <__divsf3_pse+0x10>
 b2c:	35 d0       	rcall	.+106    	; 0xb98 <__divsf3_pse+0x92>
 b2e:	0e 2e       	mov	r0, r30
 b30:	3a f0       	brmi	.+14     	; 0xb40 <__divsf3_pse+0x3a>
 b32:	e0 e8       	ldi	r30, 0x80	; 128
 b34:	32 d0       	rcall	.+100    	; 0xb9a <__divsf3_pse+0x94>
 b36:	91 50       	subi	r25, 0x01	; 1
 b38:	50 40       	sbci	r21, 0x00	; 0
 b3a:	e6 95       	lsr	r30
 b3c:	00 1c       	adc	r0, r0
 b3e:	ca f7       	brpl	.-14     	; 0xb32 <__divsf3_pse+0x2c>
 b40:	2b d0       	rcall	.+86     	; 0xb98 <__divsf3_pse+0x92>
 b42:	fe 2f       	mov	r31, r30
 b44:	29 d0       	rcall	.+82     	; 0xb98 <__divsf3_pse+0x92>
 b46:	66 0f       	add	r22, r22
 b48:	77 1f       	adc	r23, r23
 b4a:	88 1f       	adc	r24, r24
 b4c:	bb 1f       	adc	r27, r27
 b4e:	26 17       	cp	r18, r22
 b50:	37 07       	cpc	r19, r23
 b52:	48 07       	cpc	r20, r24
 b54:	ab 07       	cpc	r26, r27
 b56:	b0 e8       	ldi	r27, 0x80	; 128
 b58:	09 f0       	breq	.+2      	; 0xb5c <__divsf3_pse+0x56>
 b5a:	bb 0b       	sbc	r27, r27
 b5c:	80 2d       	mov	r24, r0
 b5e:	bf 01       	movw	r22, r30
 b60:	ff 27       	eor	r31, r31
 b62:	93 58       	subi	r25, 0x83	; 131
 b64:	5f 4f       	sbci	r21, 0xFF	; 255
 b66:	3a f0       	brmi	.+14     	; 0xb76 <__divsf3_pse+0x70>
 b68:	9e 3f       	cpi	r25, 0xFE	; 254
 b6a:	51 05       	cpc	r21, r1
 b6c:	78 f0       	brcs	.+30     	; 0xb8c <__divsf3_pse+0x86>
 b6e:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__fp_inf>
 b72:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_szero>
 b76:	5f 3f       	cpi	r21, 0xFF	; 255
 b78:	e4 f3       	brlt	.-8      	; 0xb72 <__divsf3_pse+0x6c>
 b7a:	98 3e       	cpi	r25, 0xE8	; 232
 b7c:	d4 f3       	brlt	.-12     	; 0xb72 <__divsf3_pse+0x6c>
 b7e:	86 95       	lsr	r24
 b80:	77 95       	ror	r23
 b82:	67 95       	ror	r22
 b84:	b7 95       	ror	r27
 b86:	f7 95       	ror	r31
 b88:	9f 5f       	subi	r25, 0xFF	; 255
 b8a:	c9 f7       	brne	.-14     	; 0xb7e <__divsf3_pse+0x78>
 b8c:	88 0f       	add	r24, r24
 b8e:	91 1d       	adc	r25, r1
 b90:	96 95       	lsr	r25
 b92:	87 95       	ror	r24
 b94:	97 f9       	bld	r25, 7
 b96:	08 95       	ret
 b98:	e1 e0       	ldi	r30, 0x01	; 1
 b9a:	66 0f       	add	r22, r22
 b9c:	77 1f       	adc	r23, r23
 b9e:	88 1f       	adc	r24, r24
 ba0:	bb 1f       	adc	r27, r27
 ba2:	62 17       	cp	r22, r18
 ba4:	73 07       	cpc	r23, r19
 ba6:	84 07       	cpc	r24, r20
 ba8:	ba 07       	cpc	r27, r26
 baa:	20 f0       	brcs	.+8      	; 0xbb4 <__divsf3_pse+0xae>
 bac:	62 1b       	sub	r22, r18
 bae:	73 0b       	sbc	r23, r19
 bb0:	84 0b       	sbc	r24, r20
 bb2:	ba 0b       	sbc	r27, r26
 bb4:	ee 1f       	adc	r30, r30
 bb6:	88 f7       	brcc	.-30     	; 0xb9a <__divsf3_pse+0x94>
 bb8:	e0 95       	com	r30
 bba:	08 95       	ret

00000bbc <__fixunssfsi>:
 bbc:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_splitA>
 bc0:	88 f0       	brcs	.+34     	; 0xbe4 <__fixunssfsi+0x28>
 bc2:	9f 57       	subi	r25, 0x7F	; 127
 bc4:	98 f0       	brcs	.+38     	; 0xbec <__fixunssfsi+0x30>
 bc6:	b9 2f       	mov	r27, r25
 bc8:	99 27       	eor	r25, r25
 bca:	b7 51       	subi	r27, 0x17	; 23
 bcc:	b0 f0       	brcs	.+44     	; 0xbfa <__fixunssfsi+0x3e>
 bce:	e1 f0       	breq	.+56     	; 0xc08 <__fixunssfsi+0x4c>
 bd0:	66 0f       	add	r22, r22
 bd2:	77 1f       	adc	r23, r23
 bd4:	88 1f       	adc	r24, r24
 bd6:	99 1f       	adc	r25, r25
 bd8:	1a f0       	brmi	.+6      	; 0xbe0 <__fixunssfsi+0x24>
 bda:	ba 95       	dec	r27
 bdc:	c9 f7       	brne	.-14     	; 0xbd0 <__fixunssfsi+0x14>
 bde:	14 c0       	rjmp	.+40     	; 0xc08 <__fixunssfsi+0x4c>
 be0:	b1 30       	cpi	r27, 0x01	; 1
 be2:	91 f0       	breq	.+36     	; 0xc08 <__fixunssfsi+0x4c>
 be4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fp_zero>
 be8:	b1 e0       	ldi	r27, 0x01	; 1
 bea:	08 95       	ret
 bec:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__fp_zero>
 bf0:	67 2f       	mov	r22, r23
 bf2:	78 2f       	mov	r23, r24
 bf4:	88 27       	eor	r24, r24
 bf6:	b8 5f       	subi	r27, 0xF8	; 248
 bf8:	39 f0       	breq	.+14     	; 0xc08 <__fixunssfsi+0x4c>
 bfa:	b9 3f       	cpi	r27, 0xF9	; 249
 bfc:	cc f3       	brlt	.-14     	; 0xbf0 <__fixunssfsi+0x34>
 bfe:	86 95       	lsr	r24
 c00:	77 95       	ror	r23
 c02:	67 95       	ror	r22
 c04:	b3 95       	inc	r27
 c06:	d9 f7       	brne	.-10     	; 0xbfe <__fixunssfsi+0x42>
 c08:	3e f4       	brtc	.+14     	; 0xc18 <__fixunssfsi+0x5c>
 c0a:	90 95       	com	r25
 c0c:	80 95       	com	r24
 c0e:	70 95       	com	r23
 c10:	61 95       	neg	r22
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	8f 4f       	sbci	r24, 0xFF	; 255
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	08 95       	ret

00000c1a <__floatunsisf>:
 c1a:	e8 94       	clt
 c1c:	09 c0       	rjmp	.+18     	; 0xc30 <__floatsisf+0x12>

00000c1e <__floatsisf>:
 c1e:	97 fb       	bst	r25, 7
 c20:	3e f4       	brtc	.+14     	; 0xc30 <__floatsisf+0x12>
 c22:	90 95       	com	r25
 c24:	80 95       	com	r24
 c26:	70 95       	com	r23
 c28:	61 95       	neg	r22
 c2a:	7f 4f       	sbci	r23, 0xFF	; 255
 c2c:	8f 4f       	sbci	r24, 0xFF	; 255
 c2e:	9f 4f       	sbci	r25, 0xFF	; 255
 c30:	99 23       	and	r25, r25
 c32:	a9 f0       	breq	.+42     	; 0xc5e <__floatsisf+0x40>
 c34:	f9 2f       	mov	r31, r25
 c36:	96 e9       	ldi	r25, 0x96	; 150
 c38:	bb 27       	eor	r27, r27
 c3a:	93 95       	inc	r25
 c3c:	f6 95       	lsr	r31
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b7 95       	ror	r27
 c46:	f1 11       	cpse	r31, r1
 c48:	f8 cf       	rjmp	.-16     	; 0xc3a <__floatsisf+0x1c>
 c4a:	fa f4       	brpl	.+62     	; 0xc8a <__floatsisf+0x6c>
 c4c:	bb 0f       	add	r27, r27
 c4e:	11 f4       	brne	.+4      	; 0xc54 <__floatsisf+0x36>
 c50:	60 ff       	sbrs	r22, 0
 c52:	1b c0       	rjmp	.+54     	; 0xc8a <__floatsisf+0x6c>
 c54:	6f 5f       	subi	r22, 0xFF	; 255
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	16 c0       	rjmp	.+44     	; 0xc8a <__floatsisf+0x6c>
 c5e:	88 23       	and	r24, r24
 c60:	11 f0       	breq	.+4      	; 0xc66 <__floatsisf+0x48>
 c62:	96 e9       	ldi	r25, 0x96	; 150
 c64:	11 c0       	rjmp	.+34     	; 0xc88 <__floatsisf+0x6a>
 c66:	77 23       	and	r23, r23
 c68:	21 f0       	breq	.+8      	; 0xc72 <__floatsisf+0x54>
 c6a:	9e e8       	ldi	r25, 0x8E	; 142
 c6c:	87 2f       	mov	r24, r23
 c6e:	76 2f       	mov	r23, r22
 c70:	05 c0       	rjmp	.+10     	; 0xc7c <__floatsisf+0x5e>
 c72:	66 23       	and	r22, r22
 c74:	71 f0       	breq	.+28     	; 0xc92 <__floatsisf+0x74>
 c76:	96 e8       	ldi	r25, 0x86	; 134
 c78:	86 2f       	mov	r24, r22
 c7a:	70 e0       	ldi	r23, 0x00	; 0
 c7c:	60 e0       	ldi	r22, 0x00	; 0
 c7e:	2a f0       	brmi	.+10     	; 0xc8a <__floatsisf+0x6c>
 c80:	9a 95       	dec	r25
 c82:	66 0f       	add	r22, r22
 c84:	77 1f       	adc	r23, r23
 c86:	88 1f       	adc	r24, r24
 c88:	da f7       	brpl	.-10     	; 0xc80 <__floatsisf+0x62>
 c8a:	88 0f       	add	r24, r24
 c8c:	96 95       	lsr	r25
 c8e:	87 95       	ror	r24
 c90:	97 f9       	bld	r25, 7
 c92:	08 95       	ret

00000c94 <floor>:
 c94:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_trunc>
 c98:	90 f0       	brcs	.+36     	; 0xcbe <floor+0x2a>
 c9a:	9f 37       	cpi	r25, 0x7F	; 127
 c9c:	48 f4       	brcc	.+18     	; 0xcb0 <floor+0x1c>
 c9e:	91 11       	cpse	r25, r1
 ca0:	16 f0       	brts	.+4      	; 0xca6 <floor+0x12>
 ca2:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_szero>
 ca6:	60 e0       	ldi	r22, 0x00	; 0
 ca8:	70 e0       	ldi	r23, 0x00	; 0
 caa:	80 e8       	ldi	r24, 0x80	; 128
 cac:	9f eb       	ldi	r25, 0xBF	; 191
 cae:	08 95       	ret
 cb0:	26 f4       	brtc	.+8      	; 0xcba <floor+0x26>
 cb2:	1b 16       	cp	r1, r27
 cb4:	61 1d       	adc	r22, r1
 cb6:	71 1d       	adc	r23, r1
 cb8:	81 1d       	adc	r24, r1
 cba:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_mintl>
 cbe:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_mpack>

00000cc2 <__fp_inf>:
 cc2:	97 f9       	bld	r25, 7
 cc4:	9f 67       	ori	r25, 0x7F	; 127
 cc6:	80 e8       	ldi	r24, 0x80	; 128
 cc8:	70 e0       	ldi	r23, 0x00	; 0
 cca:	60 e0       	ldi	r22, 0x00	; 0
 ccc:	08 95       	ret

00000cce <__fp_mintl>:
 cce:	88 23       	and	r24, r24
 cd0:	71 f4       	brne	.+28     	; 0xcee <__fp_mintl+0x20>
 cd2:	77 23       	and	r23, r23
 cd4:	21 f0       	breq	.+8      	; 0xcde <__fp_mintl+0x10>
 cd6:	98 50       	subi	r25, 0x08	; 8
 cd8:	87 2b       	or	r24, r23
 cda:	76 2f       	mov	r23, r22
 cdc:	07 c0       	rjmp	.+14     	; 0xcec <__fp_mintl+0x1e>
 cde:	66 23       	and	r22, r22
 ce0:	11 f4       	brne	.+4      	; 0xce6 <__fp_mintl+0x18>
 ce2:	99 27       	eor	r25, r25
 ce4:	0d c0       	rjmp	.+26     	; 0xd00 <__fp_mintl+0x32>
 ce6:	90 51       	subi	r25, 0x10	; 16
 ce8:	86 2b       	or	r24, r22
 cea:	70 e0       	ldi	r23, 0x00	; 0
 cec:	60 e0       	ldi	r22, 0x00	; 0
 cee:	2a f0       	brmi	.+10     	; 0xcfa <__fp_mintl+0x2c>
 cf0:	9a 95       	dec	r25
 cf2:	66 0f       	add	r22, r22
 cf4:	77 1f       	adc	r23, r23
 cf6:	88 1f       	adc	r24, r24
 cf8:	da f7       	brpl	.-10     	; 0xcf0 <__fp_mintl+0x22>
 cfa:	88 0f       	add	r24, r24
 cfc:	96 95       	lsr	r25
 cfe:	87 95       	ror	r24
 d00:	97 f9       	bld	r25, 7
 d02:	08 95       	ret

00000d04 <__fp_mpack>:
 d04:	9f 3f       	cpi	r25, 0xFF	; 255
 d06:	31 f0       	breq	.+12     	; 0xd14 <__fp_mpack_finite+0xc>

00000d08 <__fp_mpack_finite>:
 d08:	91 50       	subi	r25, 0x01	; 1
 d0a:	20 f4       	brcc	.+8      	; 0xd14 <__fp_mpack_finite+0xc>
 d0c:	87 95       	ror	r24
 d0e:	77 95       	ror	r23
 d10:	67 95       	ror	r22
 d12:	b7 95       	ror	r27
 d14:	88 0f       	add	r24, r24
 d16:	91 1d       	adc	r25, r1
 d18:	96 95       	lsr	r25
 d1a:	87 95       	ror	r24
 d1c:	97 f9       	bld	r25, 7
 d1e:	08 95       	ret

00000d20 <__fp_nan>:
 d20:	9f ef       	ldi	r25, 0xFF	; 255
 d22:	80 ec       	ldi	r24, 0xC0	; 192
 d24:	08 95       	ret

00000d26 <__fp_pscA>:
 d26:	00 24       	eor	r0, r0
 d28:	0a 94       	dec	r0
 d2a:	16 16       	cp	r1, r22
 d2c:	17 06       	cpc	r1, r23
 d2e:	18 06       	cpc	r1, r24
 d30:	09 06       	cpc	r0, r25
 d32:	08 95       	ret

00000d34 <__fp_pscB>:
 d34:	00 24       	eor	r0, r0
 d36:	0a 94       	dec	r0
 d38:	12 16       	cp	r1, r18
 d3a:	13 06       	cpc	r1, r19
 d3c:	14 06       	cpc	r1, r20
 d3e:	05 06       	cpc	r0, r21
 d40:	08 95       	ret

00000d42 <__fp_round>:
 d42:	09 2e       	mov	r0, r25
 d44:	03 94       	inc	r0
 d46:	00 0c       	add	r0, r0
 d48:	11 f4       	brne	.+4      	; 0xd4e <__fp_round+0xc>
 d4a:	88 23       	and	r24, r24
 d4c:	52 f0       	brmi	.+20     	; 0xd62 <__fp_round+0x20>
 d4e:	bb 0f       	add	r27, r27
 d50:	40 f4       	brcc	.+16     	; 0xd62 <__fp_round+0x20>
 d52:	bf 2b       	or	r27, r31
 d54:	11 f4       	brne	.+4      	; 0xd5a <__fp_round+0x18>
 d56:	60 ff       	sbrs	r22, 0
 d58:	04 c0       	rjmp	.+8      	; 0xd62 <__fp_round+0x20>
 d5a:	6f 5f       	subi	r22, 0xFF	; 255
 d5c:	7f 4f       	sbci	r23, 0xFF	; 255
 d5e:	8f 4f       	sbci	r24, 0xFF	; 255
 d60:	9f 4f       	sbci	r25, 0xFF	; 255
 d62:	08 95       	ret

00000d64 <__fp_split3>:
 d64:	57 fd       	sbrc	r21, 7
 d66:	90 58       	subi	r25, 0x80	; 128
 d68:	44 0f       	add	r20, r20
 d6a:	55 1f       	adc	r21, r21
 d6c:	59 f0       	breq	.+22     	; 0xd84 <__fp_splitA+0x10>
 d6e:	5f 3f       	cpi	r21, 0xFF	; 255
 d70:	71 f0       	breq	.+28     	; 0xd8e <__fp_splitA+0x1a>
 d72:	47 95       	ror	r20

00000d74 <__fp_splitA>:
 d74:	88 0f       	add	r24, r24
 d76:	97 fb       	bst	r25, 7
 d78:	99 1f       	adc	r25, r25
 d7a:	61 f0       	breq	.+24     	; 0xd94 <__fp_splitA+0x20>
 d7c:	9f 3f       	cpi	r25, 0xFF	; 255
 d7e:	79 f0       	breq	.+30     	; 0xd9e <__fp_splitA+0x2a>
 d80:	87 95       	ror	r24
 d82:	08 95       	ret
 d84:	12 16       	cp	r1, r18
 d86:	13 06       	cpc	r1, r19
 d88:	14 06       	cpc	r1, r20
 d8a:	55 1f       	adc	r21, r21
 d8c:	f2 cf       	rjmp	.-28     	; 0xd72 <__fp_split3+0xe>
 d8e:	46 95       	lsr	r20
 d90:	f1 df       	rcall	.-30     	; 0xd74 <__fp_splitA>
 d92:	08 c0       	rjmp	.+16     	; 0xda4 <__fp_splitA+0x30>
 d94:	16 16       	cp	r1, r22
 d96:	17 06       	cpc	r1, r23
 d98:	18 06       	cpc	r1, r24
 d9a:	99 1f       	adc	r25, r25
 d9c:	f1 cf       	rjmp	.-30     	; 0xd80 <__fp_splitA+0xc>
 d9e:	86 95       	lsr	r24
 da0:	71 05       	cpc	r23, r1
 da2:	61 05       	cpc	r22, r1
 da4:	08 94       	sec
 da6:	08 95       	ret

00000da8 <__fp_trunc>:
 da8:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_splitA>
 dac:	a0 f0       	brcs	.+40     	; 0xdd6 <__fp_trunc+0x2e>
 dae:	be e7       	ldi	r27, 0x7E	; 126
 db0:	b9 17       	cp	r27, r25
 db2:	88 f4       	brcc	.+34     	; 0xdd6 <__fp_trunc+0x2e>
 db4:	bb 27       	eor	r27, r27
 db6:	9f 38       	cpi	r25, 0x8F	; 143
 db8:	60 f4       	brcc	.+24     	; 0xdd2 <__fp_trunc+0x2a>
 dba:	16 16       	cp	r1, r22
 dbc:	b1 1d       	adc	r27, r1
 dbe:	67 2f       	mov	r22, r23
 dc0:	78 2f       	mov	r23, r24
 dc2:	88 27       	eor	r24, r24
 dc4:	98 5f       	subi	r25, 0xF8	; 248
 dc6:	f7 cf       	rjmp	.-18     	; 0xdb6 <__fp_trunc+0xe>
 dc8:	86 95       	lsr	r24
 dca:	77 95       	ror	r23
 dcc:	67 95       	ror	r22
 dce:	b1 1d       	adc	r27, r1
 dd0:	93 95       	inc	r25
 dd2:	96 39       	cpi	r25, 0x96	; 150
 dd4:	c8 f3       	brcs	.-14     	; 0xdc8 <__fp_trunc+0x20>
 dd6:	08 95       	ret

00000dd8 <__fp_zero>:
 dd8:	e8 94       	clt

00000dda <__fp_szero>:
 dda:	bb 27       	eor	r27, r27
 ddc:	66 27       	eor	r22, r22
 dde:	77 27       	eor	r23, r23
 de0:	cb 01       	movw	r24, r22
 de2:	97 f9       	bld	r25, 7
 de4:	08 95       	ret

00000de6 <__mulsf3>:
 de6:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3x>
 dea:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_round>
 dee:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_pscA>
 df2:	38 f0       	brcs	.+14     	; 0xe02 <__mulsf3+0x1c>
 df4:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscB>
 df8:	20 f0       	brcs	.+8      	; 0xe02 <__mulsf3+0x1c>
 dfa:	95 23       	and	r25, r21
 dfc:	11 f0       	breq	.+4      	; 0xe02 <__mulsf3+0x1c>
 dfe:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__fp_inf>
 e02:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>
 e06:	11 24       	eor	r1, r1
 e08:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_szero>

00000e0c <__mulsf3x>:
 e0c:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_split3>
 e10:	70 f3       	brcs	.-36     	; 0xdee <__mulsf3+0x8>

00000e12 <__mulsf3_pse>:
 e12:	95 9f       	mul	r25, r21
 e14:	c1 f3       	breq	.-16     	; 0xe06 <__mulsf3+0x20>
 e16:	95 0f       	add	r25, r21
 e18:	50 e0       	ldi	r21, 0x00	; 0
 e1a:	55 1f       	adc	r21, r21
 e1c:	62 9f       	mul	r22, r18
 e1e:	f0 01       	movw	r30, r0
 e20:	72 9f       	mul	r23, r18
 e22:	bb 27       	eor	r27, r27
 e24:	f0 0d       	add	r31, r0
 e26:	b1 1d       	adc	r27, r1
 e28:	63 9f       	mul	r22, r19
 e2a:	aa 27       	eor	r26, r26
 e2c:	f0 0d       	add	r31, r0
 e2e:	b1 1d       	adc	r27, r1
 e30:	aa 1f       	adc	r26, r26
 e32:	64 9f       	mul	r22, r20
 e34:	66 27       	eor	r22, r22
 e36:	b0 0d       	add	r27, r0
 e38:	a1 1d       	adc	r26, r1
 e3a:	66 1f       	adc	r22, r22
 e3c:	82 9f       	mul	r24, r18
 e3e:	22 27       	eor	r18, r18
 e40:	b0 0d       	add	r27, r0
 e42:	a1 1d       	adc	r26, r1
 e44:	62 1f       	adc	r22, r18
 e46:	73 9f       	mul	r23, r19
 e48:	b0 0d       	add	r27, r0
 e4a:	a1 1d       	adc	r26, r1
 e4c:	62 1f       	adc	r22, r18
 e4e:	83 9f       	mul	r24, r19
 e50:	a0 0d       	add	r26, r0
 e52:	61 1d       	adc	r22, r1
 e54:	22 1f       	adc	r18, r18
 e56:	74 9f       	mul	r23, r20
 e58:	33 27       	eor	r19, r19
 e5a:	a0 0d       	add	r26, r0
 e5c:	61 1d       	adc	r22, r1
 e5e:	23 1f       	adc	r18, r19
 e60:	84 9f       	mul	r24, r20
 e62:	60 0d       	add	r22, r0
 e64:	21 1d       	adc	r18, r1
 e66:	82 2f       	mov	r24, r18
 e68:	76 2f       	mov	r23, r22
 e6a:	6a 2f       	mov	r22, r26
 e6c:	11 24       	eor	r1, r1
 e6e:	9f 57       	subi	r25, 0x7F	; 127
 e70:	50 40       	sbci	r21, 0x00	; 0
 e72:	9a f0       	brmi	.+38     	; 0xe9a <__mulsf3_pse+0x88>
 e74:	f1 f0       	breq	.+60     	; 0xeb2 <__mulsf3_pse+0xa0>
 e76:	88 23       	and	r24, r24
 e78:	4a f0       	brmi	.+18     	; 0xe8c <__mulsf3_pse+0x7a>
 e7a:	ee 0f       	add	r30, r30
 e7c:	ff 1f       	adc	r31, r31
 e7e:	bb 1f       	adc	r27, r27
 e80:	66 1f       	adc	r22, r22
 e82:	77 1f       	adc	r23, r23
 e84:	88 1f       	adc	r24, r24
 e86:	91 50       	subi	r25, 0x01	; 1
 e88:	50 40       	sbci	r21, 0x00	; 0
 e8a:	a9 f7       	brne	.-22     	; 0xe76 <__mulsf3_pse+0x64>
 e8c:	9e 3f       	cpi	r25, 0xFE	; 254
 e8e:	51 05       	cpc	r21, r1
 e90:	80 f0       	brcs	.+32     	; 0xeb2 <__mulsf3_pse+0xa0>
 e92:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__fp_inf>
 e96:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_szero>
 e9a:	5f 3f       	cpi	r21, 0xFF	; 255
 e9c:	e4 f3       	brlt	.-8      	; 0xe96 <__mulsf3_pse+0x84>
 e9e:	98 3e       	cpi	r25, 0xE8	; 232
 ea0:	d4 f3       	brlt	.-12     	; 0xe96 <__mulsf3_pse+0x84>
 ea2:	86 95       	lsr	r24
 ea4:	77 95       	ror	r23
 ea6:	67 95       	ror	r22
 ea8:	b7 95       	ror	r27
 eaa:	f7 95       	ror	r31
 eac:	e7 95       	ror	r30
 eae:	9f 5f       	subi	r25, 0xFF	; 255
 eb0:	c1 f7       	brne	.-16     	; 0xea2 <__mulsf3_pse+0x90>
 eb2:	fe 2b       	or	r31, r30
 eb4:	88 0f       	add	r24, r24
 eb6:	91 1d       	adc	r25, r1
 eb8:	96 95       	lsr	r25
 eba:	87 95       	ror	r24
 ebc:	97 f9       	bld	r25, 7
 ebe:	08 95       	ret

00000ec0 <_exit>:
 ec0:	f8 94       	cli

00000ec2 <__stop_program>:
 ec2:	ff cf       	rjmp	.-2      	; 0xec2 <__stop_program>
