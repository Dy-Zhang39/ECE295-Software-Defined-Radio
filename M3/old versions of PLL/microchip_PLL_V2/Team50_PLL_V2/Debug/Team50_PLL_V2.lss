
Team50_PLL_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000084c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e4c  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fd  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b4  00000000  00000000  00002101  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000889  00000000  00000000  00002d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000358a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 98 00 	call	0x130	; 0x130 <main>
  8c:	0c 94 24 04 	jmp	0x848	; 0x848 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <i2cStart>:
	*data = i2cByteRead();

	i2cStop();

	return 0;
}
  94:	84 ea       	ldi	r24, 0xA4	; 164
  96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  9a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  9e:	88 23       	and	r24, r24
  a0:	e4 f7       	brge	.-8      	; 0x9a <i2cStart+0x6>
  a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	08 95       	ret

000000aa <i2cStop>:
  aa:	84 e9       	ldi	r24, 0x94	; 148
  ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b4:	84 fd       	sbrc	r24, 4
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <i2cStop+0x6>
  b8:	08 95       	ret

000000ba <i2cByteSend>:
  ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  be:	84 e8       	ldi	r24, 0x84	; 132
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	88 23       	and	r24, r24
  ca:	e4 f7       	brge	.-8      	; 0xc4 <i2cByteSend+0xa>
  cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d0:	88 7f       	andi	r24, 0xF8	; 248
  d2:	08 95       	ret

000000d4 <i2cSendRegister>:
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	c8 2f       	mov	r28, r24
  da:	d6 2f       	mov	r29, r22
  dc:	0e 94 4a 00 	call	0x94	; 0x94 <i2cStart>
  e0:	88 30       	cpi	r24, 0x08	; 8
  e2:	99 f4       	brne	.+38     	; 0x10a <i2cSendRegister+0x36>
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	0e 94 5d 00 	call	0xba	; 0xba <i2cByteSend>
  ea:	88 31       	cpi	r24, 0x18	; 24
  ec:	81 f4       	brne	.+32     	; 0x10e <i2cSendRegister+0x3a>
  ee:	8c 2f       	mov	r24, r28
  f0:	0e 94 5d 00 	call	0xba	; 0xba <i2cByteSend>
  f4:	88 32       	cpi	r24, 0x28	; 40
  f6:	69 f4       	brne	.+26     	; 0x112 <i2cSendRegister+0x3e>
  f8:	8d 2f       	mov	r24, r29
  fa:	0e 94 5d 00 	call	0xba	; 0xba <i2cByteSend>
  fe:	88 32       	cpi	r24, 0x28	; 40
 100:	51 f4       	brne	.+20     	; 0x116 <i2cSendRegister+0x42>
 102:	0e 94 55 00 	call	0xaa	; 0xaa <i2cStop>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	07 c0       	rjmp	.+14     	; 0x118 <i2cSendRegister+0x44>
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	05 c0       	rjmp	.+10     	; 0x118 <i2cSendRegister+0x44>
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	03 c0       	rjmp	.+6      	; 0x118 <i2cSendRegister+0x44>
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <i2cSendRegister+0x44>
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <i2cInit>:

// Init TWI (I2C)
//
void i2cInit()
{
	TWBR = 92;						
 11e:	8c e5       	ldi	r24, 0x5C	; 92
 120:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0;
 124:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWDR = 0xFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 12e:	08 95       	ret

00000130 <main>:
#include "si5351a.h"


int main(void)
{
    i2cInit();
 130:	0e 94 8f 00 	call	0x11e	; 0x11e <i2cInit>
	si5351aSetFrequency(14000000);
 134:	60 e8       	ldi	r22, 0x80	; 128
 136:	7f e9       	ldi	r23, 0x9F	; 159
 138:	85 ed       	ldi	r24, 0xD5	; 213
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 de 01 	call	0x3bc	; 0x3bc <si5351aSetFrequency>
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0x10>

00000142 <setupPLL>:
// Example: si5351aOutputOff(SI_CLK0_CONTROL);
// will switch off output CLK0
//
void si5351aOutputOff(uint8_t clk)
{
	i2cSendRegister(clk, 0x80);		// Refer to SiLabs AN619 to see bit values - 0x80 turns off the output stage
 142:	4f 92       	push	r4
 144:	5f 92       	push	r5
 146:	6f 92       	push	r6
 148:	7f 92       	push	r7
 14a:	8f 92       	push	r8
 14c:	9f 92       	push	r9
 14e:	af 92       	push	r10
 150:	bf 92       	push	r11
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	00 d0       	rcall	.+0      	; 0x164 <setupPLL+0x22>
 164:	00 d0       	rcall	.+0      	; 0x166 <setupPLL+0x24>
 166:	1f 92       	push	r1
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	8d 83       	std	Y+5, r24	; 0x05
 16e:	c6 2e       	mov	r12, r22
 170:	49 01       	movw	r8, r18
 172:	5a 01       	movw	r10, r20
 174:	27 01       	movw	r4, r14
 176:	38 01       	movw	r6, r16
 178:	ca 01       	movw	r24, r20
 17a:	b9 01       	movw	r22, r18
 17c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__floatunsisf>
 180:	69 83       	std	Y+1, r22	; 0x01
 182:	7a 83       	std	Y+2, r23	; 0x02
 184:	8b 83       	std	Y+3, r24	; 0x03
 186:	9c 83       	std	Y+4, r25	; 0x04
 188:	c8 01       	movw	r24, r16
 18a:	b7 01       	movw	r22, r14
 18c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__floatunsisf>
 190:	9b 01       	movw	r18, r22
 192:	ac 01       	movw	r20, r24
 194:	69 81       	ldd	r22, Y+1	; 0x01
 196:	7a 81       	ldd	r23, Y+2	; 0x02
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	9c 81       	ldd	r25, Y+4	; 0x04
 19c:	0e 94 3c 02 	call	0x478	; 0x478 <__divsf3>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	53 e4       	ldi	r21, 0x43	; 67
 1a8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__mulsf3>
 1ac:	0e 94 ae 02 	call	0x55c	; 0x55c <__fixunssfsi>
 1b0:	d1 2c       	mov	r13, r1
 1b2:	e1 2c       	mov	r14, r1
 1b4:	f1 2c       	mov	r15, r1
 1b6:	cc 0c       	add	r12, r12
 1b8:	dd 1c       	adc	r13, r13
 1ba:	ee 1c       	adc	r14, r14
 1bc:	ff 1c       	adc	r15, r15
 1be:	cc 0c       	add	r12, r12
 1c0:	dd 1c       	adc	r13, r13
 1c2:	ee 1c       	adc	r14, r14
 1c4:	ff 1c       	adc	r15, r15
 1c6:	cc 0c       	add	r12, r12
 1c8:	dd 1c       	adc	r13, r13
 1ca:	ee 1c       	adc	r14, r14
 1cc:	ff 1c       	adc	r15, r15
 1ce:	cc 0c       	add	r12, r12
 1d0:	dd 1c       	adc	r13, r13
 1d2:	ee 1c       	adc	r14, r14
 1d4:	ff 1c       	adc	r15, r15
 1d6:	cc 0c       	add	r12, r12
 1d8:	dd 1c       	adc	r13, r13
 1da:	ee 1c       	adc	r14, r14
 1dc:	ff 1c       	adc	r15, r15
 1de:	cc 0c       	add	r12, r12
 1e0:	dd 1c       	adc	r13, r13
 1e2:	ee 1c       	adc	r14, r14
 1e4:	ff 1c       	adc	r15, r15
 1e6:	cc 0c       	add	r12, r12
 1e8:	dd 1c       	adc	r13, r13
 1ea:	ee 1c       	adc	r14, r14
 1ec:	ff 1c       	adc	r15, r15
 1ee:	c6 0e       	add	r12, r22
 1f0:	d7 1e       	adc	r13, r23
 1f2:	e8 1e       	adc	r14, r24
 1f4:	f9 1e       	adc	r15, r25
 1f6:	22 e0       	ldi	r18, 0x02	; 2
 1f8:	d2 1a       	sub	r13, r18
 1fa:	e1 08       	sbc	r14, r1
 1fc:	f1 08       	sbc	r15, r1
 1fe:	88 0c       	add	r8, r8
 200:	99 1c       	adc	r9, r9
 202:	aa 1c       	adc	r10, r10
 204:	bb 1c       	adc	r11, r11
 206:	88 0c       	add	r8, r8
 208:	99 1c       	adc	r9, r9
 20a:	aa 1c       	adc	r10, r10
 20c:	bb 1c       	adc	r11, r11
 20e:	88 0c       	add	r8, r8
 210:	99 1c       	adc	r9, r9
 212:	aa 1c       	adc	r10, r10
 214:	bb 1c       	adc	r11, r11
 216:	88 0c       	add	r8, r8
 218:	99 1c       	adc	r9, r9
 21a:	aa 1c       	adc	r10, r10
 21c:	bb 1c       	adc	r11, r11
 21e:	88 0c       	add	r8, r8
 220:	99 1c       	adc	r9, r9
 222:	aa 1c       	adc	r10, r10
 224:	bb 1c       	adc	r11, r11
 226:	88 0c       	add	r8, r8
 228:	99 1c       	adc	r9, r9
 22a:	aa 1c       	adc	r10, r10
 22c:	bb 1c       	adc	r11, r11
 22e:	88 0c       	add	r8, r8
 230:	99 1c       	adc	r9, r9
 232:	aa 1c       	adc	r10, r10
 234:	bb 1c       	adc	r11, r11
 236:	a3 01       	movw	r20, r6
 238:	92 01       	movw	r18, r4
 23a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__mulsi3>
 23e:	86 1a       	sub	r8, r22
 240:	97 0a       	sbc	r9, r23
 242:	a8 0a       	sbc	r10, r24
 244:	b9 0a       	sbc	r11, r25
 246:	65 2d       	mov	r22, r5
 248:	8d 81       	ldd	r24, Y+5	; 0x05
 24a:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 24e:	64 2d       	mov	r22, r4
 250:	8d 81       	ldd	r24, Y+5	; 0x05
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 258:	d7 01       	movw	r26, r14
 25a:	c6 01       	movw	r24, r12
 25c:	88 27       	eor	r24, r24
 25e:	99 27       	eor	r25, r25
 260:	a3 70       	andi	r26, 0x03	; 3
 262:	bb 27       	eor	r27, r27
 264:	bd 01       	movw	r22, r26
 266:	88 27       	eor	r24, r24
 268:	99 27       	eor	r25, r25
 26a:	8d 81       	ldd	r24, Y+5	; 0x05
 26c:	8e 5f       	subi	r24, 0xFE	; 254
 26e:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 272:	6d 2d       	mov	r22, r13
 274:	8d 81       	ldd	r24, Y+5	; 0x05
 276:	8d 5f       	subi	r24, 0xFD	; 253
 278:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 27c:	6c 2d       	mov	r22, r12
 27e:	8d 81       	ldd	r24, Y+5	; 0x05
 280:	8c 5f       	subi	r24, 0xFC	; 252
 282:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 286:	44 24       	eor	r4, r4
 288:	55 24       	eor	r5, r5
 28a:	8f e0       	ldi	r24, 0x0F	; 15
 28c:	68 22       	and	r6, r24
 28e:	77 24       	eor	r7, r7
 290:	03 2e       	mov	r0, r19
 292:	3c e0       	ldi	r19, 0x0C	; 12
 294:	76 94       	lsr	r7
 296:	67 94       	ror	r6
 298:	57 94       	ror	r5
 29a:	47 94       	ror	r4
 29c:	3a 95       	dec	r19
 29e:	d1 f7       	brne	.-12     	; 0x294 <setupPLL+0x152>
 2a0:	30 2d       	mov	r19, r0
 2a2:	d5 01       	movw	r26, r10
 2a4:	c4 01       	movw	r24, r8
 2a6:	88 27       	eor	r24, r24
 2a8:	99 27       	eor	r25, r25
 2aa:	af 70       	andi	r26, 0x0F	; 15
 2ac:	bb 27       	eor	r27, r27
 2ae:	64 2d       	mov	r22, r4
 2b0:	6a 2b       	or	r22, r26
 2b2:	8d 81       	ldd	r24, Y+5	; 0x05
 2b4:	8b 5f       	subi	r24, 0xFB	; 251
 2b6:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 2ba:	69 2d       	mov	r22, r9
 2bc:	8d 81       	ldd	r24, Y+5	; 0x05
 2be:	8a 5f       	subi	r24, 0xFA	; 250
 2c0:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 2c4:	68 2d       	mov	r22, r8
 2c6:	8d 81       	ldd	r24, Y+5	; 0x05
 2c8:	89 5f       	subi	r24, 0xF9	; 249
 2ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	df 90       	pop	r13
 2e6:	cf 90       	pop	r12
 2e8:	bf 90       	pop	r11
 2ea:	af 90       	pop	r10
 2ec:	9f 90       	pop	r9
 2ee:	8f 90       	pop	r8
 2f0:	7f 90       	pop	r7
 2f2:	6f 90       	pop	r6
 2f4:	5f 90       	pop	r5
 2f6:	4f 90       	pop	r4
 2f8:	08 95       	ret

000002fa <setupMultisynth>:
 2fa:	cf 92       	push	r12
 2fc:	df 92       	push	r13
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	c8 2f       	mov	r28, r24
 308:	d2 2f       	mov	r29, r18
 30a:	6a 01       	movw	r12, r20
 30c:	7b 01       	movw	r14, r22
 30e:	84 e0       	ldi	r24, 0x04	; 4
 310:	c8 1a       	sub	r12, r24
 312:	d1 08       	sbc	r13, r1
 314:	e1 08       	sbc	r14, r1
 316:	8e ef       	ldi	r24, 0xFE	; 254
 318:	f8 0a       	sbc	r15, r24
 31a:	cc 0c       	add	r12, r12
 31c:	dd 1c       	adc	r13, r13
 31e:	ee 1c       	adc	r14, r14
 320:	ff 1c       	adc	r15, r15
 322:	cc 0c       	add	r12, r12
 324:	dd 1c       	adc	r13, r13
 326:	ee 1c       	adc	r14, r14
 328:	ff 1c       	adc	r15, r15
 32a:	cc 0c       	add	r12, r12
 32c:	dd 1c       	adc	r13, r13
 32e:	ee 1c       	adc	r14, r14
 330:	ff 1c       	adc	r15, r15
 332:	cc 0c       	add	r12, r12
 334:	dd 1c       	adc	r13, r13
 336:	ee 1c       	adc	r14, r14
 338:	ff 1c       	adc	r15, r15
 33a:	cc 0c       	add	r12, r12
 33c:	dd 1c       	adc	r13, r13
 33e:	ee 1c       	adc	r14, r14
 340:	ff 1c       	adc	r15, r15
 342:	cc 0c       	add	r12, r12
 344:	dd 1c       	adc	r13, r13
 346:	ee 1c       	adc	r14, r14
 348:	ff 1c       	adc	r15, r15
 34a:	cc 0c       	add	r12, r12
 34c:	dd 1c       	adc	r13, r13
 34e:	ee 1c       	adc	r14, r14
 350:	ff 1c       	adc	r15, r15
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	8c 2f       	mov	r24, r28
 356:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	8c 0f       	add	r24, r28
 360:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 364:	d7 01       	movw	r26, r14
 366:	c6 01       	movw	r24, r12
 368:	88 27       	eor	r24, r24
 36a:	99 27       	eor	r25, r25
 36c:	a3 70       	andi	r26, 0x03	; 3
 36e:	bb 27       	eor	r27, r27
 370:	6d 2f       	mov	r22, r29
 372:	6a 2b       	or	r22, r26
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	8c 0f       	add	r24, r28
 378:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 37c:	6d 2d       	mov	r22, r13
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	8c 0f       	add	r24, r28
 382:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 386:	6c 2d       	mov	r22, r12
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	8c 0f       	add	r24, r28
 38c:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	85 e0       	ldi	r24, 0x05	; 5
 394:	8c 0f       	add	r24, r28
 396:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	86 e0       	ldi	r24, 0x06	; 6
 39e:	8c 0f       	add	r24, r28
 3a0:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	87 e0       	ldi	r24, 0x07	; 7
 3a8:	8c 0f       	add	r24, r28
 3aa:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	08 95       	ret

000003bc <si5351aSetFrequency>:
// This example sets up PLL A
// and MultiSynth 0
// and produces the output on CLK0
//
void si5351aSetFrequency(uint32_t frequency)
{
 3bc:	8f 92       	push	r8
 3be:	9f 92       	push	r9
 3c0:	af 92       	push	r10
 3c2:	bf 92       	push	r11
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	6b 01       	movw	r12, r22
 3d2:	7c 01       	movw	r14, r24
	uint8_t mult;
	uint32_t num;
	uint32_t denom;
	uint32_t divider;

	divider = 900000000 / frequency;// Calculate the division ratio. 900,000,000 is the maximum internal 
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	79 ee       	ldi	r23, 0xE9	; 233
 3d8:	84 ea       	ldi	r24, 0xA4	; 164
 3da:	95 e3       	ldi	r25, 0x35	; 53
 3dc:	a7 01       	movw	r20, r14
 3de:	96 01       	movw	r18, r12
 3e0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__udivmodsi4>
 3e4:	49 01       	movw	r8, r18
 3e6:	5a 01       	movw	r10, r20
									// PLL frequency: 900MHz
	if (divider % 2) divider--;		// Ensure an even integer division ratio
 3e8:	20 ff       	sbrs	r18, 0
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <si5351aSetFrequency+0x3a>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	88 1a       	sub	r8, r24
 3f0:	91 08       	sbc	r9, r1
 3f2:	a1 08       	sbc	r10, r1
 3f4:	b1 08       	sbc	r11, r1

	pllFreq = divider * frequency;	// Calculate the pllFrequency: the divider * desired output frequency
 3f6:	a5 01       	movw	r20, r10
 3f8:	94 01       	movw	r18, r8
 3fa:	c7 01       	movw	r24, r14
 3fc:	b6 01       	movw	r22, r12
 3fe:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__mulsi3>

	mult = pllFreq / xtalFreq;		// Determine the multiplier to get to the required pllFrequency
 402:	20 ec       	ldi	r18, 0xC0	; 192
 404:	3c ef       	ldi	r19, 0xFC	; 252
 406:	4b e9       	ldi	r20, 0x9B	; 155
 408:	51 e0       	ldi	r21, 0x01	; 1
 40a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__udivmodsi4>
 40e:	d2 2e       	mov	r13, r18
	l = pllFreq % xtalFreq;			// It has three parts:
	f = l;							// mult is an integer that must be in the range 15..90
 410:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__floatunsisf>
	f *= 1048575;					// num and denom are the fractional parts, the numerator and denominator
 414:	20 ef       	ldi	r18, 0xF0	; 240
 416:	3f ef       	ldi	r19, 0xFF	; 255
 418:	4f e7       	ldi	r20, 0x7F	; 127
 41a:	59 e4       	ldi	r21, 0x49	; 73
 41c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__mulsf3>
	f /= xtalFreq;					// each is 20 bits (range 0..1048575)
 420:	20 e6       	ldi	r18, 0x60	; 96
 422:	3e ef       	ldi	r19, 0xFE	; 254
 424:	4d ec       	ldi	r20, 0xCD	; 205
 426:	5b e4       	ldi	r21, 0x4B	; 75
 428:	0e 94 3c 02 	call	0x478	; 0x478 <__divsf3>
	num = f;						// the actual multiplier is  mult + num / denom
 42c:	0e 94 ae 02 	call	0x55c	; 0x55c <__fixunssfsi>
 430:	9b 01       	movw	r18, r22
 432:	ac 01       	movw	r20, r24
	denom = 1048575;				// For simplicity we set the denominator to the maximum 1048575

									// Set up PLL A with the calculated multiplication ratio
	setupPLL(SI_SYNTH_PLL_A, mult, num, denom);
 434:	ee 24       	eor	r14, r14
 436:	ea 94       	dec	r14
 438:	fe 2c       	mov	r15, r14
 43a:	0f e0       	ldi	r16, 0x0F	; 15
 43c:	10 e0       	ldi	r17, 0x00	; 0
 43e:	6d 2d       	mov	r22, r13
 440:	8a e1       	ldi	r24, 0x1A	; 26
 442:	0e 94 a1 00 	call	0x142	; 0x142 <setupPLL>
									// Set up MultiSynth divider 0, with the calculated divider. 
									// The final R division stage can divide by a power of two, from 1..128. 
									// reprented by constants SI_R_DIV1 to SI_R_DIV128 (see si5351a.h header file)
									// If you want to output frequencies below 1MHz, you have to use the 
									// final R division stage
	setupMultisynth(SI_SYNTH_MS_0, divider, SI_R_DIV_1);
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	b5 01       	movw	r22, r10
 44a:	a4 01       	movw	r20, r8
 44c:	8a e2       	ldi	r24, 0x2A	; 42
 44e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <setupMultisynth>
									// Reset the PLL. This causes a glitch in the output. For small changes to 
									// the parameters, you don't need to reset the PLL, and there is no glitch
	//setupMultisynth(SI_SYNTH_MS_1, divider, SI_R_DIV_1);
									
	i2cSendRegister(SI_PLL_RESET, 0xAC);	
 452:	6c ea       	ldi	r22, 0xAC	; 172
 454:	81 eb       	ldi	r24, 0xB1	; 177
 456:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
									// Finally switch on the CLK0 output (0x4F)
									// and set the MultiSynth0 input to be PLL A
	i2cSendRegister(SI_CLK0_CONTROL, 0x4F | SI_CLK_SRC_PLL_A);
 45a:	6f e4       	ldi	r22, 0x4F	; 79
 45c:	80 e1       	ldi	r24, 0x10	; 16
 45e:	0e 94 6a 00 	call	0xd4	; 0xd4 <i2cSendRegister>
	//i2cSendRegister(SI_CLK1_CONTROL, 0x4F | SI_CLK_SRC_PLL_A);
}
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	df 90       	pop	r13
 46c:	cf 90       	pop	r12
 46e:	bf 90       	pop	r11
 470:	af 90       	pop	r10
 472:	9f 90       	pop	r9
 474:	8f 90       	pop	r8
 476:	08 95       	ret

00000478 <__divsf3>:
 478:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__divsf3x>
 47c:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_round>
 480:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_pscB>
 484:	58 f0       	brcs	.+22     	; 0x49c <__divsf3+0x24>
 486:	0e 94 23 03 	call	0x646	; 0x646 <__fp_pscA>
 48a:	40 f0       	brcs	.+16     	; 0x49c <__divsf3+0x24>
 48c:	29 f4       	brne	.+10     	; 0x498 <__divsf3+0x20>
 48e:	5f 3f       	cpi	r21, 0xFF	; 255
 490:	29 f0       	breq	.+10     	; 0x49c <__divsf3+0x24>
 492:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_inf>
 496:	51 11       	cpse	r21, r1
 498:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_szero>
 49c:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_nan>

000004a0 <__divsf3x>:
 4a0:	0e 94 42 03 	call	0x684	; 0x684 <__fp_split3>
 4a4:	68 f3       	brcs	.-38     	; 0x480 <__divsf3+0x8>

000004a6 <__divsf3_pse>:
 4a6:	99 23       	and	r25, r25
 4a8:	b1 f3       	breq	.-20     	; 0x496 <__divsf3+0x1e>
 4aa:	55 23       	and	r21, r21
 4ac:	91 f3       	breq	.-28     	; 0x492 <__divsf3+0x1a>
 4ae:	95 1b       	sub	r25, r21
 4b0:	55 0b       	sbc	r21, r21
 4b2:	bb 27       	eor	r27, r27
 4b4:	aa 27       	eor	r26, r26
 4b6:	62 17       	cp	r22, r18
 4b8:	73 07       	cpc	r23, r19
 4ba:	84 07       	cpc	r24, r20
 4bc:	38 f0       	brcs	.+14     	; 0x4cc <__divsf3_pse+0x26>
 4be:	9f 5f       	subi	r25, 0xFF	; 255
 4c0:	5f 4f       	sbci	r21, 0xFF	; 255
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	44 1f       	adc	r20, r20
 4c8:	aa 1f       	adc	r26, r26
 4ca:	a9 f3       	breq	.-22     	; 0x4b6 <__divsf3_pse+0x10>
 4cc:	35 d0       	rcall	.+106    	; 0x538 <__divsf3_pse+0x92>
 4ce:	0e 2e       	mov	r0, r30
 4d0:	3a f0       	brmi	.+14     	; 0x4e0 <__divsf3_pse+0x3a>
 4d2:	e0 e8       	ldi	r30, 0x80	; 128
 4d4:	32 d0       	rcall	.+100    	; 0x53a <__divsf3_pse+0x94>
 4d6:	91 50       	subi	r25, 0x01	; 1
 4d8:	50 40       	sbci	r21, 0x00	; 0
 4da:	e6 95       	lsr	r30
 4dc:	00 1c       	adc	r0, r0
 4de:	ca f7       	brpl	.-14     	; 0x4d2 <__divsf3_pse+0x2c>
 4e0:	2b d0       	rcall	.+86     	; 0x538 <__divsf3_pse+0x92>
 4e2:	fe 2f       	mov	r31, r30
 4e4:	29 d0       	rcall	.+82     	; 0x538 <__divsf3_pse+0x92>
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	bb 1f       	adc	r27, r27
 4ee:	26 17       	cp	r18, r22
 4f0:	37 07       	cpc	r19, r23
 4f2:	48 07       	cpc	r20, r24
 4f4:	ab 07       	cpc	r26, r27
 4f6:	b0 e8       	ldi	r27, 0x80	; 128
 4f8:	09 f0       	breq	.+2      	; 0x4fc <__divsf3_pse+0x56>
 4fa:	bb 0b       	sbc	r27, r27
 4fc:	80 2d       	mov	r24, r0
 4fe:	bf 01       	movw	r22, r30
 500:	ff 27       	eor	r31, r31
 502:	93 58       	subi	r25, 0x83	; 131
 504:	5f 4f       	sbci	r21, 0xFF	; 255
 506:	3a f0       	brmi	.+14     	; 0x516 <__divsf3_pse+0x70>
 508:	9e 3f       	cpi	r25, 0xFE	; 254
 50a:	51 05       	cpc	r21, r1
 50c:	78 f0       	brcs	.+30     	; 0x52c <__divsf3_pse+0x86>
 50e:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_inf>
 512:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_szero>
 516:	5f 3f       	cpi	r21, 0xFF	; 255
 518:	e4 f3       	brlt	.-8      	; 0x512 <__divsf3_pse+0x6c>
 51a:	98 3e       	cpi	r25, 0xE8	; 232
 51c:	d4 f3       	brlt	.-12     	; 0x512 <__divsf3_pse+0x6c>
 51e:	86 95       	lsr	r24
 520:	77 95       	ror	r23
 522:	67 95       	ror	r22
 524:	b7 95       	ror	r27
 526:	f7 95       	ror	r31
 528:	9f 5f       	subi	r25, 0xFF	; 255
 52a:	c9 f7       	brne	.-14     	; 0x51e <__divsf3_pse+0x78>
 52c:	88 0f       	add	r24, r24
 52e:	91 1d       	adc	r25, r1
 530:	96 95       	lsr	r25
 532:	87 95       	ror	r24
 534:	97 f9       	bld	r25, 7
 536:	08 95       	ret
 538:	e1 e0       	ldi	r30, 0x01	; 1
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	88 1f       	adc	r24, r24
 540:	bb 1f       	adc	r27, r27
 542:	62 17       	cp	r22, r18
 544:	73 07       	cpc	r23, r19
 546:	84 07       	cpc	r24, r20
 548:	ba 07       	cpc	r27, r26
 54a:	20 f0       	brcs	.+8      	; 0x554 <__divsf3_pse+0xae>
 54c:	62 1b       	sub	r22, r18
 54e:	73 0b       	sbc	r23, r19
 550:	84 0b       	sbc	r24, r20
 552:	ba 0b       	sbc	r27, r26
 554:	ee 1f       	adc	r30, r30
 556:	88 f7       	brcc	.-30     	; 0x53a <__divsf3_pse+0x94>
 558:	e0 95       	com	r30
 55a:	08 95       	ret

0000055c <__fixunssfsi>:
 55c:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_splitA>
 560:	88 f0       	brcs	.+34     	; 0x584 <__fixunssfsi+0x28>
 562:	9f 57       	subi	r25, 0x7F	; 127
 564:	98 f0       	brcs	.+38     	; 0x58c <__fixunssfsi+0x30>
 566:	b9 2f       	mov	r27, r25
 568:	99 27       	eor	r25, r25
 56a:	b7 51       	subi	r27, 0x17	; 23
 56c:	b0 f0       	brcs	.+44     	; 0x59a <__fixunssfsi+0x3e>
 56e:	e1 f0       	breq	.+56     	; 0x5a8 <__fixunssfsi+0x4c>
 570:	66 0f       	add	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	1a f0       	brmi	.+6      	; 0x580 <__fixunssfsi+0x24>
 57a:	ba 95       	dec	r27
 57c:	c9 f7       	brne	.-14     	; 0x570 <__fixunssfsi+0x14>
 57e:	14 c0       	rjmp	.+40     	; 0x5a8 <__fixunssfsi+0x4c>
 580:	b1 30       	cpi	r27, 0x01	; 1
 582:	91 f0       	breq	.+36     	; 0x5a8 <__fixunssfsi+0x4c>
 584:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__fp_zero>
 588:	b1 e0       	ldi	r27, 0x01	; 1
 58a:	08 95       	ret
 58c:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_zero>
 590:	67 2f       	mov	r22, r23
 592:	78 2f       	mov	r23, r24
 594:	88 27       	eor	r24, r24
 596:	b8 5f       	subi	r27, 0xF8	; 248
 598:	39 f0       	breq	.+14     	; 0x5a8 <__fixunssfsi+0x4c>
 59a:	b9 3f       	cpi	r27, 0xF9	; 249
 59c:	cc f3       	brlt	.-14     	; 0x590 <__fixunssfsi+0x34>
 59e:	86 95       	lsr	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b3 95       	inc	r27
 5a6:	d9 f7       	brne	.-10     	; 0x59e <__fixunssfsi+0x42>
 5a8:	3e f4       	brtc	.+14     	; 0x5b8 <__fixunssfsi+0x5c>
 5aa:	90 95       	com	r25
 5ac:	80 95       	com	r24
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	08 95       	ret

000005ba <__floatunsisf>:
 5ba:	e8 94       	clt
 5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <__floatsisf+0x12>

000005be <__floatsisf>:
 5be:	97 fb       	bst	r25, 7
 5c0:	3e f4       	brtc	.+14     	; 0x5d0 <__floatsisf+0x12>
 5c2:	90 95       	com	r25
 5c4:	80 95       	com	r24
 5c6:	70 95       	com	r23
 5c8:	61 95       	neg	r22
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	99 23       	and	r25, r25
 5d2:	a9 f0       	breq	.+42     	; 0x5fe <__floatsisf+0x40>
 5d4:	f9 2f       	mov	r31, r25
 5d6:	96 e9       	ldi	r25, 0x96	; 150
 5d8:	bb 27       	eor	r27, r27
 5da:	93 95       	inc	r25
 5dc:	f6 95       	lsr	r31
 5de:	87 95       	ror	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b7 95       	ror	r27
 5e6:	f1 11       	cpse	r31, r1
 5e8:	f8 cf       	rjmp	.-16     	; 0x5da <__floatsisf+0x1c>
 5ea:	fa f4       	brpl	.+62     	; 0x62a <__floatsisf+0x6c>
 5ec:	bb 0f       	add	r27, r27
 5ee:	11 f4       	brne	.+4      	; 0x5f4 <__floatsisf+0x36>
 5f0:	60 ff       	sbrs	r22, 0
 5f2:	1b c0       	rjmp	.+54     	; 0x62a <__floatsisf+0x6c>
 5f4:	6f 5f       	subi	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	8f 4f       	sbci	r24, 0xFF	; 255
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	16 c0       	rjmp	.+44     	; 0x62a <__floatsisf+0x6c>
 5fe:	88 23       	and	r24, r24
 600:	11 f0       	breq	.+4      	; 0x606 <__floatsisf+0x48>
 602:	96 e9       	ldi	r25, 0x96	; 150
 604:	11 c0       	rjmp	.+34     	; 0x628 <__floatsisf+0x6a>
 606:	77 23       	and	r23, r23
 608:	21 f0       	breq	.+8      	; 0x612 <__floatsisf+0x54>
 60a:	9e e8       	ldi	r25, 0x8E	; 142
 60c:	87 2f       	mov	r24, r23
 60e:	76 2f       	mov	r23, r22
 610:	05 c0       	rjmp	.+10     	; 0x61c <__floatsisf+0x5e>
 612:	66 23       	and	r22, r22
 614:	71 f0       	breq	.+28     	; 0x632 <__floatsisf+0x74>
 616:	96 e8       	ldi	r25, 0x86	; 134
 618:	86 2f       	mov	r24, r22
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	2a f0       	brmi	.+10     	; 0x62a <__floatsisf+0x6c>
 620:	9a 95       	dec	r25
 622:	66 0f       	add	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	88 1f       	adc	r24, r24
 628:	da f7       	brpl	.-10     	; 0x620 <__floatsisf+0x62>
 62a:	88 0f       	add	r24, r24
 62c:	96 95       	lsr	r25
 62e:	87 95       	ror	r24
 630:	97 f9       	bld	r25, 7
 632:	08 95       	ret

00000634 <__fp_inf>:
 634:	97 f9       	bld	r25, 7
 636:	9f 67       	ori	r25, 0x7F	; 127
 638:	80 e8       	ldi	r24, 0x80	; 128
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	08 95       	ret

00000640 <__fp_nan>:
 640:	9f ef       	ldi	r25, 0xFF	; 255
 642:	80 ec       	ldi	r24, 0xC0	; 192
 644:	08 95       	ret

00000646 <__fp_pscA>:
 646:	00 24       	eor	r0, r0
 648:	0a 94       	dec	r0
 64a:	16 16       	cp	r1, r22
 64c:	17 06       	cpc	r1, r23
 64e:	18 06       	cpc	r1, r24
 650:	09 06       	cpc	r0, r25
 652:	08 95       	ret

00000654 <__fp_pscB>:
 654:	00 24       	eor	r0, r0
 656:	0a 94       	dec	r0
 658:	12 16       	cp	r1, r18
 65a:	13 06       	cpc	r1, r19
 65c:	14 06       	cpc	r1, r20
 65e:	05 06       	cpc	r0, r21
 660:	08 95       	ret

00000662 <__fp_round>:
 662:	09 2e       	mov	r0, r25
 664:	03 94       	inc	r0
 666:	00 0c       	add	r0, r0
 668:	11 f4       	brne	.+4      	; 0x66e <__fp_round+0xc>
 66a:	88 23       	and	r24, r24
 66c:	52 f0       	brmi	.+20     	; 0x682 <__fp_round+0x20>
 66e:	bb 0f       	add	r27, r27
 670:	40 f4       	brcc	.+16     	; 0x682 <__fp_round+0x20>
 672:	bf 2b       	or	r27, r31
 674:	11 f4       	brne	.+4      	; 0x67a <__fp_round+0x18>
 676:	60 ff       	sbrs	r22, 0
 678:	04 c0       	rjmp	.+8      	; 0x682 <__fp_round+0x20>
 67a:	6f 5f       	subi	r22, 0xFF	; 255
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	8f 4f       	sbci	r24, 0xFF	; 255
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	08 95       	ret

00000684 <__fp_split3>:
 684:	57 fd       	sbrc	r21, 7
 686:	90 58       	subi	r25, 0x80	; 128
 688:	44 0f       	add	r20, r20
 68a:	55 1f       	adc	r21, r21
 68c:	59 f0       	breq	.+22     	; 0x6a4 <__fp_splitA+0x10>
 68e:	5f 3f       	cpi	r21, 0xFF	; 255
 690:	71 f0       	breq	.+28     	; 0x6ae <__fp_splitA+0x1a>
 692:	47 95       	ror	r20

00000694 <__fp_splitA>:
 694:	88 0f       	add	r24, r24
 696:	97 fb       	bst	r25, 7
 698:	99 1f       	adc	r25, r25
 69a:	61 f0       	breq	.+24     	; 0x6b4 <__fp_splitA+0x20>
 69c:	9f 3f       	cpi	r25, 0xFF	; 255
 69e:	79 f0       	breq	.+30     	; 0x6be <__fp_splitA+0x2a>
 6a0:	87 95       	ror	r24
 6a2:	08 95       	ret
 6a4:	12 16       	cp	r1, r18
 6a6:	13 06       	cpc	r1, r19
 6a8:	14 06       	cpc	r1, r20
 6aa:	55 1f       	adc	r21, r21
 6ac:	f2 cf       	rjmp	.-28     	; 0x692 <__fp_split3+0xe>
 6ae:	46 95       	lsr	r20
 6b0:	f1 df       	rcall	.-30     	; 0x694 <__fp_splitA>
 6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <__fp_splitA+0x30>
 6b4:	16 16       	cp	r1, r22
 6b6:	17 06       	cpc	r1, r23
 6b8:	18 06       	cpc	r1, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	f1 cf       	rjmp	.-30     	; 0x6a0 <__fp_splitA+0xc>
 6be:	86 95       	lsr	r24
 6c0:	71 05       	cpc	r23, r1
 6c2:	61 05       	cpc	r22, r1
 6c4:	08 94       	sec
 6c6:	08 95       	ret

000006c8 <__fp_zero>:
 6c8:	e8 94       	clt

000006ca <__fp_szero>:
 6ca:	bb 27       	eor	r27, r27
 6cc:	66 27       	eor	r22, r22
 6ce:	77 27       	eor	r23, r23
 6d0:	cb 01       	movw	r24, r22
 6d2:	97 f9       	bld	r25, 7
 6d4:	08 95       	ret

000006d6 <__mulsf3>:
 6d6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__mulsf3x>
 6da:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_round>
 6de:	0e 94 23 03 	call	0x646	; 0x646 <__fp_pscA>
 6e2:	38 f0       	brcs	.+14     	; 0x6f2 <__mulsf3+0x1c>
 6e4:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_pscB>
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <__mulsf3+0x1c>
 6ea:	95 23       	and	r25, r21
 6ec:	11 f0       	breq	.+4      	; 0x6f2 <__mulsf3+0x1c>
 6ee:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_inf>
 6f2:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_nan>
 6f6:	11 24       	eor	r1, r1
 6f8:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_szero>

000006fc <__mulsf3x>:
 6fc:	0e 94 42 03 	call	0x684	; 0x684 <__fp_split3>
 700:	70 f3       	brcs	.-36     	; 0x6de <__mulsf3+0x8>

00000702 <__mulsf3_pse>:
 702:	95 9f       	mul	r25, r21
 704:	c1 f3       	breq	.-16     	; 0x6f6 <__mulsf3+0x20>
 706:	95 0f       	add	r25, r21
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	55 1f       	adc	r21, r21
 70c:	62 9f       	mul	r22, r18
 70e:	f0 01       	movw	r30, r0
 710:	72 9f       	mul	r23, r18
 712:	bb 27       	eor	r27, r27
 714:	f0 0d       	add	r31, r0
 716:	b1 1d       	adc	r27, r1
 718:	63 9f       	mul	r22, r19
 71a:	aa 27       	eor	r26, r26
 71c:	f0 0d       	add	r31, r0
 71e:	b1 1d       	adc	r27, r1
 720:	aa 1f       	adc	r26, r26
 722:	64 9f       	mul	r22, r20
 724:	66 27       	eor	r22, r22
 726:	b0 0d       	add	r27, r0
 728:	a1 1d       	adc	r26, r1
 72a:	66 1f       	adc	r22, r22
 72c:	82 9f       	mul	r24, r18
 72e:	22 27       	eor	r18, r18
 730:	b0 0d       	add	r27, r0
 732:	a1 1d       	adc	r26, r1
 734:	62 1f       	adc	r22, r18
 736:	73 9f       	mul	r23, r19
 738:	b0 0d       	add	r27, r0
 73a:	a1 1d       	adc	r26, r1
 73c:	62 1f       	adc	r22, r18
 73e:	83 9f       	mul	r24, r19
 740:	a0 0d       	add	r26, r0
 742:	61 1d       	adc	r22, r1
 744:	22 1f       	adc	r18, r18
 746:	74 9f       	mul	r23, r20
 748:	33 27       	eor	r19, r19
 74a:	a0 0d       	add	r26, r0
 74c:	61 1d       	adc	r22, r1
 74e:	23 1f       	adc	r18, r19
 750:	84 9f       	mul	r24, r20
 752:	60 0d       	add	r22, r0
 754:	21 1d       	adc	r18, r1
 756:	82 2f       	mov	r24, r18
 758:	76 2f       	mov	r23, r22
 75a:	6a 2f       	mov	r22, r26
 75c:	11 24       	eor	r1, r1
 75e:	9f 57       	subi	r25, 0x7F	; 127
 760:	50 40       	sbci	r21, 0x00	; 0
 762:	9a f0       	brmi	.+38     	; 0x78a <__mulsf3_pse+0x88>
 764:	f1 f0       	breq	.+60     	; 0x7a2 <__mulsf3_pse+0xa0>
 766:	88 23       	and	r24, r24
 768:	4a f0       	brmi	.+18     	; 0x77c <__mulsf3_pse+0x7a>
 76a:	ee 0f       	add	r30, r30
 76c:	ff 1f       	adc	r31, r31
 76e:	bb 1f       	adc	r27, r27
 770:	66 1f       	adc	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	88 1f       	adc	r24, r24
 776:	91 50       	subi	r25, 0x01	; 1
 778:	50 40       	sbci	r21, 0x00	; 0
 77a:	a9 f7       	brne	.-22     	; 0x766 <__mulsf3_pse+0x64>
 77c:	9e 3f       	cpi	r25, 0xFE	; 254
 77e:	51 05       	cpc	r21, r1
 780:	80 f0       	brcs	.+32     	; 0x7a2 <__mulsf3_pse+0xa0>
 782:	0c 94 1a 03 	jmp	0x634	; 0x634 <__fp_inf>
 786:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_szero>
 78a:	5f 3f       	cpi	r21, 0xFF	; 255
 78c:	e4 f3       	brlt	.-8      	; 0x786 <__mulsf3_pse+0x84>
 78e:	98 3e       	cpi	r25, 0xE8	; 232
 790:	d4 f3       	brlt	.-12     	; 0x786 <__mulsf3_pse+0x84>
 792:	86 95       	lsr	r24
 794:	77 95       	ror	r23
 796:	67 95       	ror	r22
 798:	b7 95       	ror	r27
 79a:	f7 95       	ror	r31
 79c:	e7 95       	ror	r30
 79e:	9f 5f       	subi	r25, 0xFF	; 255
 7a0:	c1 f7       	brne	.-16     	; 0x792 <__mulsf3_pse+0x90>
 7a2:	fe 2b       	or	r31, r30
 7a4:	88 0f       	add	r24, r24
 7a6:	91 1d       	adc	r25, r1
 7a8:	96 95       	lsr	r25
 7aa:	87 95       	ror	r24
 7ac:	97 f9       	bld	r25, 7
 7ae:	08 95       	ret

000007b0 <__mulsi3>:
 7b0:	db 01       	movw	r26, r22
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	0e 94 0a 04 	call	0x814	; 0x814 <__muluhisi3>
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	a2 9f       	mul	r26, r18
 7c0:	80 0d       	add	r24, r0
 7c2:	91 1d       	adc	r25, r1
 7c4:	a3 9f       	mul	r26, r19
 7c6:	90 0d       	add	r25, r0
 7c8:	b2 9f       	mul	r27, r18
 7ca:	90 0d       	add	r25, r0
 7cc:	11 24       	eor	r1, r1
 7ce:	08 95       	ret

000007d0 <__udivmodsi4>:
 7d0:	a1 e2       	ldi	r26, 0x21	; 33
 7d2:	1a 2e       	mov	r1, r26
 7d4:	aa 1b       	sub	r26, r26
 7d6:	bb 1b       	sub	r27, r27
 7d8:	fd 01       	movw	r30, r26
 7da:	0d c0       	rjmp	.+26     	; 0x7f6 <__udivmodsi4_ep>

000007dc <__udivmodsi4_loop>:
 7dc:	aa 1f       	adc	r26, r26
 7de:	bb 1f       	adc	r27, r27
 7e0:	ee 1f       	adc	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	a2 17       	cp	r26, r18
 7e6:	b3 07       	cpc	r27, r19
 7e8:	e4 07       	cpc	r30, r20
 7ea:	f5 07       	cpc	r31, r21
 7ec:	20 f0       	brcs	.+8      	; 0x7f6 <__udivmodsi4_ep>
 7ee:	a2 1b       	sub	r26, r18
 7f0:	b3 0b       	sbc	r27, r19
 7f2:	e4 0b       	sbc	r30, r20
 7f4:	f5 0b       	sbc	r31, r21

000007f6 <__udivmodsi4_ep>:
 7f6:	66 1f       	adc	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	1a 94       	dec	r1
 800:	69 f7       	brne	.-38     	; 0x7dc <__udivmodsi4_loop>
 802:	60 95       	com	r22
 804:	70 95       	com	r23
 806:	80 95       	com	r24
 808:	90 95       	com	r25
 80a:	9b 01       	movw	r18, r22
 80c:	ac 01       	movw	r20, r24
 80e:	bd 01       	movw	r22, r26
 810:	cf 01       	movw	r24, r30
 812:	08 95       	ret

00000814 <__muluhisi3>:
 814:	0e 94 15 04 	call	0x82a	; 0x82a <__umulhisi3>
 818:	a5 9f       	mul	r26, r21
 81a:	90 0d       	add	r25, r0
 81c:	b4 9f       	mul	r27, r20
 81e:	90 0d       	add	r25, r0
 820:	a4 9f       	mul	r26, r20
 822:	80 0d       	add	r24, r0
 824:	91 1d       	adc	r25, r1
 826:	11 24       	eor	r1, r1
 828:	08 95       	ret

0000082a <__umulhisi3>:
 82a:	a2 9f       	mul	r26, r18
 82c:	b0 01       	movw	r22, r0
 82e:	b3 9f       	mul	r27, r19
 830:	c0 01       	movw	r24, r0
 832:	a3 9f       	mul	r26, r19
 834:	70 0d       	add	r23, r0
 836:	81 1d       	adc	r24, r1
 838:	11 24       	eor	r1, r1
 83a:	91 1d       	adc	r25, r1
 83c:	b2 9f       	mul	r27, r18
 83e:	70 0d       	add	r23, r0
 840:	81 1d       	adc	r24, r1
 842:	11 24       	eor	r1, r1
 844:	91 1d       	adc	r25, r1
 846:	08 95       	ret

00000848 <_exit>:
 848:	f8 94       	cli

0000084a <__stop_program>:
 84a:	ff cf       	rjmp	.-2      	; 0x84a <__stop_program>
